<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mathieu Leplatre - Dev</title><link href="https://blog.mathieu-leplatre.info/" rel="alternate"></link><link href="https://blog.mathieu-leplatre.info/feeds/dev.atom.xml" rel="self"></link><id>https://blog.mathieu-leplatre.info/</id><updated>2024-07-08T00:00:00+02:00</updated><entry><title>About Self-Service</title><link href="https://blog.mathieu-leplatre.info/about-self-service.html" rel="alternate"></link><published>2024-07-08T00:00:00+02:00</published><updated>2024-07-08T00:00:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2024-07-08:/about-self-service.html</id><summary type="html">&lt;p&gt;When I hear &lt;em&gt;self-service&lt;/em&gt;, I think of a restaurant where customers serve themselves, which minimizes wait times and maximizes efficiency. Similarly, in our software engineering team, self-service solutions empower other teams to get what they need without waiting for our assistance, leading to faster service and reduced context switching.&lt;/p&gt;
&lt;p&gt;Let's ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I hear &lt;em&gt;self-service&lt;/em&gt;, I think of a restaurant where customers serve themselves, which minimizes wait times and maximizes efficiency. Similarly, in our software engineering team, self-service solutions empower other teams to get what they need without waiting for our assistance, leading to faster service and reduced context switching.&lt;/p&gt;
&lt;p&gt;Let's explore what self-service means in our domain and how different approaches can be implemented to achieve it.&lt;/p&gt;
&lt;div class="section" id="redefining-self-service-in-software-teams"&gt;
&lt;h2&gt;Redefining Self-Service in Software Teams&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Image generated by OpenAI's DALL-E model - A Pixar-style senior engineer character interacting with a self-service machine at a fast food restaurant." src="https://blog.mathieu-leplatre.info/images/self_service-self-service.webp" style="width: 70%;" /&gt;
&lt;/div&gt;
&lt;p&gt;What is not self-service?&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I need something&lt;/li&gt;
&lt;li&gt;I open a ticket&lt;/li&gt;
&lt;li&gt;The ticket is put in a backlog&lt;/li&gt;
&lt;li&gt;One or a few operators handle it&lt;/li&gt;
&lt;li&gt;I receive what I asked&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is the usual experience at fast-foods. Latency at &lt;em&gt;Step 4&lt;/em&gt; being reduced to its maximum with a lot of coordination and pressure on workers.&lt;/p&gt;
&lt;p&gt;In companies, you're very likely to face this process too, because only a few administrators have the necessary privileges to get you what you want.&lt;/p&gt;
&lt;p&gt;Believe it or not, but I've seen projects where onboarding a new instance of a resource consisted in waiting for engineers to modify the source code and then operators to redeploy the service and migrate the database schema. Days of work. Mostly coordination latency.&lt;/p&gt;
&lt;p&gt;It may seem obvious, but ideally this is what we want:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I need something&lt;/li&gt;
&lt;li&gt;I follow step-by-step instructions&lt;/li&gt;
&lt;li&gt;I receive it&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Between &lt;em&gt;Step 2&lt;/em&gt; and &lt;em&gt;Step 3&lt;/em&gt;, there could be an additional approval step, which at most consists in a single action to reject or accept the request.&lt;/p&gt;
&lt;p&gt;In practice, self-service is not so obvious to implement, but the benefits are clear.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-0-empowerment-through-knowledge"&gt;
&lt;h2&gt;Level 0: Empowerment Through Knowledge&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Image generated by OpenAI's DALL-E model - A Pixar-style senior engineer character reading a big book in a library." src="https://blog.mathieu-leplatre.info/images/self_service-documentation.webp" style="width: 70%;" /&gt;
&lt;/div&gt;
&lt;p&gt;This is like level 0 of self service. RTFD.&lt;/p&gt;
&lt;p&gt;All procedures are documented in a company wiki, using FAQs, tutorials, cookbooks, in order to empower employees to find answers on their own.&lt;/p&gt;
&lt;p&gt;If the documentation repository is very well-maintained and organized, it would globally work. But from my experience, content is usually outdated and hard to find. Searching via keywords on Confluence is clearly not a panacea. It takes a real job (archivist or filing clerk) to build good documentation.&lt;/p&gt;
&lt;p&gt;AI and specialized language models can significantly improve searchability and relevance of information, making it easier for employees to find what they need quickly.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Cost&lt;/strong&gt;: ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ‚òÜ&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Productivity&lt;/strong&gt;: ‚≠êÔ∏è ‚òÜ ‚òÜ ‚òÜ ‚òÜ&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="gui-bridging-the-gap-for-non-technical-users"&gt;
&lt;h2&gt;GUI: Bridging the Gap for Non-Technical Users&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Image generated by OpenAI's DALL-E model - A Pixar-style senior engineer character using a shiny iMac computer." src="https://blog.mathieu-leplatre.info/images/self_service-gui.webp" style="width: 70%;" /&gt;
&lt;/div&gt;
&lt;p&gt;At the other side of the spectrum: user interfaces.&lt;/p&gt;
&lt;p&gt;You build a (Web) UI where users can login, view and edit resources, submit their request, and obtain or wait for the result.&lt;/p&gt;
&lt;p&gt;These user interfaces are extremely expensive to build:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Intuitive design and user experience are crucial and too easy to get wrong;&lt;/li&gt;
&lt;li&gt;UI must adapt to users privileges;&lt;/li&gt;
&lt;li&gt;Likely to reinvent the wheel for review and approval workflows, comments and request status updates;&lt;/li&gt;
&lt;li&gt;Web apps are toilsome to build and maintain (anyone maintaining a JS project with a dozen of dependencies knows that);&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They make sense if a lot of users interact very often with them, especially if they are non-technical, but in some situations they will generally cost a lot more than the value they bring. Bad user interfaces can also be very frustrating and counterproductive.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Cost&lt;/strong&gt;: ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Productivity&lt;/strong&gt;: ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="apis-the-backbone-of-autonomous-teams"&gt;
&lt;h2&gt;APIs: The Backbone of Autonomous Teams&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Image generated by OpenAI's DALL-E model - A Pixar-style senior engineer character building a bridge." src="https://blog.mathieu-leplatre.info/images/self_service-apis.webp" style="width: 70%;" /&gt;
&lt;/div&gt;
&lt;p&gt;Around 2002, Jeff Bezos told his employees to build APIs in order to enable teams to independently access and utilize each other's services without needing direct inter-team communication or coordination.&lt;/p&gt;
&lt;p&gt;You need a database in prod? Just call the API to get it, &lt;tt class="docutils literal"&gt;POST /databases/prod/mydb&lt;/tt&gt;!&lt;/p&gt;
&lt;p&gt;This is a great idea, that served as the foundations of AWS, and was probably one of the keystones to the company success.&lt;/p&gt;
&lt;p&gt;But concretely, how many companies did implement this concretely? Unless you're working at Google or Amazon, it's very likely that if you need a new sub-domain name for your app, you'll have to fill a Jira ticket üòè&lt;/p&gt;
&lt;p&gt;This approach requires excellent documentation and API versioning. And I don't know how offering self service APIs would work for non-technical employees, for which it may not be obvious to perform tasks programmatically.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Cost&lt;/strong&gt;: ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ‚òÜ ‚òÜ&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Productivity&lt;/strong&gt;: ‚≠êÔ∏è‚≠êÔ∏è ‚òÜ ‚òÜ ‚òÜ&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="efficient-interactions-with-chat-bots"&gt;
&lt;h2&gt;Efficient Interactions with Chat Bots&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Image generated by OpenAI's DALL-E model - A Pixar-style senior engineer character handshaking a droid." src="https://blog.mathieu-leplatre.info/images/self_service-chatbots.webp" style="width: 70%;" /&gt;
&lt;/div&gt;
&lt;p&gt;In my daily life, I generally hate chat bots that pretend to be human. The other day, I received a WhatsApp bot message with some health insurance details for someone else. Apparently, this person's phone number had a typo, and I did my best to tell the remote machine that I had nothing to do with this, but there was no way‚Äîit was not programmed for this situation apparently.&lt;/p&gt;
&lt;p&gt;However, I find them extremely useful and handy when their dialogue interface is a finite list of commands.&lt;/p&gt;
&lt;p&gt;In the context of self-service, we don't really need natural language. A list of possible operations and available options is a lot more efficient than a very bad imitation of a human waiter or a free text input box without guidance.&lt;/p&gt;
&lt;p&gt;Chat bots can walk us through a step-by-step journey, and would perfectly replace typical &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Wizard_(software)"&gt;multi-step forms&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Beyond basic Slack plugins and commands, I don't have too much experience with chat bots at work. I think we should do more with them, because compared to user interfaces, they are fairly easy and cheap to build.
I did &lt;a class="reference external" href="https://github.com/leplatrem/ihatemoney-bot"&gt;one&lt;/a&gt; for Telegram years ago using a high level SDK, and it was fun to implement!&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Cost&lt;/strong&gt;: ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ‚òÜ ‚òÜ&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Productivity&lt;/strong&gt;: ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ‚òÜ&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="files-driven-workflows-automation-through-ci-cd"&gt;
&lt;h2&gt;Files-Driven Workflows: Automation through CI/CD&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Image generated by OpenAI's DALL-E model - A Pixar-style senior engineer character installing a machine that has gears." src="https://blog.mathieu-leplatre.info/images/self_service-files-driven.webp" style="width: 70%;" /&gt;
&lt;/div&gt;
&lt;p&gt;This has been my favorite in the last years: files on a Git repository with a CI/CD pipeline.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;You open a pull-request on a Git repository to make changes&lt;/li&gt;
&lt;li&gt;An automated job verifies that they look sound&lt;/li&gt;
&lt;li&gt;A human approves it&lt;/li&gt;
&lt;li&gt;An automated job executes the pipeline, and you see the results immediately&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;CI/CD scripts are relatively cheap to implement, and platforms like Gitlab or Github are straightforward to work with.&lt;/p&gt;
&lt;p&gt;The level of abstraction is what matters here. The CI/CD pipeline does not always have to be super smart. For example, the files can be mounted directly in the containers and read when the application starts. Or a script can read the files and execute calls on APIs each time they are modified. I personally like when the files are flat and easy to reason about, and it's not always the case with &lt;em&gt;configuration as code&lt;/em&gt; where resources are sometimes spread in tiny YAML files.&lt;/p&gt;
&lt;p&gt;Permissions management and security are also main concerns. If you give the power to make changes to your infrastructure to a CI/CD worker, you better make sure to have good management of secrets and fine access control (VPN, user groups, ...).&lt;/p&gt;
&lt;p&gt;Extensive linting is also highly recommended. A typo in a file, and you can end up replacing a resource with another without noticing! You can set up advanced solutions to execute dry runs or deploy temporary instances to give the reviewers better insights and more confidence in approving the changes.&lt;/p&gt;
&lt;p&gt;This approach has some limits if a lot of employees have to modify the same set of files (merge conflicts!), but there are workarounds, and in most cases, the frequency of changes to the same resource remains relatively low.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Cost&lt;/strong&gt;: ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ‚òÜ ‚òÜ&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Productivity&lt;/strong&gt;: ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ‚òÜ&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="do-less-accomplish-more"&gt;
&lt;h2&gt;Do Less, Accomplish More&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Image generated by OpenAI's DALL-E model - A Pixar-style senior engineer character laying back and relaxing, surrounded by his cheerful team of young engineers." src="https://blog.mathieu-leplatre.info/images/self_service-conclusion.webp" style="width: 70%;" /&gt;
&lt;/div&gt;
&lt;p&gt;Implementing self-service solutions can transform how your teams operate, leading to greater efficiency, reduced wait times, and more satisfied employees. As shown in this article, there are many possible alternatives before investing a lot of resources in building complex web user interfaces. Start small, iterate, and blend different approaches to create a self-service environment that not only empowers users but also allows your team to focus on high-impact tasks.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;em&gt;You may have noticed that the English in this article is somewhat better than in other articles on this website. This is because I used GenAI (ChatGPT 4o to name it) for proofreading and corrections, and, as you may have guessed, for illustrations too. It doesn't mean I'll always use it in the future. I hope it didn't affect the reading experience too much.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="tips"></category><category term="methodology"></category></entry><entry><title>Design for the Long Term</title><link href="https://blog.mathieu-leplatre.info/design-for-the-long-term.html" rel="alternate"></link><published>2021-10-18T00:00:00+02:00</published><updated>2021-10-18T00:00:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2021-10-18:/design-for-the-long-term.html</id><summary type="html">&lt;p&gt;I really enjoyed reading the debates around choosing &lt;a class="reference external" href="http://boringtechnology.club"&gt;boring&lt;/a&gt; or &lt;a class="reference external" href="https://lucjan.medium.com/choose-exciting-technology-e735bba08acc"&gt;exciting&lt;/a&gt; technology.
In my opinion, there is another interesting point, beyond new or old, that is about longevity, or durability.&lt;/p&gt;
&lt;p&gt;Some software can be deliberately ephemeral, like a mobile app for a specific event. But usually we want software to ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;I really enjoyed reading the debates around choosing &lt;a class="reference external" href="http://boringtechnology.club"&gt;boring&lt;/a&gt; or &lt;a class="reference external" href="https://lucjan.medium.com/choose-exciting-technology-e735bba08acc"&gt;exciting&lt;/a&gt; technology.
In my opinion, there is another interesting point, beyond new or old, that is about longevity, or durability.&lt;/p&gt;
&lt;p&gt;Some software can be deliberately ephemeral, like a mobile app for a specific event. But usually we want software to last as long as possible, like a Web API with millions of clients.&lt;/p&gt;
&lt;p&gt;As I outlined in &lt;a class="reference external" href="https://blog.mathieu-leplatre.info/about-maintenance-mode.html"&gt;a previous post&lt;/a&gt;, long term maintenance takes all sorts of efforts. And logically, applications with the least maintenance cost are more likely to last longer.&lt;/p&gt;
&lt;p&gt;So, what makes software durable? How can we take long term maintenance into consideration during the design phase?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: &lt;em&gt;Think of your software architecture as a multi-generational building. Simplicity and adaptability are key to guarantee long term survival in a constantly changing environment. Designing for the long term requires experience and judgement, so focus on values and people more than technologies.&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="typical-lifecycle"&gt;
&lt;h2&gt;Typical Lifecycle&lt;/h2&gt;
&lt;p&gt;From my experience, the typical phases of software engineering are:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Define the needs and requirements&lt;/li&gt;
&lt;li&gt;Assemble a team&lt;/li&gt;
&lt;li&gt;Design, develop and deploy&lt;/li&gt;
&lt;li&gt;Validate conformity&lt;/li&gt;
&lt;li&gt;Dismantle the team&lt;/li&gt;
&lt;li&gt;Run and maintain forever&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The last phase is the critical one: you go from a top priority project, backed by a whole team with daily activities, to a low priority project, with a few people involved only sporadically. And it can last years.&lt;/p&gt;
&lt;p&gt;What if we would build software with this critical &lt;em&gt;last phase&lt;/em&gt; in mind?&lt;/p&gt;
&lt;blockquote&gt;
Engineering is 99% managing legacy, 1% deciding on what legacy you want to have in the future. ‚îÄ &lt;a class="reference external" href="https://twitter.com/rakyll/status/1440067121522692104"&gt;&amp;#64;rakyll, 20 sept. 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="elegance-vs-adaptability"&gt;
&lt;h2&gt;Elegance vs. Adaptability&lt;/h2&gt;
&lt;p&gt;A CTO recently reminded his teams &lt;a class="footnote-reference" href="#preply" id="footnote-reference-1"&gt;[1]&lt;/a&gt; that they should ¬´&lt;em&gt;build boxes, not arches&lt;/em&gt;¬ª. He uses this metaphor to remind programmers that &lt;strong&gt;elegance in their design should not delay the production of value&lt;/strong&gt;. Arches are more elegant than blocks, but they show value only when the top key stone is put. Unlike arches, blocks can be easily rearranged and replaced over time, helping adaptability and market fit.&lt;/p&gt;
&lt;p&gt;I could reuse this metaphor, and say that blocks are more likely to last over time than arches.&lt;/p&gt;
&lt;p&gt;In the book &lt;a class="reference external" href="https://en.wikipedia.org/wiki/How_Buildings_Learn"&gt;How buildings learn&lt;/a&gt;, Stewart Brand shows that buildings which were built quickly to look impressive have a terrible maintenance record.&lt;/p&gt;
&lt;p&gt;Engineers who want exciting technology in their curriculum are like architects who want beautiful buildings in their portfolio. Do they really care how practical it will be over the years? Is it built to last or to shine?&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Notre-Dame Cathedral reconstruction" src="https://blog.mathieu-leplatre.info/images/long-term-notre-dame.jpg" /&gt;
&lt;p class="caption"&gt;Notre-Dame Cathedral reconstruction ¬© habibeh Madjdabadi architecture Studio&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As Joel famously wrote 21 years ago, ¬´&lt;em&gt;rewriting the code from scratch is the single worst strategic mistake that any software company can make&lt;/em&gt;¬ª: &lt;a class="footnote-reference" href="#fjoel" id="footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
Programmers are, in their hearts, architects, and the first thing they want to do when they get to a site is to bulldoze the place flat and build something grand.&lt;/blockquote&gt;
&lt;p&gt;Do we want to build, demolish, and rebuild? Or should we design software like a building where engineers and operators have to live for several generations?&lt;/p&gt;
&lt;p&gt;When aiming for eternal design, you must focus on an architecture where it is viable to ¬´&lt;em&gt;fail fast, fail small, fail often, learn, and reiterate&lt;/em&gt;¬ª.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pace-layered-design"&gt;
&lt;h2&gt;Pace-layered Design&lt;/h2&gt;
&lt;p&gt;How do you balance stability and adaptability with innovation?&lt;/p&gt;
&lt;p&gt;I would advise you to spend 30' to watch &lt;a class="reference external" href="https://www.youtube.com/watch?v=ZSaWdp833YM"&gt;how buildings are built for change&lt;/a&gt;. The parallel with software is very inspiring. You'll think of your application code as a structure with &lt;strong&gt;solid, simple, slow-moving foundations&lt;/strong&gt;, whose upper blocks can be replaced and remodeled, fostering innovation. You want to be able to repaint bedrooms or replace windows without jeopardizing life in it!&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="‚ÄúPace Layers‚Äù diagram from Stewart Brand‚Äôs book ‚ÄúThe Clock of the Long Now‚Äù" src="https://blog.mathieu-leplatre.info/images/long-term-pace-layering.jpg" /&gt;
&lt;p class="caption"&gt;Everlasting, slow, and powerful core layers, versus ephemeral, fast, and weak skin layers&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The firm Gartner applied this concept of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Shearing_layers"&gt;shearing layers&lt;/a&gt; to software, where each application layer obeys to a different strategy:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Powerful lower parts move at slow pace&lt;/strong&gt;: Change is risky and expensive, strict and only incremental (APIs, databases, ...)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Middle parts adapt to business&lt;/strong&gt;: Change occurs more often, following the company's business processes and specifities (custom integrations, SaaS, cloud...)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Top parts move fast&lt;/strong&gt;: Change requires less governance and planning, encouraging experimentation (proof-of-concepts, frontend, ...)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Uncle Bob's also advocates the same ideas in his book about &lt;a class="reference external" href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;Clean Architecture&lt;/a&gt;. Breaking the myth that restarting from scratch is a solution, he expands familiar principles like &lt;a class="reference external" href="https://en.wikipedia.org/wiki/SOLID"&gt;SOLID&lt;/a&gt; and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Separation_of_concerns"&gt;SoC&lt;/a&gt; to system architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wear-and-tear-parts"&gt;
&lt;h2&gt;Wear and Tear Parts&lt;/h2&gt;
&lt;p&gt;Compare a classic reflux valve with the &lt;a class="reference external" href="https://www.youtube.com/watch?v=suIAo0EYwOE"&gt;valve designed by Nikola Tesla&lt;/a&gt;. One has at least two moving parts, a spring and a ¬´stopper¬ª, the other one has none, which gives it an almost infinite lifetime.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Tesla Valve | The complete physics - https://www.youtube.com/watch?v=suIAo0EYwOE" src="https://blog.mathieu-leplatre.info/images/long-term-tesla-valve.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;When your application handles a request, &lt;strong&gt;what moving parts are involved&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;Compare the moving parts of a statically generated website, with one powered by Wordpress, relying on a MySQL database, a Web server running PHP, with extensions and system libraries, an Admin UI in React, a Varnish cache... With the former, you write your articles in Markdown, run a command once to generate the HTML pages, and simply serve the static content to millions of readers, without any moving part. No monitoring, no security patches, and resilient to system upgrades. In twenty years, even if the script that generates the files doesn't run anymore, the website will still be online.&lt;/p&gt;
&lt;p&gt;Take MDN for example. It used to be powered by a &lt;a class="reference external" href="https://github.com/mdn/kuma"&gt;Django application&lt;/a&gt; with thousands lines of code. Instead of this complex wiki application, the team replaced it with Markdown files in a &lt;a class="reference external" href="https://github.com/mdn/content"&gt;Github repo&lt;/a&gt;, and some commands to publish the HTML website.&lt;/p&gt;
&lt;p&gt;Similarly, &lt;a class="reference external" href="https://youtu.be/vUCr1oTtaKA?t=965"&gt;Tim showed us&lt;/a&gt; how they fixed the BBC News app scaling issues by prerendering content into static files on Amazon S3, instead of relying directly on BBC Web services.&lt;/p&gt;
&lt;p&gt;It's not all or nothing, just make sure to &lt;strong&gt;think about how much resources, machines and people, will be required to operate this service years after the original team built it&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conviviality"&gt;
&lt;h2&gt;Conviviality&lt;/h2&gt;
&lt;p&gt;In 1973, Ivan Illich wrote &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Tools_for_Conviviality"&gt;Tools for Conviviality&lt;/a&gt;. This book contains radical ideas about progress, emancipation, and technology. Illich explains how it is crucial to be able to share, understand, repair, and modify our tools in order to reach independence over the long term.
It is not a coincidence if the book had an immense influence of the first computer hackers &lt;a class="footnote-reference" href="#illich" id="footnote-reference-3"&gt;[3]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Which of the appliances that you own are repairable?&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://www.ifixit.com/Manifesto"&gt;iFixit Manifesto&lt;/a&gt; says it clearly: ¬´&lt;em&gt;If you can't fix it, you don't own it&lt;/em&gt;¬ª.&lt;/p&gt;
&lt;p&gt;Not so long ago, if your &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Citro%C3%ABn_2CV"&gt;Citro√´n 2CV&lt;/a&gt;'s belt broke in the middle of nowhere, you could use your &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Fully_fashioned_stockings"&gt;nylon stockings&lt;/a&gt; as a temporary spare part and make it home.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Citro√´n Ami 6" src="https://blog.mathieu-leplatre.info/images/long-term-ami-6.jpg" /&gt;
&lt;p class="caption"&gt;One of the old cars of my colleague Florian, long term Gecko hacker :)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you build your whole application (or business!) on the unique features of a cloud solution (Spanner, Firebase, ...) or on the latest trendy all-in-one framework, you obtain the opposite of conviviality! &lt;strong&gt;Avoid vendor lock-in!&lt;/strong&gt; You will need to use their specific screwdrivers to repair it, you won't find standard spare parts, and years later planned obsolescence will threaten you. Avoid ¬´easy¬ª (no effort), and go for ¬´simple¬ª (no complexity).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Simple is understandable. Simple scales. Simple always wins over the long term&lt;/strong&gt;. &lt;a class="reference external" href="https://www.youtube.com/watch?v=OuF9weSkS68"&gt;Think more like ARM, and less like Intel :)&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="beware-of-over-engineering"&gt;
&lt;h2&gt;Beware of Over-engineering&lt;/h2&gt;
&lt;p&gt;Most intelligent people produce &lt;strong&gt;intelligent designs&lt;/strong&gt;. The reality is that their creations eventually become extremely fragile, costly to maintain, or they just &lt;strong&gt;don't survive the company's successive turnovers&lt;/strong&gt;. Because most of us aren't super smart, are sometimes sleepy, often very lazy, or with scars from the past.&lt;/p&gt;
&lt;p&gt;I recently fell upon &lt;a class="reference external" href="https://github.com/taskcluster/taskcluster/blob/5a25a717/infrastructure/tooling/src/build/tasks/taskcluster-proxy.js#L65-L79"&gt;this example&lt;/a&gt;, where a piece of JavaScript will produce a static &lt;tt class="docutils literal"&gt;Dockerfile&lt;/tt&gt;. What's wrong with static files? It's not because you &lt;em&gt;can&lt;/em&gt; do it, that you &lt;em&gt;have&lt;/em&gt; to do it!&lt;/p&gt;
&lt;p&gt;Discriminating intelligence is crucial.&lt;/p&gt;
&lt;p&gt;In the past, we would build Web services as big monoliths. &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Microservices"&gt;Microservices&lt;/a&gt; emerged in early 2010s, mainly as a response to the needs of continuous deployment, following the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Unix_philosophy"&gt;Unix philosophy&lt;/a&gt;. After a decade of hype, where engineers would build all sort of applications using dozens of tiny services, in the late 2010s, monolithic applications &lt;a class="reference external" href="https://www.craigkerstiens.com/2019/03/13/give-me-back-my-monolith/"&gt;became&lt;/a&gt; &lt;a class="reference external" href="https://shopify.engineering/shopify-monolith"&gt;acceptable&lt;/a&gt; &lt;a class="reference external" href="https://www.bennadel.com/blog/3944-why-ive-been-merging-microservices-back-into-the-monolith-at-invision.htm"&gt;again&lt;/a&gt;. And as people with discerning abilities &lt;a class="reference external" href="https://martinfowler.com/bliki/MonolithFirst.html"&gt;sensed it&lt;/a&gt; early, you should just ¬´&lt;em&gt;start with a monolithic approach and move to microservices if needed&lt;/em&gt;¬ª.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="skin-in-the-game"&gt;
&lt;h2&gt;Skin in the Game&lt;/h2&gt;
&lt;p&gt;Like factories and towns who release their waste in the river, assuming others downstream will handle it, some engineers and managers consider themselves as &lt;em&gt;builders&lt;/em&gt;, and will let future &lt;em&gt;fixers&lt;/em&gt; handle maintenance over time.&lt;/p&gt;
&lt;p&gt;Taleb explores this mistake in his book about &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Antifragile_(book)#Skin_in_the_game"&gt;Antifragility&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
Every captain goes down with every ship&lt;/blockquote&gt;
&lt;p&gt;If a engineer (or a manager) collects benefits when she/he is right and let others pay the price when she/he is wrong, the result will be fragile.&lt;/p&gt;
&lt;p&gt;Like UX designers who don't use their app, or architects who don't spend time in their buildings, software developers who never have experienced the romance of maintenance are less likely to produce long lasting solutions.&lt;/p&gt;
&lt;p&gt;Engineers should experience being maintainers.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="A minor upgrade of React Router breaking the entire app." src="https://blog.mathieu-leplatre.info/images/long-term-minor-upgrade.jpg" /&gt;
&lt;p class="caption"&gt;A patch version upgrade of React Router breaking the entire app.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You need first-hand experience, having done mistakes, and having paid the consequences, or your ships will keep drowning.&lt;/p&gt;
&lt;p&gt;Experience helps you adjust priorities in life. You grow up. Age doesn't really matter. You may have missed the joy of upgrading Redmine on your personal server 15 years ago, if you had to deal with upgrades of React Router in your SPA recently, you know what this is all about. You paid the price of your bad draw. You now have less patience to deal with fragile stuff. You aim to work less, and that's extremely beneficial when it comes to designing solid and durable stuff.&lt;/p&gt;
&lt;p&gt;I think that it's also one of the succesful ideas behind &lt;em&gt;Dev Ops&lt;/em&gt;, when developers are also accoutable for running their stuff in production.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="technology-pick"&gt;
&lt;h2&gt;Technology Pick&lt;/h2&gt;
&lt;p&gt;Which technology will stand the test of time?&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Design of the BIC pen" src="https://blog.mathieu-leplatre.info/images/long-term-bic-pen.jpg" /&gt;
&lt;p class="caption"&gt;&lt;a class="reference external" href="https://twitter.com/fxn/status/1443249162653511687"&gt;&amp;#64;fxn, 29 sept. 2021&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I like one of the first answers to this tweet, arguing that ¬´&lt;em&gt;paper didn't change much, that's why!&lt;/em&gt;¬ª.
In the world of software, and technology in general, the environment evolves constantly. Some top-notch innovations of yesterday become mainstream building blocks of tomorrow. Others fall under the pressure of the heartless natural selection of their ecosystems.&lt;/p&gt;
&lt;p&gt;There are &lt;a class="reference external" href="https://opensource.com/article/18/3/pick-right-technology"&gt;rational criteria&lt;/a&gt; to maximize your chances, but life always remains full of surprises :) Naturally, technologies capable of embracing and coexisting nicely with other ones have a better chance to survive! Rust, for example, can be executed from almost any language, from Python to Javascript, and can itself execute external libraries written in C++, which makes it a great tool for gradual rewrites.&lt;/p&gt;
&lt;p&gt;We can argue that you should &lt;strong&gt;listen to your old guard&lt;/strong&gt;. They've seen trends pass by, their sweat shirt may not be cool anymore, but they've washed it a thousand times and it &lt;a class="reference external" href="https://blog.mathieu-leplatre.info/tips-for-your-makefile-with-python.html"&gt;still does the job nicely&lt;/a&gt;. &lt;strong&gt;They have a lot less free time than young intrepid engineers, and are therefore less likely to reinvent the wheel&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Successful technologies with a low rate of evolution can be a good bet. As &lt;a class="reference external" href="https://nicolas.perriault.net/"&gt;Nico&lt;/a&gt; said, a &lt;a class="reference external" href="https://fr.wikipedia.org/wiki/Gibson_Les_Paul"&gt;Gibson Les Paul&lt;/a&gt; doesn't need any enhancement, it's simple, built with quality, and maintenance will only consist in replacing the strings from time to time. That's also one of the reasons why I enjoyed working with &lt;a class="reference external" href="https://trypyramid.com/"&gt;Pyramid&lt;/a&gt;, instead of &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Lindy_effect"&gt;Lindy effect&lt;/a&gt; gives an interesting perspective too: the future life expectancy of some non-perishable things, like a technology or an idea, is proportional to their current age. Obviously, other forces like the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Network_effect"&gt;network effects&lt;/a&gt; come into play. Do you realize that the usage of jQuery only &lt;a class="reference external" href="https://twitter.com/mikesherov/status/1443679254009483273"&gt;started to decline&lt;/a&gt; at the end of 2020?&lt;/p&gt;
&lt;p&gt;Besides, you cannot ignore recruiting. Perl enthusiasts can argue that their ecosystem is fantastic because any library upgrade is almost guaranteed to be backward compatible, nonetheless it will be very hard to recruit talents. Of course, good engineers can learn anything. Even though it's not always that simple. I read that sometimes new hires refused to learn Elm &lt;a class="footnote-reference" href="#elm" id="footnote-reference-4"&gt;[4]&lt;/a&gt; because they wouldn't see the value for their curriculum!&lt;/p&gt;
&lt;p&gt;Anyway, there is no magic rule of thumb here, but I would recommend to &lt;strong&gt;get the people part right because it matters more&lt;/strong&gt;. Any technology in the hands of reasonable craftsmen will always perform better over time than great technologies under disastrous management.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="architecture-legacy"&gt;
&lt;h2&gt;Architecture Legacy&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Tsunami stones: do not build any homes below this point" src="https://blog.mathieu-leplatre.info/images/long-term-tsunami.jpg" /&gt;
&lt;p class="caption"&gt;Centuries old &lt;em&gt;tsunami stone&lt;/em&gt; in Japan, warning descendants to not build any homes below this point because of great tsunamis&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In order to help future engineers understand your choices, and their context, a good practice consists in documenting &lt;em&gt;architecturally significant&lt;/em&gt; decisions.&lt;/p&gt;
&lt;p&gt;The idea is to answer potential &lt;em&gt;Why?&lt;/em&gt; questions, and focus on ¬´design decisions that are costly to change¬ª  &lt;a class="footnote-reference" href="#folzzio" id="footnote-reference-5"&gt;[5]&lt;/a&gt; &lt;a class="footnote-reference" href="#fcognitect" id="footnote-reference-6"&gt;[6]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The documents must be relatively short to read, but must at least describe the context, what options were considered, with their pros and cons, and what are the consequences of the decision. And must of course be kept in the repo along with the source code.&lt;/p&gt;
&lt;p&gt;Check out &lt;a class="reference external" href="https://github.com/joelparkerhenderson/architecture-decision-record#adr-example-templates"&gt;the various templates&lt;/a&gt;, and &lt;a class="reference external" href="https://github.com/joelparkerhenderson/architecture-decision-record/blob/6c4f515/examples/index.md"&gt;examples&lt;/a&gt;, think long term, and &lt;strong&gt;start writing architecture decision records&lt;/strong&gt;!&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Many thanks to everyone that participated in these extremely valuable conversations about this topic lately! And a special one to &lt;a class="reference external" href="https://twitter.com/mostlygeek"&gt;Benson&lt;/a&gt; who introduced me to the work of Stewart Brand.&lt;/p&gt;
&lt;p&gt;Please share your feedback and ideas, and as usual don't hesitate to correct me if I'm wrong!&lt;/p&gt;
&lt;p&gt;While I was writing this article, Justin wrote &lt;a class="reference external" href="https://www.simplethread.com/20-things-ive-learned-in-my-20-years-as-a-software-engineer/"&gt;20 Things I‚Äôve Learned in my 20 Years as a Software Engineer&lt;/a&gt; and I think it's is a nice complementary read of this one :)&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="preply" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://medium.com/preply-engineering/do-you-want-to-be-right-or-successful-52a2cd0a220b"&gt;https://medium.com/preply-engineering/do-you-want-to-be-right-or-successful-52a2cd0a220b&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="fjoel" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/"&gt;https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="illich" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://conviviality.ouvaton.org/spip.php?article39"&gt;http://conviviality.ouvaton.org/spip.php?article39&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="elm" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://discourse.elm-lang.org/t/reasons-that-people-were-forced-to-move-from-elm-to-something-else/6390/18"&gt;https://discourse.elm-lang.org/t/reasons-that-people-were-forced-to-move-from-elm-to-something-else/6390/18&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="folzzio" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://medium.com/olzzio/from-architectural-decisions-to-design-decisions-f05f6d57032b"&gt;https://medium.com/olzzio/from-architectural-decisions-to-design-decisions-f05f6d57032b&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="fcognitect" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://cognitect.com/blog/2011/11/15/documenting-architecture-decisions"&gt;https://cognitect.com/blog/2011/11/15/documenting-architecture-decisions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="tips"></category><category term="methodology"></category></entry><entry><title>About Maintenance Mode</title><link href="https://blog.mathieu-leplatre.info/about-maintenance-mode.html" rel="alternate"></link><published>2021-08-04T00:00:00+02:00</published><updated>2021-08-04T00:00:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2021-08-04:/about-maintenance-mode.html</id><summary type="html">&lt;p&gt;You may be familiar with this situation: your team has been working on a project for a while, and now that it seems to do the job, it is not really justified for so many engineers to spend time on it.&lt;/p&gt;
&lt;p&gt;Management agreed that the project should be switched to ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;You may be familiar with this situation: your team has been working on a project for a while, and now that it seems to do the job, it is not really justified for so many engineers to spend time on it.&lt;/p&gt;
&lt;p&gt;Management agreed that the project should be switched to ¬´maintenance mode¬ª. Even if the software remains critical and runs in production, the team's priorities have changed, and costs must be kept as low as possible.&lt;/p&gt;
&lt;p&gt;From my experience, there is often some misunderstanding about turning a software into maintenance mode. If you continue to implement new features or spend time on refactoring internals, you are going to clash with your managers. If you don't touch the source at all and don't invest any engineering time at all, the software will soon qualify as ¬´abandonware¬ª.&lt;/p&gt;
&lt;p&gt;So, if the software still runs in production and is switched to maintenance, what should you expect to be done?&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="NASA Engine Maintenance Training CC-BY-NC https://www.flickr.com/photos/nasa2explore/49243482926/" src="https://blog.mathieu-leplatre.info/images/maintenance-nasa.jpg" /&gt;
&lt;p class="caption"&gt;NASA Engine Maintenance Training &lt;a class="reference external" href="https://www.flickr.com/photos/nasa2explore/49243482926/"&gt;CC-NC-ND&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="monitor-production"&gt;
&lt;h2&gt;Monitor production&lt;/h2&gt;
&lt;p&gt;I remember one situation where a team used the URL of the origin server for our service instead of the CDN. And went live. We suddenly received a massive amount of traffic, which caused the database to lag a lot, the application was then losing connections and crashing, users were seeing 503 error pages and reporting issues. Our first strategy had been to increase the database resources, which increased the costs of the service significantly.&lt;/p&gt;
&lt;p&gt;Monitoring often seems like an obvious one. But it's not only about the server resources, it's mostly about making sure the software is just ticking over, handling load transparently, and not bothering you at night.&lt;/p&gt;
&lt;p&gt;Make sure you have ways to monitor:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Load&lt;/strong&gt;: amount of traffic or activity&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Responsiveness&lt;/strong&gt;: latency or lag&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Robustness&lt;/strong&gt;: number of crash reports&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stability&lt;/strong&gt;: production issues tickets&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cost&lt;/strong&gt;: bills of cloud services&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If these metrics become explicit and public, it gives everyone concrete and measurable goals to put the application in its best conditions for the long run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="optimize-costs"&gt;
&lt;h2&gt;Optimize costs&lt;/h2&gt;
&lt;p&gt;Sometimes, a new system comes as a replacement, and the old one is maintained for legacy clients. Usually, the old system even becomes read-only. Nevertheless, it still relies on a database, some Web workers, executing domain specific code, with the sole purpose of serving static data for legacy clients! Some JSON files on a CDN could do the job!&lt;/p&gt;
&lt;p&gt;If you know that you are going for the long run, investing in optimization can be worth it. Even tiny parts.&lt;/p&gt;
&lt;p&gt;Of course, it is imperative to evaluate how much you can save per month/year before investing efforts! Beware of rabbit holes, always timebox your work! Start with low hanging fruits, like slow queries, endpoints that serve static data, ...&lt;/p&gt;
&lt;p&gt;If your infrastructure allows it, you could also leverage some of the auto-scaling features of your cloud provider. For example, at Mozilla, we clearly have pattern of loads depending of time and day of the week. Setting up rules to scale up/out or in/down your resources can help you save money. Combined with proper monitoring and metrics, it can truly be rewarding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fix-bugs"&gt;
&lt;h2&gt;Fix bugs&lt;/h2&gt;
&lt;p&gt;No magic here, apart from the fact that some bug reports can actually be missing features in disguise.&lt;/p&gt;
&lt;p&gt;Being able to fix bugs implicitly means that team members have a development setup on their machine. Ideally, running the software or its tests suite locally should not take several days.&lt;/p&gt;
&lt;p&gt;Note that sometimes it can also be relevant to ignore some bugs, if their impact is minimal, their reproduction too complex, and the fix too fragile. They become ¬´known bugs¬ª. Make sure you document them properly though.&lt;/p&gt;
&lt;p&gt;Counterintuitively, fixing bugs and polishing rough edges can be entertaining. Some people are suited for maintenance (fixers!), others prefer innovation (builders!), but having experienced both perspectives is precious.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="apply-security-patches"&gt;
&lt;h2&gt;Apply security patches&lt;/h2&gt;
&lt;p&gt;This one is interesting, because it means that you should keep your libraries and dependencies up-to-date.&lt;/p&gt;
&lt;p&gt;It is highly recommended to automate this part with tools like &lt;a class="reference external" href="https://dependabot.com/"&gt;Dependabot&lt;/a&gt;, &lt;a class="reference external" href="https://renovatebot.com"&gt;Renovate&lt;/a&gt; or &lt;a class="reference external" href="https://snyk.io/"&gt;Snyk&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In our React application, keeping libraries up-to-date came out to be very costly. Indeed, the maintainers of the libraries were shipping security fixes in major releases with breaking changes, obliging us to rewrite some big parts of our app in order to keep up and benefit from security fixes.&lt;/p&gt;
&lt;p&gt;In my opinion, it is very healthy for the team (and the project) to frequently touch the code and upgrade dependencies. It forces everyone to cherish the project, and most importantly: redeploy it regularly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="redeploy-regularly"&gt;
&lt;h2&gt;Redeploy regularly&lt;/h2&gt;
&lt;p&gt;This one is extremely important: the team should be as confident as possible when redeploying the software.&lt;/p&gt;
&lt;p&gt;In a perfect world, you have a setup with continuous deployment, at least on stage. Everytime a new version is tagged, the application is rolled out on some server.&lt;/p&gt;
&lt;p&gt;If you wait too long between releases and deployments, you take the risk that some deployment recipe breaks, or becomes out of date, relying on missing resources or permissions.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Aviation Machinist conducts maintenance on an afterburner CC-BY-NC https://www.flickr.com/photos/compacflt/51319755467/" src="https://blog.mathieu-leplatre.info/images/maintenance-plane.jpg" /&gt;
&lt;p class="caption"&gt;Aviation Machinist conducts maintenance on an afterburner &lt;a class="reference external" href="https://www.flickr.com/photos/compacflt/51319755467/"&gt;CC-BY-NC&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sustain-infrastructure"&gt;
&lt;h2&gt;Sustain Infrastructure&lt;/h2&gt;
&lt;p&gt;If your application uses some cloud provider's services, you will also have to keep afloat with upgrades and decommissions. If your application is not compatible with the only versions available, some code ought to be rewritten.&lt;/p&gt;
&lt;p&gt;For example, Amazon regularly rolls out new versions of PostgreSQL, and cojointly shutdowns old versions.&lt;/p&gt;
&lt;p&gt;Exactly like for your software libraries, part of a Kubernetes cluster lifecycle involves performing periodic upgrades to the latest version, in order to apply the latest security releases. Automation is possible but can also give you surprises!&lt;/p&gt;
&lt;p&gt;On top of that, your company can also decide to migrate its whole infrastructure to a different cloud provider. That may require some code to be rewritten (eg. Amazon S3 versus Google Cloud Storage) and very likely critical parts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="manage-knowledge"&gt;
&lt;h2&gt;Manage Knowledge&lt;/h2&gt;
&lt;p&gt;When the whole team is working on the project daily, knowledge flows and is globally available. In maintenance mode, a couple of people are involved sporadically, and knowledge about procedures or technical details will evaporate quickly.&lt;/p&gt;
&lt;p&gt;Plus, it is unfortunately very likely that, along the years, the members of the original team will have left the company.&lt;/p&gt;
&lt;p&gt;An efficient way to make sure the project documentation is up-to-date is to give new hires the responsibility to update it as their first assignment :) For example, they will follow the procedure to setup their machine for development, and fix every step in docs where they got stuck.&lt;/p&gt;
&lt;p&gt;In addition, exactly like planes or cars have their maintenance logs, it could be useful to keep a single document where every intervention in production is described.&lt;/p&gt;
&lt;p&gt;When things turn sour, take the time to write down a &lt;em&gt;post-mortem&lt;/em&gt;, that breaks down the timeline of events, the steps of troubleshooting, the lessons learnt, the improvements to be made, etc. This will become highly valuable for the future maintainers.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="https://classicprogrammerpaintings.com/post/143947399671/developers-look-for-documentation-in-legacy" src="https://blog.mathieu-leplatre.info/images/maintenance-classic-programmer.jpg" /&gt;
&lt;p class="caption"&gt;Developers look for documentation in legacy system - Jean-Fran√ßois Millet, 1857 - Oil on canvas (by &lt;a class="reference external" href="https://classicprogrammerpaintings.com/post/143947399671/developers-look-for-documentation-in-legacy"&gt;classic programmer paintings&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="handle-open-source-contributions"&gt;
&lt;h2&gt;Handle Open source Contributions&lt;/h2&gt;
&lt;p&gt;Imagine the following situation: a company develops a software for a Web API, releases it as open source, and builds a community around it. After some time, the company's strategy (or goals) changes and the API is switched to maintenance mode, with lowest risks possible. The community continues to submit contributions for new features and risky refactors.&lt;/p&gt;
&lt;p&gt;What should the company do?&lt;/p&gt;
&lt;p&gt;Ignore the contributions and kill the community?&lt;/p&gt;
&lt;p&gt;Maintain its own fork with bug and security fixes only?&lt;/p&gt;
&lt;p&gt;Make sure every new feature is behind a config flag?&lt;/p&gt;
&lt;p&gt;Keep upgrading their API in production to the latest version?&lt;/p&gt;
&lt;p&gt;I don't think there is a simple answer to this one. It truly depends on multiple factors, like the size of the community, the criticality of the API, the quality of contributions, etc.&lt;/p&gt;
&lt;p&gt;Refusing pull requests is often very hard, but keep in mind that saying ¬´no¬ª can save everybody a lot of trouble.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="assess-risks"&gt;
&lt;h2&gt;Assess Risks&lt;/h2&gt;
&lt;p&gt;You may not have enough resources to complete all of the above successfully. Maintenance of complex software is hard. And shit happens. Think of your software as an old building open to the public, it is your responsability to report any potential danger that you see.&lt;/p&gt;
&lt;p&gt;In toxic environments, engineers will sometimes blame each other for having failed to comply with certain expectations. In order to avoid that, some will work triple to reach what they see as &lt;em&gt;perfection&lt;/em&gt;. Or when a top-down decision is made, they will disagree and disapprove of their management, complaining that ¬´they have no idea how reckless this is¬ª.&lt;/p&gt;
&lt;p&gt;Of course, there are really bad managers out there, but I believe that the most common mistake is to keep your risk analysis for yourself.&lt;/p&gt;
&lt;p&gt;No matter what the current situation is, and how far it is from being ideal, write down all potential risks explicitly and share them with the team.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;Risk Assessment&lt;/em&gt; exercice consists in:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Identifying all potential catastrophic scenarios, incidents or deteriorations, in terms of stability, security, team motivation, whatever!&lt;/li&gt;
&lt;li&gt;Evaluating likelihood, severity, and impact of each identified risk&lt;/li&gt;
&lt;li&gt;Deciding which ones to ignore and why, and which ones that will have to be taken care of.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By making this list explicit and public, your long-term maintenance strategy, whatever it is, is supported by a proper evaluation and awareness of risks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If executives think that switching a project to &lt;em&gt;maintenance mode&lt;/em&gt; will save a lot of money and effort, you now have some arguments to contrast their idea.&lt;/p&gt;
&lt;p&gt;Maintenance cost is probably less than investing in new features, but it is definitely not zero.&lt;/p&gt;
&lt;p&gt;Shutting down a service is also an option, leaving consumers in despair.&lt;/p&gt;
&lt;p&gt;With the amount of connected devices that depend on closed-source Web APIs out there, I believe that long-term maintenance is going to become a major concern in the next years...&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Many thanks to &lt;a class="reference external" href="https://nl.linkedin.com/in/nicolas-metaye-27766633"&gt;Nico&lt;/a&gt;, &lt;a class="reference external" href="https://www.linkedin.com/in/johnwhitlock"&gt;John&lt;/a&gt;, &lt;a class="reference external" href="https://www.linkedin.com/in/mostlygeek"&gt;Benson&lt;/a&gt;, &lt;a class="reference external" href="http://stephenhood.com"&gt;Stephen&lt;/a&gt;, &lt;a class="reference external" href="https://www.linkedin.com/in/smarnach/"&gt;Sven&lt;/a&gt;, and &lt;a class="reference external" href="http://areskibelaid.com/"&gt;Areski&lt;/a&gt; for your precious feedback and suggestions!&lt;/p&gt;
&lt;p&gt;As usual, please don't hesitate to share your feedback or thoughts, I would be super happy to have a chat and/or integrate your contributions in the article!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="tips"></category><category term="methodology"></category></entry><entry><title>Poucave, an observation standpoint for our services</title><link href="https://blog.mathieu-leplatre.info/poucave-an-observation-standpoint-for-our-services.html" rel="alternate"></link><published>2021-05-11T00:00:00+02:00</published><updated>2021-05-11T00:00:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2021-05-11:/poucave-an-observation-standpoint-for-our-services.html</id><summary type="html">&lt;p&gt;Most of us are relatively familiar with system monitoring: we monitor RAM, CPU, or disk usage over time and receive alerts when some thresholds are reached.&lt;/p&gt;
&lt;p&gt;But the quality of a whole service is rarely defined by the health of a single isolated server. Rather, it is the interactions between ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Most of us are relatively familiar with system monitoring: we monitor RAM, CPU, or disk usage over time and receive alerts when some thresholds are reached.&lt;/p&gt;
&lt;p&gt;But the quality of a whole service is rarely defined by the health of a single isolated server. Rather, it is the interactions between the parts that is often the source of problems.&lt;/p&gt;
&lt;p&gt;What about the consistency between the CDN cache and the origins? The last run of a scheduled task? Imminent expiration of your SSL certificates? The amount of clients side errors? The latency of critical HTTP endpoints? The number of pending pull-requests on your repositories?&lt;/p&gt;
&lt;p&gt;Poucave is a small web app that executes a series of domain specific checks for the parts and their interactions that make up our service.&lt;/p&gt;
&lt;div class="section" id="where-did-we-start-from"&gt;
&lt;h2&gt;Where did we start from?&lt;/h2&gt;
&lt;p&gt;Centuries ago, telescopes helped our ancestors to distinguish a single shining dot from a whole constellation. Yes, that's how far we started from!&lt;/p&gt;
&lt;p&gt;We used to consider our service healthy as long as operating system resources were still available and no HTTP 5XX error was served. This idea was implemented by introducing a &lt;tt class="docutils literal"&gt;/__heartbeat__&lt;/tt&gt; endpoint on each server, that executes some internal health checks and returns a &lt;tt class="docutils literal"&gt;200 Ok&lt;/tt&gt; if everything is fine and a &lt;tt class="docutils literal"&gt;500 Internal Server Error&lt;/tt&gt; if something is wrong. We made this &lt;a class="reference external" href="https://github.com/mozilla-services/dockerflow"&gt;a requirement&lt;/a&gt; for every deployed application, and were polling this HTTP endpoint from an external alerting service. Operators are paged if it keeps failing for a while.&lt;/p&gt;
&lt;p&gt;This served us well. But our service was integrated in a complex ecosystem, and making sure that it was 100% reliable took more than that. We had a CDN, push notifications, some scheduled tasks, data synchronization on clients, etc. Our heartbeat endpoints could be all green, but still, we sometimes had users reporting issues or inconsistencies.&lt;/p&gt;
&lt;p&gt;Enhancing the capacities of our heartbeat endpoint would break the separation of concerns. Apart from not being very robust, a system shouldn't be in charge of checking external components that are more related to the way it's deployed than its own functional scope. Concretely, verifying a database connection from the server hearbeart is fine, but not querying the clients Telemetry data.&lt;/p&gt;
&lt;p&gt;Discovering issues on your system because some users complain is never a great feeling. And less when subsequent investigations and troubleshooting are taking time and require a lot of knownledge about all sub-systems and their interactions.&lt;/p&gt;
&lt;p&gt;We needed to improve our ability to see. See the constellation of systems, instead of just a single one.&lt;/p&gt;
&lt;img alt="Early depiction of a ‚ÄòDutch telescope‚Äô from the ‚ÄúEmblemata of zinne-werck‚Äù (Middelburg, 1624)" class="align-center" src="https://blog.mathieu-leplatre.info/images/poucave-emblemata-1624.jpg" /&gt;
&lt;/div&gt;
&lt;div class="section" id="what-do-we-need"&gt;
&lt;h2&gt;What do we need?&lt;/h2&gt;
&lt;p&gt;We wanted to identify the root cause of incidents as fast as possible. For this, we needed to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;see our service as whole, with all its sub-parts, including clients;&lt;/li&gt;
&lt;li&gt;document each part and interactions;&lt;/li&gt;
&lt;li&gt;monitor and be alerted on sub-part failures;&lt;/li&gt;
&lt;li&gt;track service reliability over time;&lt;/li&gt;
&lt;li&gt;capitalize knownledge about troubleshooting and past issue resolutions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Being able to see the problem as a whole would give more insights about the fix. We needed a solution to help us identify the root cause faster, and reassure our users.&lt;/p&gt;
&lt;p&gt;In order to include the clients behaviour, we could rely on the company real-time Telemetry platform. A couple of years ago, we unified the way our clients would report &lt;a class="reference external" href="https://searchfox.org/mozilla-central/rev/0bcf81557b89e7757c44e25bb4bc7f4cb8619dc9/services/common/uptake-telemetry.js"&gt;uptake Telemetry&lt;/a&gt; (success, up-to-date, network-error, certificate-error, etc.), and that is super useful to write generic checks about error rates for multiple different components.&lt;/p&gt;
&lt;p&gt;Since some parts of our service are only accesible via our VPN, like the signature infrastructure, an external ping service cannot reach them. This new tool would serve as a bridge between the two.&lt;/p&gt;
&lt;p&gt;Not every check has to necessarily be monitored by an alerting service. Some can just be indications for operators, or even never fail and just mash-up information from the underlying sub-parts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="our-solution"&gt;
&lt;h2&gt;Our solution&lt;/h2&gt;
&lt;p&gt;No rocket science. The same idea as our heartbeat endpoint but from an independant service, and infinitely extensible.&lt;/p&gt;
&lt;p&gt;A simple and stupid HTTP API, no backend, that starts from a configuration file where checks are listed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[checks.a-project.a-check]&lt;/span&gt;
&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Heartbeat of the public read-only instance.&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;checks.core.heartbeat&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://firefox.settings.services.mozilla.com/v1/__heartbeat__&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... and that exposes each execution via a dedicated endpoint &lt;tt class="docutils literal"&gt;GET &lt;span class="pre"&gt;/checks/{a-project}/{a-check}&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The checks source code for our service becomes a repository of knowledge on how to operate and troubleshoot it.
I decided to use Python, so that almost anybody could read or write the checks implementation.&lt;/p&gt;
&lt;p&gt;I chose a simple async framework, &lt;a class="reference external" href="https://docs.aiohttp.org"&gt;aiohttp&lt;/a&gt;, since most of the checks will pull information from external sources and do very little computation (I/0 bound). Nothing fancy really.&lt;/p&gt;
&lt;p&gt;And to follow the long tail of funny project names at Mozilla, I called it &lt;em&gt;Poucave&lt;/em&gt; (/pu.kav/), french slang for ¬´snitch¬ª.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Example of diagram with overview" src="https://blog.mathieu-leplatre.info/images/poucave-overview.png" /&gt;
&lt;p class="caption"&gt;Example of live diagram. The SVG file is part of configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="examples"&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;Just to present of few of &lt;a class="reference external" href="https://github.com/mozilla-services/poucave/tree/main/checks/"&gt;the checks&lt;/a&gt; that were implemented:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;checks.core.latency&lt;/tt&gt; (&lt;em&gt;generic&lt;/em&gt;): fails if the specified URL does not respond under a certain number of milliseconds.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;checks.core.maintenance&lt;/tt&gt; (&lt;em&gt;generic&lt;/em&gt;): takes a list of Github repositories as input, and fails in any of them has pull-requests who didn't receive activity in the last X days.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;checks.core.deployed_version&lt;/tt&gt; (&lt;em&gt;generic&lt;/em&gt;): fails while the deployed version does not match the latest tagged version on the specified Github repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then, we have more domain specific checks for &lt;a class="reference external" href="https://remotesettings.readthedocs.io"&gt;Remote Settings&lt;/a&gt;, like:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;checks.remotesettings.push_timestamp&lt;/tt&gt;: fails if the timestamp of the published data does not match the one of our Push service&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;checks.remotesettings.certification_expiration&lt;/tt&gt;: fails if our certificates will expire soon&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;checks.remotesettings.uptake_max_age&lt;/tt&gt;: fails if the 75th percentile of clients receive only data after X seconds&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;checks.remotesettings.uptake_error_rate&lt;/tt&gt;: fails if the proportion of errors among reported statuses in Telemetry is above a certain threshold&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adding new checks is a piece of cake, even from your own packages, as long as they are available in the &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Example of check details" src="https://blog.mathieu-leplatre.info/images/poucave-check-details.png" /&gt;
&lt;p class="caption"&gt;Example of check details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="check-history"&gt;
&lt;h2&gt;Check History&lt;/h2&gt;
&lt;p&gt;If an issue in our service led twice to the same root cause, we would consider implementing a check for it.&lt;/p&gt;
&lt;p&gt;This allowed us to consolidate the reliability of our service over time, and also build a sort of memory for it.&lt;/p&gt;
&lt;p&gt;In order to facilitate troubleshooting, we added the ability to link each check with past issues from our Bugtracker.
This way, when a check turns red, we can immediately access the history of its possible past failures, and read the related conversations and resolutions.&lt;/p&gt;
&lt;p&gt;For checks that return discrete values, like latency or age, we also wanted to track variations over time. Because this monitoring service had to remain simple, stupid, and reliable, I wanted to avoid introducing a storage dependency.&lt;/p&gt;
&lt;p&gt;All our applications output their logs to stdout as JSON. These application logs are then parsed and ingested elsewhere, so that we can plot them in Grafana. I decided to reuse that. Each check execution is logged, and can be presented in charts on dashboards.&lt;/p&gt;
&lt;p&gt;It was sometimes annoying to open Grafana just to take a look at a check recent behaviour. So we added the ability to see the history of a check directly in the UI. We came up with something super simple, the server pulls the last entries from the log database, returns them as JSON, and the UI plots them in a basic chart. For more advanced charts and querying, Grafana will always be better of course.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Check history with linked bugs and graph of past values" src="https://blog.mathieu-leplatre.info/images/poucave-check-history.png" /&gt;
&lt;p class="caption"&gt;Check history with linked bugs and graph of past values.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="after-a-few-months"&gt;
&lt;h2&gt;After a few months...&lt;/h2&gt;
&lt;p&gt;This checks platform has served us very well!&lt;/p&gt;
&lt;p&gt;Only a small fraction of checks are monitored, and only the crucial ones wake our SREs at night.&lt;/p&gt;
&lt;p&gt;We still have false positives, notably on Telemetry. With help from our data science team, our queries and normalizations could certainly be improved.&lt;/p&gt;
&lt;p&gt;We had one major false negative. Fortunately the issue was raised by another system. We improved the check and now feel better.&lt;/p&gt;
&lt;p&gt;To conclude, I know with certainty that this little healthcheck application, with the live diagram, has changed the way we see and understand our services. Compared to linear problem solving, system thinking is complex. Seeing things as a whole and being able to understand interdependance and causal loops is really helpful. Everyone can now see all the moving pieces in one place, and can be reasonably reassured that the service is working well if checks are green, which also makes customer care easier for us.&lt;/p&gt;
&lt;p&gt;In addition to this success, several teams expressed their interest in adding their own checks or running their instance for their service :) If you too are interested in using it in your organization, go on! Nothing is hard-coded and adding your own checks and SVG diagram is fairly easy! Don't hesitate to get in touch of course.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="mozilla"></category><category term="opensource"></category></entry><entry><title>Tips for your Makefile with Python</title><link href="https://blog.mathieu-leplatre.info/tips-for-your-makefile-with-python.html" rel="alternate"></link><published>2021-01-22T00:00:00+01:00</published><updated>2021-01-22T00:00:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2021-01-22:/tips-for-your-makefile-with-python.html</id><summary type="html">&lt;p&gt;Recently, while I was migrating old repos from TravisCI to Github Actions, I realized that several of them had wobbly Makefiles.&lt;/p&gt;
&lt;p&gt;I know that Makefiles are not super elegant, and that intrepid youngsters regularly come up with alternatives. But I find them super handful and powerful! Especially when they are ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, while I was migrating old repos from TravisCI to Github Actions, I realized that several of them had wobbly Makefiles.&lt;/p&gt;
&lt;p&gt;I know that Makefiles are not super elegant, and that intrepid youngsters regularly come up with alternatives. But I find them super handful and powerful! Especially when they are well structured.&lt;/p&gt;
&lt;div class="section" id="tips"&gt;
&lt;h2&gt;Tips&lt;/h2&gt;
&lt;div class="section" id="the-basics"&gt;
&lt;h3&gt;The basics&lt;/h3&gt;
&lt;p&gt;Everything is based on dependencies and timestamps: if a dependency's timestamp is more recent than the target, then the rule is executed.&lt;/p&gt;
&lt;p&gt;For Python projects, the chain looks like this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python ‚Üí Virtualenv ‚Üí Install packages ‚Üí Run task (tests, lint)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which, in a &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; simply looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;.venv/bin/python&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;python3&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;.venv

&lt;span class="nf"&gt;.venv/.install.stamp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="n"&gt;venv&lt;/span&gt;/&lt;span class="n"&gt;bin&lt;/span&gt;/&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;.&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;.venv/bin/python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
&lt;span class="w"&gt;        &lt;/span&gt;touch&lt;span class="w"&gt; &lt;/span&gt;.venv/.install.stamp

&lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="n"&gt;venv&lt;/span&gt;/.&lt;span class="n"&gt;install&lt;/span&gt;.&lt;span class="n"&gt;stamp&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;.venv/bin/python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;pytest&lt;span class="w"&gt; &lt;/span&gt;tests/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, when you run &lt;tt class="docutils literal"&gt;make test&lt;/tt&gt; from a recently cloned repo, the whole chain is executed. But otherwise, the Python packages are installed only if your requirements file has changed since your last installation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-variables"&gt;
&lt;h3&gt;Use variables&lt;/h3&gt;
&lt;p&gt;In order to ease readability of dependencies, I find that using variables helps:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;VENV&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.venv
&lt;span class="nv"&gt;INSTALL_STAMP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/.install.stamp
&lt;span class="nv"&gt;PYTHON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/bin/python

&lt;span class="nf"&gt;$(PYTHON)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;python3&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;$(INSTALL_STAMP)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;PYTHON&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;.&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PYTHON&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
&lt;span class="w"&gt;        &lt;/span&gt;touch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;INSTALL_STAMP&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_STAMP&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PYTHON&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;pytest&lt;span class="w"&gt; &lt;/span&gt;./tests/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="environment-variables-with-default"&gt;
&lt;h3&gt;Environment variables with default&lt;/h3&gt;
&lt;p&gt;For example, instead of hardcoding the name of your virtualenv folder, you can read it from the current shell environment and use a default value:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;VENV&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;shell&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;VIRTUAL_ENV-.venv&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, &lt;tt class="docutils literal"&gt;echo &lt;span class="pre"&gt;${VAR-val}&lt;/span&gt;&lt;/tt&gt; will show the content of &lt;tt class="docutils literal"&gt;$VAR&lt;/tt&gt; and defaults to &lt;tt class="docutils literal"&gt;val&lt;/tt&gt; if undefined (and we double the &lt;tt class="docutils literal"&gt;$&lt;/tt&gt; for escaping).&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;make&lt;/tt&gt; allows you to pass variables and environment values from the command-line, but I always find it quite confusing to distinguish the two. I recommend to only use environment variables, and pass them as usual from command-line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;LOG_FORMAT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;json&lt;span class="w"&gt; &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;div class="last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;LOG_FORMAT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;json
make&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="check-if-a-command-is-available"&gt;
&lt;h3&gt;Check if a command is available&lt;/h3&gt;
&lt;p&gt;It's nice to give a little hint about a missing prerequisite. Most of the time there will be an official system package to be installed for the rest of the Makefile to be executed smoothly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;PY3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;shell&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-v&lt;span class="w"&gt; &lt;/span&gt;python3&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/dev/null&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;$(PYTHON)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;@if&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-z&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PY3&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python3 could not be found. See https://docs.python.org/3/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;python3&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;command &lt;span class="pre"&gt;-v&lt;/span&gt;&lt;/tt&gt; is roughly the equivalent of &lt;tt class="docutils literal"&gt;which&lt;/tt&gt;, but built-in your shell. It returns the executable path or nothing if not found.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;The &lt;tt class="docutils literal"&gt;&amp;#64;&lt;/tt&gt; prefix will prevent the underlying command to be shown in the output log.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="list-available-targets"&gt;
&lt;h3&gt;List available targets&lt;/h3&gt;
&lt;p&gt;When running &lt;tt class="docutils literal"&gt;make&lt;/tt&gt; the &lt;tt class="docutils literal"&gt;all&lt;/tt&gt; target is implicitly called. We can tweak it and show some help:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;.DEFAULT_GOAL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;

&lt;span class="nf"&gt;help&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;@echo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Please use &amp;#39;make &amp;lt;target&amp;gt;&amp;#39; where &amp;lt;target&amp;gt; is one of&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;@echo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;@echo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;  install     install packages and prepare environment&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;@echo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;  format      reformat code&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;@echo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;  lint        run the code linters&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;@echo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;  test        run all the tests&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;@echo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;  clean       remove *.pyc files and __pycache__ directory&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;@echo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;@echo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Check the Makefile to know exactly what each target is doing.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://larlet.fr/david/"&gt;david&lt;/a&gt; suggests to produce the above help summary using &lt;a class="reference external" href="https://www.thapaliya.com/en/writings/well-documented-makefiles/"&gt;this trick&lt;/a&gt;, that relies on &lt;tt class="docutils literal"&gt;awk&lt;/tt&gt; and comments on targets:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;.DEFAULT_GOAL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;

&lt;span class="nf"&gt;help&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c"&gt;## Display this help&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;@awk&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;BEGIN {FS = &amp;quot;:.*##&amp;quot;; printf &amp;quot;\nUsage:\n  make \033[36m\033[0m\n\nTargets:\n&amp;quot;} /^[a-zA-Z_-]+:.*?##/ { printf &amp;quot;\033[36m%-10s\033[0m %s\n&amp;quot;, $$1, $$2 }&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;MAKEFILE_LIST&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;deps&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c"&gt;## Check dependencies&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;...

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c"&gt;## Cleanup the project folders&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;...

&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;deps&lt;/span&gt; &lt;span class="c"&gt;## Build the project&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="do-you-think-it-s-phony"&gt;
&lt;h3&gt;Do you think it's PHONY?&lt;/h3&gt;
&lt;p&gt;By default, &lt;em&gt;Make&lt;/em&gt; assumes that the target of a rule is a file. If you have targets that do not produce files on disk (eg. &lt;tt class="docutils literal"&gt;make test&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;make clean&lt;/tt&gt;) then mark them as &lt;tt class="docutils literal"&gt;.PHONY&lt;/tt&gt; (&lt;em&gt;fake&lt;/em&gt; in English).&lt;/p&gt;
&lt;p&gt;Phony targets are never up-to-date and will always run when invoked, and even if there is a matching file on disk (eg. a file called &lt;tt class="docutils literal"&gt;clean&lt;/tt&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;find&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;-type&lt;span class="w"&gt; &lt;/span&gt;d&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;__pycache__&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;xargs&lt;span class="w"&gt; &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_STAMP&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PYTHON&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;pytest&lt;span class="w"&gt; &lt;/span&gt;./tests/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;edit&lt;/strong&gt;: Instead of maintaining a list of phony targets on top, &lt;a class="reference external" href="http://agopian.info/"&gt;magopian&lt;/a&gt; and &lt;a class="reference external" href="https://yohanboniface.me/"&gt;ybon&lt;/a&gt; recommend to put it along each rule:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;
&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="multiple-targets"&gt;
&lt;h3&gt;Multiple targets&lt;/h3&gt;
&lt;p&gt;While I was reading about the multiple PHONY lines, I learned that any target can be repeated multiple times, their dependencies are just ¬´combined¬ª:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;$(INSTALL_STAMP)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;PYTHON&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;/&lt;span class="n"&gt;dev&lt;/span&gt;.&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PYTHON&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements/dev.txt
&lt;span class="w"&gt;        &lt;/span&gt;touch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;INSTALL_STAMP&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;$(INSTALL_STAMP)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;PYTHON&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;/&lt;span class="n"&gt;app&lt;/span&gt;.&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PYTHON&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements/app.txt
&lt;span class="w"&gt;        &lt;/span&gt;touch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;INSTALL_STAMP&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, we won't reinstall all application's packages when just a &lt;tt class="docutils literal"&gt;dev&lt;/tt&gt; package has changed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="full-example-with-poetry"&gt;
&lt;h2&gt;Full Example with Poetry&lt;/h2&gt;
&lt;p&gt;I gathered most of the above tips in a full working example with Poetry (&lt;a class="reference external" href="https://github.com/mozilla-services/poucave/pull/752"&gt;original source&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;superproject
&lt;span class="nv"&gt;INSTALL_STAMP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.install.stamp
&lt;span class="nv"&gt;POETRY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;shell&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-v&lt;span class="w"&gt; &lt;/span&gt;poetry&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/dev/null&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;.DEFAULT_GOAL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;
&lt;span class="nf"&gt;help&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;@echo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Please use &amp;#39;make &amp;lt;target&amp;gt;&amp;#39; where &amp;lt;target&amp;gt; is one of&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;@echo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;@echo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;  install     install packages and prepare environment&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;@echo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;  clean       remove all temporary files&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;@echo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;  lint        run the code linters&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;@echo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;  format      reformat code&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;@echo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;  test        run all the tests&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;@echo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;@echo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Check the Makefile to know exactly what each target is doing.&amp;quot;&lt;/span&gt;

&lt;span class="nf"&gt;install&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_STAMP&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;$(INSTALL_STAMP)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pyproject&lt;/span&gt;.&lt;span class="n"&gt;toml&lt;/span&gt; &lt;span class="n"&gt;poetry&lt;/span&gt;.&lt;span class="n"&gt;lock&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;@if&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-z&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;POETRY&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Poetry could not be found. See https://python-poetry.org/docs/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;POETRY&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;install
&lt;span class="w"&gt;        &lt;/span&gt;touch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;INSTALL_STAMP&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;
&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;find&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;-type&lt;span class="w"&gt; &lt;/span&gt;d&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;__pycache__&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;xargs&lt;span class="w"&gt; &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;INSTALL_STAMP&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.coverage&lt;span class="w"&gt; &lt;/span&gt;.mypy_cache

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lint&lt;/span&gt;
&lt;span class="nf"&gt;lint&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_STAMP&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;POETRY&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;isort&lt;span class="w"&gt; &lt;/span&gt;--profile&lt;span class="o"&gt;=&lt;/span&gt;black&lt;span class="w"&gt; &lt;/span&gt;--lines-after-imports&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--check-only&lt;span class="w"&gt; &lt;/span&gt;./tests/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;NAME&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;POETRY&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;black&lt;span class="w"&gt; &lt;/span&gt;--check&lt;span class="w"&gt; &lt;/span&gt;./tests/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;NAME&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--diff
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;POETRY&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;flake8&lt;span class="w"&gt; &lt;/span&gt;--ignore&lt;span class="o"&gt;=&lt;/span&gt;W503,E501&lt;span class="w"&gt; &lt;/span&gt;./tests/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;NAME&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;POETRY&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;mypy&lt;span class="w"&gt; &lt;/span&gt;./tests/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;NAME&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--ignore-missing-imports
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;POETRY&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;bandit&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;NAME&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;B608

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;
&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_STAMP&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;POETRY&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;isort&lt;span class="w"&gt; &lt;/span&gt;--profile&lt;span class="o"&gt;=&lt;/span&gt;black&lt;span class="w"&gt; &lt;/span&gt;--lines-after-imports&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;./tests/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;NAME&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;POETRY&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;black&lt;span class="w"&gt; &lt;/span&gt;./tests/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;NAME&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_STAMP&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;POETRY&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;pytest&lt;span class="w"&gt; &lt;/span&gt;./tests/&lt;span class="w"&gt; &lt;/span&gt;--cov-report&lt;span class="w"&gt; &lt;/span&gt;term-missing&lt;span class="w"&gt; &lt;/span&gt;--cov-fail-under&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--cov&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;NAME&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that Makefile, anyone with &lt;tt class="docutils literal"&gt;make&lt;/tt&gt;  and &lt;tt class="docutils literal"&gt;poetry&lt;/tt&gt; installed can hack on your project :)&lt;/p&gt;
&lt;div class="section" id="multiple-python-versions"&gt;
&lt;h3&gt;Multiple Python versions&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;make test&lt;/tt&gt; will run the tests with the default Python version.&lt;/p&gt;
&lt;p&gt;In order to pick another Python version, to run the tests for example, simply rely on Poetry's features:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
poetry env use 2.7
make test
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="full-example-with-virtualenv"&gt;
&lt;h3&gt;Full Example with Virtualenv&lt;/h3&gt;
&lt;p&gt;The equivalent with &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt;, which depends on &lt;tt class="docutils literal"&gt;python3&lt;/tt&gt; being available, and explicitly manages the creation of the &lt;tt class="docutils literal"&gt;.venv&lt;/tt&gt; folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;superproject
&lt;span class="nv"&gt;VENV&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;shell&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;VIRTUAL_ENV-.venv&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;PY3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;shell&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-v&lt;span class="w"&gt; &lt;/span&gt;python3&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/dev/null&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;PYTHON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/bin/python
&lt;span class="nv"&gt;INSTALL_STAMP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/.install.stamp


&lt;span class="nf"&gt;$(PYTHON)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;@if&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-z&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PY3&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Python 3 could not be found.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PY3&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;install&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_STAMP&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;$(INSTALL_STAMP)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;PYTHON&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;.&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="n"&gt;constraints&lt;/span&gt;.&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PIP_INSTALL&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-Ur&lt;span class="w"&gt; &lt;/span&gt;requirements.txt&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;constraints.txt
&lt;span class="w"&gt;        &lt;/span&gt;touch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;INSTALL_STAMP&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;
&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;find&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;-type&lt;span class="w"&gt; &lt;/span&gt;d&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;__pycache__&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;xargs&lt;span class="w"&gt; &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;INSTALL_STAMP&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.coverage&lt;span class="w"&gt; &lt;/span&gt;.mypy_cache

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lint&lt;/span&gt;
&lt;span class="nf"&gt;lint&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_STAMP&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/bin/isort&lt;span class="w"&gt; &lt;/span&gt;--profile&lt;span class="o"&gt;=&lt;/span&gt;black&lt;span class="w"&gt; &lt;/span&gt;--lines-after-imports&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--check-only&lt;span class="w"&gt; &lt;/span&gt;./tests/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;NAME&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--virtual-env&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/bin/black&lt;span class="w"&gt; &lt;/span&gt;--check&lt;span class="w"&gt; &lt;/span&gt;./tests/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;NAME&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--diff
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/bin/flake8&lt;span class="w"&gt; &lt;/span&gt;--ignore&lt;span class="o"&gt;=&lt;/span&gt;W503,E501&lt;span class="w"&gt; &lt;/span&gt;./tests/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;NAME&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/bin/mypy&lt;span class="w"&gt; &lt;/span&gt;./tests/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;NAME&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--ignore-missing-imports
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/bin/bandit&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;NAME&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;B608

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;
&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_STAMP&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/bin/isort&lt;span class="w"&gt; &lt;/span&gt;--profile&lt;span class="o"&gt;=&lt;/span&gt;black&lt;span class="w"&gt; &lt;/span&gt;--lines-after-imports&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;./tests/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;NAME&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--virtual-env&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/bin/black&lt;span class="w"&gt; &lt;/span&gt;./tests/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;NAME&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_STAMP&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PYTHON&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;pytest&lt;span class="w"&gt; &lt;/span&gt;./tests/&lt;span class="w"&gt; &lt;/span&gt;--cov-report&lt;span class="w"&gt; &lt;/span&gt;term-missing&lt;span class="w"&gt; &lt;/span&gt;--cov-fail-under&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--cov&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;NAME&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="see-also"&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://tech.davis-hansson.com/p/make/"&gt;Your Makefiles are wrong&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="tips"></category><category term="python"></category></entry><entry><title>The History of Firefox Remote Settings</title><link href="https://blog.mathieu-leplatre.info/the-history-of-firefox-remote-settings.html" rel="alternate"></link><published>2020-10-19T00:00:00+02:00</published><updated>2020-10-19T00:00:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2020-10-19:/the-history-of-firefox-remote-settings.html</id><summary type="html">&lt;p&gt;When I started to write the first lines of this article, it was the last day of Ethan in our team. His departure marked the end of an era that I'll try to tell you about here.&lt;/p&gt;
&lt;div class="section" id="prehistory-2014"&gt;
&lt;h2&gt;Prehistory (~2014)&lt;/h2&gt;
&lt;p&gt;While I was working at &lt;a class="reference external" href="https://makina-corpus.com"&gt;Makina Corpus&lt;/a&gt;, we were regularly coming ‚Ä¶&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;When I started to write the first lines of this article, it was the last day of Ethan in our team. His departure marked the end of an era that I'll try to tell you about here.&lt;/p&gt;
&lt;div class="section" id="prehistory-2014"&gt;
&lt;h2&gt;Prehistory (~2014)&lt;/h2&gt;
&lt;p&gt;While I was working at &lt;a class="reference external" href="https://makina-corpus.com"&gt;Makina Corpus&lt;/a&gt;, we were regularly coming up with the same kind of architectures: a database, a REST API, and frontend/mobile stuff. Other teams were also starting to consider the idea of ¬´headless CMS¬ª.&lt;/p&gt;
&lt;p&gt;I wanted to build a reusable backend, where you define your models in JSON and retrieve/store records.
&lt;a class="reference external" href="https://blog.notmyidea.org/"&gt;Alexis&lt;/a&gt; and I wrote down some pseudo code at a DjangoCon and we started the &lt;a class="reference external" href="https://github.com/spiral-project/daybed/"&gt;Daybed project&lt;/a&gt;, using &lt;a class="reference external" href="https://trypyramid.com/"&gt;Pyramid&lt;/a&gt;. It became functional and I even talked about it at &lt;a class="reference external" href="https://archive.fosdem.org/2015/schedule/event/daybed/"&gt;FOSDEM&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Alexis, &lt;a class="reference external" href="https://devhub.io/developer/Natim"&gt;R√©my&lt;/a&gt;, and &lt;a class="reference external" href="https://ziade.org/"&gt;Tarek&lt;/a&gt; were building Web APIs in the Cloud Services team at Mozilla, and there were needs to offer remote storage features to &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Firefox_OS"&gt;Firefox OS&lt;/a&gt; app developers.&lt;/p&gt;
&lt;p&gt;I was hired onto their team and we were about to roll out our first app: a ¬´reading list¬ª service (√†-la Pocket).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="neolithic-2015-2016"&gt;
&lt;h2&gt;Neolithic (2015-2016)&lt;/h2&gt;
&lt;p&gt;The team had accumulated a lot of experience with Web APIs, and one thing was certain: we shouldn't start each project from scratch. Even though we had a secret plan (a reusable service), we couldn't justify starting with that.&lt;/p&gt;
&lt;p&gt;We gathered a lot of good practices and a handful tooling in one library: &lt;a class="reference external" href="https://cliquet.readthedocs.io/en/latest/"&gt;Cliquet&lt;/a&gt;. We hated the word ¬´framework¬ª, but at least we wanted a standard way of building services (cf. &lt;a class="reference external" href="https://mozilla-services.github.io/servicedenuages.fr/en/why-cliquet"&gt;introduction blog post&lt;/a&gt; or &lt;a class="reference external" href="https://mozilla-services.github.io/cliquet/talks/2015.07.pybcn/"&gt;talk at PyBCN&lt;/a&gt;).&lt;/p&gt;
&lt;img alt="" src="images/remote-settings-history-cliquet.png" /&gt;
&lt;p&gt;&lt;em&gt;Cliquet&lt;/em&gt; had the notion of pluggable storage backends. And, because we had this vision of reusable services, we built a proof-of-concept where a service built with &lt;em&gt;Cliquet&lt;/em&gt; would be storing its data in another service built with &lt;em&gt;Cliquet&lt;/em&gt; ü§Ø &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Eventually, this storage service became &lt;a class="reference external" href="https://github.com/Kinto/"&gt;Kinto&lt;/a&gt;, and &lt;em&gt;Cliquet&lt;/em&gt; became &lt;tt class="docutils literal"&gt;kinto.core&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://nicolas.perriault.net/"&gt;n1k0&lt;/a&gt; and &lt;a class="reference external" href="https://mathieu.agopian.info/"&gt;Magopian&lt;/a&gt; joined the team, and built a nice offline-first SDK for Kinto. Plus a generic UI to CRUD records of any accessible Kinto server (kind of remote phpmyadmin). In order to generate forms from collections JSON schema, they released &lt;a class="reference external" href="https://github.com/rjsf-team/react-jsonschema-form/"&gt;react-jsonschema-form&lt;/a&gt; (which now has like 9k stars on Github!).&lt;/p&gt;
&lt;p&gt;This was an exciting time! Kinto was on &lt;a class="reference external" href="https://news.ycombinator.com/item?id=10994736"&gt;Hacker&lt;/a&gt; &lt;a class="reference external" href="https://news.ycombinator.com/item?id=10733164"&gt;news&lt;/a&gt;, and the number of Github stars was going up!&lt;/p&gt;
&lt;p&gt;At this time, there were many other challengers in the field of offline-first apps and backends as a service, and we were pretty close to them. &lt;a class="reference external" href="https://michielbdejong.com/"&gt;Michiel de Jong&lt;/a&gt;, the spec author of &lt;a class="reference external" href="https://remotestorage.io/"&gt;Remote Storage&lt;/a&gt;, joined Mozilla and was briefly in our team. &lt;a class="reference external" href="https://arandomurl.com/"&gt;Dale Harvey&lt;/a&gt; was already at Mozilla and was doing &lt;a class="reference external" href="https://pouchdb.com/"&gt;PouchDB&lt;/a&gt;. &lt;a class="reference external" href="https://github.com/xbill82/"&gt;Luca Marchesini&lt;/a&gt;, a Fullstack Fest friend, was also working on &lt;a class="reference external" href="https://kuzzle.io/"&gt;Kuzzle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But internally in the company ‚Äî above Tarek (our manager) ‚Äî we were not able to defend our vision very well. Mozilla didn't seem ready to explore the dangerous grounds of hosting user data, at least not beyond &lt;em&gt;Firefox Sync&lt;/em&gt;. And meanwhile, &lt;em&gt;Kinto&lt;/em&gt; was still being mentioned as the Mozilla response to Facebook Parse and Google Firebase (completely inaccurate of course, because Kinto was never an official Mozilla project).&lt;/p&gt;
&lt;p&gt;Luckily, shortly after, the &lt;a class="reference external" href="https://wiki.mozilla.org/Firefox/Go_Faster"&gt;*Go Faster* initiative&lt;/a&gt; was started, with the goal of shipping changes to Firefox faster than the current release cycle. If our system could synchronize user data between devices, then it could obviously do a uni-directional synchronization of read-only data from one admin to millions of clients. That's how we started to use &lt;em&gt;Kinto&lt;/em&gt; to publish the malicious addons blocklist, the certificates revocation list, and some assets for Firefox Android, independently from release trains.&lt;/p&gt;
&lt;p&gt;The Kinto client SDK was now in Firefox, and hundreds of millions of clients were pulling data from our servers at &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;https://firefox.settings.services.mozilla.com&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="antiquity-2016-2018"&gt;
&lt;h2&gt;Antiquity (2016-2018)&lt;/h2&gt;
&lt;p&gt;We were contributing to Gecko in the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;mozilla-central&lt;/span&gt;&lt;/tt&gt; repo, and that was not so common for a team in the Cloud Services org. Mercurial, old-style JS, C++, XPCOM... we were not comfortable at all.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://betacantrips.com"&gt;Ethan&lt;/a&gt; joined the team. He implemented the &lt;tt class="docutils literal"&gt;chrome.storage&lt;/tt&gt; Web Extension API using &lt;em&gt;Kinto&lt;/em&gt;, and suddenly we were storing addons preferences of users (carefully encrypted on the client side of course).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Kinto&lt;/em&gt; now had &lt;a class="reference external" href="https://mozilla-services.github.io/servicedenuages.fr/en/kinto-at-mozilla"&gt;several use-cases&lt;/a&gt; within Firefox. However, clearly, we still hadn't reached any critical mass. It was just another arrow on diagrams.&lt;/p&gt;
&lt;p&gt;It was a boring and frustrating phase. Pushing the required configuration changes for each new use case. A lot of back and forth with the Ops for root objects manipulations. Responsibilities were limited.&lt;/p&gt;
&lt;p&gt;We knew we could do much more, any piece of configuration or JSON in the repository could be migrated to our system! We could use it for internationalization! But we were not good door-to-door salesmen. Feedback, positive or negative, was almost nonexistent.&lt;/p&gt;
&lt;p&gt;The revolutionary ideals of our initial team were fading away. We had to admit that we failed at promoting our vision of a user-facing storage backend (see &lt;em&gt;Thoughts&lt;/em&gt; section). Self hosting, decentralized Web, Tor hidden services, were conversations at night around a drink, not in meeting rooms anymore. I'm pretty sure Mozilla even had a few projects running on Google Firebase at this time.&lt;/p&gt;
&lt;p&gt;At the end of that period, most members of the original team had left, disillusioned. Ethan and I were the last ¬´Kinto guys¬ª at Mozilla.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="" src="images/remote-settings-history-3-contributors.png" /&gt;
&lt;p class="caption"&gt;Fortunately we had dependabot enabled on our repos so we don't look too lonely.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="modern-age-2018-2020"&gt;
&lt;h2&gt;Modern Age (2018-2020)&lt;/h2&gt;
&lt;p&gt;In December 2016, we made a list of all the sources where &lt;em&gt;Firefox&lt;/em&gt; would pull data from. No spoiler, it was too long.&lt;/p&gt;
&lt;p&gt;Our goal was to unify several of these communication channels into one, and to start demanding a good reason to justify rolling out a new update source.&lt;/p&gt;
&lt;p&gt;For most use-cases in Firefox, the &lt;em&gt;Kinto&lt;/em&gt; API was too low level, and doing too much. As an example, the certificate configuration for signature verification &lt;a class="reference external" href="https://searchfox.org/mozilla-esr60/rev/02b4ae79b24aae2346b1338e2bf095a571192061/services/common/blocklist-clients.js#439-474"&gt;was unnecessarily complex&lt;/a&gt;. And there was no official cookbook.&lt;/p&gt;
&lt;p&gt;Our new manager &lt;a class="reference external" href="https://mostlygeek.com/"&gt;Benson&lt;/a&gt; was defending the idea of &lt;em&gt;Remote Settings&lt;/em&gt;. Two methods: &lt;tt class="docutils literal"&gt;.get()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;.on(&amp;quot;sync&amp;quot;,&lt;/span&gt; &lt;span class="pre"&gt;...)&lt;/span&gt;&lt;/tt&gt;.
New collections of records had to be self-service, because we were not going to be able to continue the manual onboarding.&lt;/p&gt;
&lt;p&gt;We had all the pieces in place to achieve that, it was mostly about improving developer experience. We refactored a number of things, added OAuth support, and Ethan integrated our clients and server with the &lt;a class="reference external" href="https://github.com/mozilla-services/megaphone"&gt;broadcast service&lt;/a&gt; for push notifications. We morphed the existing client integrations into a high level generic API, available for any component in Firefox. And on the server side, the original Kinto Admin had everything in its DNA to become the &lt;em&gt;Remote Settings Admin UI&lt;/em&gt;.&lt;/p&gt;
&lt;img alt="" src="images/remote-settings-history-kinto-admin.png" /&gt;
&lt;p&gt;In December 2018, I presented &lt;em&gt;Remote Settings&lt;/em&gt; in front of hundreds of Firefox developers! This felt energizing and great! On the other hand, I knew I was reaping the rewards of our team mates who had left.&lt;/p&gt;
&lt;img alt="" src="images/remote-settings-history-sf-evergreen.png" /&gt;
&lt;p&gt;We merged with the &lt;em&gt;SHIELD&lt;/em&gt; team and were now part of the &lt;em&gt;Product Delivery&lt;/em&gt; team. Now responsible of making off-train changes reliable and safe (ie. updates without reinstall).&lt;/p&gt;
&lt;p&gt;Since we were only pulling read-only data from the server, the whole offline bi-directional sync code was overkill and slightly inefficient. For the sake of simplicity, I got rid of the &lt;em&gt;Kinto offline&lt;/em&gt; library in Firefox and replaced it with plain Gecko specific IndexedDB code. Way easier to reason about, especially for a future code reader who wouldn't have the back story.&lt;/p&gt;
&lt;p&gt;More and more critical components of Firefox, desktop or mobile, are now relying on &lt;em&gt;Remote Settings&lt;/em&gt;. A/B testing, experiments metadata, user messages, features recommandations rules, list of password breaches for &lt;a class="reference external" href="https://monitor.firefox.com/"&gt;Firefox Monitor&lt;/a&gt;, password fields detection rules, localization packages, search partners configuration... &amp;nbsp;All of them using our two methods API :)&lt;/p&gt;
&lt;p&gt;We could not have been more successful. &lt;em&gt;Remote Settings&lt;/em&gt; had become &lt;em&gt;THE&lt;/em&gt; standard way to ship data in Firefox outside release trains! Some of us sometimes still call it &lt;em&gt;Kinto&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In Summer 2020, there are approximately fifty collections on the server. The reliability of the pipeline is my main responibility, and to have a better overview of the whole thing, I mainly rely on two things: a unified client Telemetry, and a monitoring tool: &lt;a class="reference external" href="https://github.com/mozilla-services/poucave/"&gt;Poucave&lt;/a&gt;, that I'll present in another post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="futurism-2021"&gt;
&lt;h2&gt;Futurism (2021-)&lt;/h2&gt;
&lt;p&gt;Futurewise, the next obvious part is the Rust client, in order to have a unified experience across platforms, using a &lt;a class="reference external" href="/leveraging-rust-in-python-and-javascript.html"&gt;~single code base&lt;/a&gt; :)&lt;/p&gt;
&lt;p&gt;There was an initiative recently to unify our experimentation solutions between desktop, mobile, websites, and other products. During their study, they legitimately asked why use &lt;em&gt;Remote Settings&lt;/em&gt; to ship experiments metadata, and not JSON files behind a CDN.&lt;/p&gt;
&lt;p&gt;The question is legitimate, and we could defend our pipeline because we have a validated security workflow, with VPN access, permissions management, some review and signoff features, push notifications, diff-based synchronization, content signature verification...&lt;/p&gt;
&lt;p&gt;Nevertheless, at the same time, more and more use-cases are server-to-server or have automated publication from scripts. And some even built their own UI.&lt;/p&gt;
&lt;p&gt;Maybe our &lt;em&gt;Remote Settings&lt;/em&gt; service could be achieved with just something like a Git repo, static data, and a CDN in front.&lt;/p&gt;
&lt;p&gt;Clients pull blobs and content signatures from a URL, each use-case being responsible of parsing these binaries as JSON or using them as plain resources or files. Permissions setup could be achieved using protected branches and submodules in the repo. No more UI to maintain, the reviewing process would just happen upfront, before merging the pull-request. No more backend and database with records and fields, just a few scheduled tasks or commit hooks.&lt;/p&gt;
&lt;p&gt;A dumb pipe of static data, with complex workflows outside the system itself. A little bit &lt;a class="reference external" href="/publish-your-pelican-blog-on-github-pages-via-travis-ci.html"&gt;like this blog&lt;/a&gt; actually.&lt;/p&gt;
&lt;p&gt;Why not!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thoughts"&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I hope this long article helped you understand how a long term project can evolve and mutate. I thought it would be interesting to see it from within a company like Mozilla, often mentioned in headlines.&lt;/p&gt;
&lt;div class="section" id="what-made-the-success"&gt;
&lt;h3&gt;What made the success?&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Remote Settings&lt;/em&gt; became a critical part of Firefox. Clearly, since it is leveraging only a subset of &lt;em&gt;Kinto&lt;/em&gt;, the success can be largely attributed to the vision and efforts of our early team. We're still friends and I'm super proud of what we accomplished! Big up!&lt;/p&gt;
&lt;p&gt;We have the very early days in memory, when Tarek had managed to free some of our time so that we could build prototypes and demos. Later, Benson took over and embraced our vision. Both were advertising the idea of a reusable service within the company while we were busy coding!&lt;/p&gt;
&lt;p&gt;The patience of stakeholders who held our hand in order to land patches in Firefox massively contributed to the success. Special thanks to &lt;a class="reference external" href="https://github.com/gijsk"&gt;Gijs&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/linacambridge"&gt;Lina&lt;/a&gt;, &lt;a class="reference external" href="http://blog.queze.net/"&gt;Florian&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/Standard8"&gt;Standard8&lt;/a&gt;...&lt;/p&gt;
&lt;p&gt;I believe it is also important to highlight how important our first ¬´customers¬ª were to the growth and adoption of &lt;em&gt;Remote Settings&lt;/em&gt;. The security/crypto teams and the &lt;a class="reference external" href="https://wiki.mozilla.org/Firefox/Activity_Stream"&gt;Activity Stream&lt;/a&gt; (now UJET) deserve much credit (&lt;a class="reference external" href="https://github.com/computerist"&gt;mgoodwin&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/ncloudioj"&gt;Nanj&lt;/a&gt;, &lt;a class="reference external" href="https://insufficient.coffee/about/"&gt;JCJ&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/rlr"&gt;Ricky&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/piatra"&gt;Andrei&lt;/a&gt;...). Their advocacy for the solution and working closely with us to make it better made a big difference.&lt;/p&gt;
&lt;p&gt;Another factor is that we were consistently protecting the functional scope of the system. It is a data pipe: publish data on one side, reach the target audience reliably. It took a lot of effort to say ¬´no¬ª, and keep the complexity trend downwards, instead of building dedicated features for specific use-cases.&lt;/p&gt;
&lt;p&gt;These previous two combined ‚Äî motivated early adopters and product focus ‚Äî were crucial in adoption. We were able to provide a good customer service because we had participated in the early integrations and implementations for other teams. When new use-cases were joining us, we &lt;em&gt;almost&lt;/em&gt; had everything covered already.&lt;/p&gt;
&lt;p&gt;During our company meetings, we were making sure we would spend more time with people, and the least in front of computers. I don't cross the world to do what I can do from home! We had joyful moments and this happiness certainly contributed to the success :) Through the numerous use-cases, I got to know many teams in the company, and always worked in a fantastic atmosphere. I am happy to help, they seem happy with the solution, it is great!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-about-kinto"&gt;
&lt;h3&gt;What about Kinto?&lt;/h3&gt;
&lt;p&gt;I don't want this article or section to sound like a retrospective of &lt;em&gt;Kinto&lt;/em&gt; itself, but I think there are a few important things to underline.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/Kinto/"&gt;Kinto organization&lt;/a&gt; is relatively quiet, but we have users, and &lt;a class="reference external" href="https://dstaley.com/"&gt;Dylan&lt;/a&gt; is dedicating an amazing amount of energy on the project! A lot of engineers at Mozilla are going to benefit from his efforts to migrate the Admin UI to Bootstrap 4 (3 years after the PR was started ü§£)! Kudos!&lt;/p&gt;
&lt;p&gt;Nevertheless, we cannot deny that the &lt;em&gt;Kinto&lt;/em&gt; community is not as flourishing as it used to be ;) And let's be clear: from the Mozilla standpoint, &lt;em&gt;Kinto&lt;/em&gt; is just an implementation detail.&lt;/p&gt;
&lt;p&gt;If I win the lottery and leave (the positive version of the bus factor idea), there is no guarantee that the next pair of eyes taking a fresh look at the &lt;em&gt;Remote Settings&lt;/em&gt; architecture or the &lt;em&gt;Kinto&lt;/em&gt; code base will decide to keep it. In other words, as long as &lt;em&gt;Kinto&lt;/em&gt; is used in &lt;em&gt;Remote Settings&lt;/em&gt;, the project will be maintained and be taken care of.  Mozilla will continue to invest in &lt;em&gt;Kinto&lt;/em&gt; as long as it has value and makes sense.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-if-i-had-to-do-it-over-again"&gt;
&lt;h3&gt;What if I had to do it over again?&lt;/h3&gt;
&lt;p&gt;If someone would have come to us 5 years ago with the needs of a solution to update parts of Firefox without reinstall, what would we have done?&lt;/p&gt;
&lt;p&gt;If we wouldn't have been desperate to ¬´sell¬ª Kinto internally, would we have used a database as-a-service with a CRUD API?&lt;/p&gt;
&lt;p&gt;Alexis started &lt;a class="reference external" href="http://getpelican.com/"&gt;Pelican&lt;/a&gt; ‚Äî a static blog generator ‚Äî around 2011, 4 years before we were working on the first use-cases. I find it extremely ironic that the solution described in the &lt;a class="reference external" href="#Futurism"&gt;Futurism&lt;/a&gt; section would basically consist in applying the same principles to publish read-only data üôÉ &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The current approach also has a downside that I realized only very recently. Before, if someone wanted to contribute a new password recipe in Firefox, they would just have to add a line in the &lt;tt class="docutils literal"&gt;.json&lt;/tt&gt; and get their patch approved. Now the source of truth is the &lt;em&gt;Remote Settings&lt;/em&gt; server. Adding a recipe means opening a ticket to request it, and a stakeholder to connect on the VPN and add it. If the source of truth was the repo, with jobs to publish data online for live updates, it would probably make more sense. Plus, it would save forks or the Thunderbird team to run &lt;a class="reference external" href="https://thunderbird-settings.thunderbird.net/"&gt;their own Remote Settings instance&lt;/a&gt;...&lt;/p&gt;
&lt;p&gt;In 2015, JSON was everywhere and a pretty natural choice. But we had to complement it with a notion of attachments for heavy content. Today, I would probably consider going full binary for everything. JSON was problematic for content signatures, since there are many ways to serialize it (Unicode strings and float numbers, &lt;a class="reference external" href="https://github.com/gibson042/canonicaljson-spec/issues/5"&gt;the worse&lt;/a&gt;!). Something like &lt;a class="reference external" href="https://en.wikipedia.org/wiki/CBOR"&gt;CBOR&lt;/a&gt; may have helped.&lt;/p&gt;
&lt;p&gt;Generally speaking ‚Äî and here comes the self-flagellation part ‚Äî I think that we could have done a better job if we would have studied more past research. As &lt;a class="reference external" href="https://jlongster.com/How-I-Became-Better-Programmer"&gt;James Long wrote&lt;/a&gt;, ¬´&lt;em&gt;If you're excited about an idea, it's super tempting to sit down and immediately get going. But you shouldn't do that until you've done some cursory research about how people have solved it before.&lt;/em&gt;¬ª. In our case, we could have considered using &lt;a class="reference external" href="https://www.dotconferences.com/2019/12/james-long-crdts-for-mortals"&gt;CRDTs&lt;/a&gt; to sync data, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Merkle_tree"&gt;Merkle trees&lt;/a&gt; for content signatures of partial diffs, or all the things available from the video games industry to update assets etc... and this is true for specifications too. I now think we made a big mistake when we decided to deviate from the Remote Storage spec while Michiel was in our team. Same with our custom Canonical JSON.&lt;/p&gt;
&lt;p&gt;With regards to &lt;em&gt;Kinto&lt;/em&gt; itself, it shows that the idea itself does not have much value (&lt;a class="reference external" href="/releasing-software-ideas.html"&gt;I wrote about that already&lt;/a&gt;). &lt;em&gt;Kinto&lt;/em&gt; was a very good idea, and we could develop it to a certain point. We were experienced with code, but our limits became the limits of the project: we were very unfit to pitch ideas and do product marketing.&lt;/p&gt;
&lt;p&gt;On the front of data sovereignity, great minds like Sir Tim Berners-Lee &lt;a class="reference external" href="https://solidproject.org"&gt;are working on it&lt;/a&gt;, and the need of a reusable backend for Web developers hasn't disappeared. &lt;a class="reference external" href="https://appwrite.io/"&gt;Appwrite&lt;/a&gt; and &lt;a class="reference external" href="https://kuzzle.io/"&gt;kuzzle&lt;/a&gt; (üëè) seemed to be relevant open source solutions in 2020! I don't know about other projects like &lt;a class="reference external" href="https://backendless.com/"&gt;https://backendless.com/&lt;/a&gt; or &lt;a class="reference external" href="http://hood.ie/"&gt;http://hood.ie/&lt;/a&gt; though. Among the last challengers, &lt;a class="reference external" href="http://postgrest.org/"&gt;PostgREST&lt;/a&gt; and &lt;a class="reference external" href="https://hasura.io/"&gt;Hasura&lt;/a&gt; seem to be doing great.&lt;/p&gt;
&lt;p&gt;But hey, in the precise context of &lt;em&gt;Remote Settings&lt;/em&gt;, these solutions may not have fit anyway!&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;R√©my reapplied a similar concept to build &lt;a class="reference external" href="https://wiki.mozilla.org/Firefox_OS/Syncto"&gt;SyncTo&lt;/a&gt;, a bridge from &lt;em&gt;Kinto&lt;/em&gt; to &lt;em&gt;Firefox Sync&lt;/em&gt; for &lt;em&gt;Firefox OS&lt;/em&gt; developers.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Ethan and n1k0 say that we had considered this idea. We can't recall why we discarded it. Maybe because we were too obscessed about selling Kinto internally? Or limitations of our signing infrastructure behind the VPN?&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="mozilla"></category><category term="python"></category><category term="kinto"></category></entry><entry><title>Leveraging Rust in Python and JavaScript</title><link href="https://blog.mathieu-leplatre.info/leveraging-rust-in-python-and-javascript.html" rel="alternate"></link><published>2020-09-08T00:00:00+02:00</published><updated>2020-09-08T00:00:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2020-09-08:/leveraging-rust-in-python-and-javascript.html</id><summary type="html">&lt;p&gt;I had several opportunities to hack with Rust, but so far, besides &lt;a class="reference external" href="https://github.com/mozilla/classify-client/"&gt;this very high loaded Web service&lt;/a&gt; that runs in production, it was either on prototypes or on stuff that could have been implemented with any other language.&lt;/p&gt;
&lt;p&gt;Recently, we had a concrete use-case where Rust would be beneficial ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;I had several opportunities to hack with Rust, but so far, besides &lt;a class="reference external" href="https://github.com/mozilla/classify-client/"&gt;this very high loaded Web service&lt;/a&gt; that runs in production, it was either on prototypes or on stuff that could have been implemented with any other language.&lt;/p&gt;
&lt;p&gt;Recently, we had a concrete use-case where Rust would be beneficial: share an implementation of a Canonical JSON serialization between the server in Python, and the clients in JavaScript, Swift, and Kotlin.&lt;/p&gt;
&lt;p&gt;In order to guarantee the integrity of data between the server and the clients, we use content signatures. Canonical JSON is just a variant of JSON where each value has a single, unambiguous serialized form. Having a predictable JSON serialization is essential to get repeatable hashes of encoded data and be able to verify digital signatures. Sharing the same code accross server and clients makes it more robust, especially when it comes to handling funny corner cases of floats or unicode.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;canonical_json&lt;/tt&gt; &lt;a class="reference external" href="https://crates.io/crates/canonical_json"&gt;crate&lt;/a&gt; implements the serialization, using &lt;a class="reference external" href="https://serde.rs/"&gt;Serde&lt;/a&gt; and following &lt;a class="reference external" href="https://github.com/gibson042/canonicaljson-spec"&gt;a spec&lt;/a&gt;. It is fairly simple to use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;serde_json&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;canonical_json&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ser&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;we ‚ù§ Rust&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// &amp;quot;we \u2665 Rust&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="python-bindings"&gt;
&lt;h2&gt;Python bindings&lt;/h2&gt;
&lt;p&gt;Our first goal is to be able to call this Rust library from Python. And it should be transparent, run on Linux and Mac OS, as any other library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;canonicaljson&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;canonicaljson&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;h√©o&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;{&amp;quot;h&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;u00e9o&amp;quot;:42}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python is just a language, and has several implementations, Jython in Java, Pypy in Python, RustPython in Python... But what interests us here is the most common one: CPython, in C.&lt;/p&gt;
&lt;p&gt;The Rust code must be compiled as a shared library (&lt;tt class="docutils literal"&gt;.so&lt;/tt&gt; file), Python must &lt;a class="reference external" href="https://docs.python.org/3/library/ctypes.html#loading-shared-libraries"&gt;load it&lt;/a&gt; and then call the exported symbol (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;canonical_json::ser::to_string()&lt;/span&gt;&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;Since one side handles Python objects (eg. &lt;tt class="docutils literal"&gt;dict&lt;/tt&gt;) and the other side expects a Rust data type (cf. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;json!()&lt;/span&gt;&lt;/tt&gt;), the whole challenge here will be to translate Python values in memory and pass them to Rust. Fortunately, in this modest use-case, we don't have to handle mutability or complex lifetimes, and the serializer just gives back a string in return. However, unlike most documented use-cases, the passed data is not ¬´structured¬ª: the input data can be any Python serializable object, and the destination in Rust is not a domain specific custom type, but the generic &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;serde_json::json::Value&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Using &lt;a class="reference external" href="https://github.com/PyO3/PyO3"&gt;PyO3&lt;/a&gt;, it is quite straightforward to start. The main principle consists in starting a library crate, that imports both &lt;tt class="docutils literal"&gt;pyo3&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;canonical_json&lt;/tt&gt; dependencies. The Rust function will be exposed in the Python module using a high-level macros:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#[pymodule]&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;canonicaljson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Python&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;PyModule&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;PyResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;__version__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;env!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CARGO_PKG_VERSION&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrap_pyfunction&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;#[pyfunction]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Python&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;PyObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;PyResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Convert the Python object to a Serde value&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;python_to_serde&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Call Canonical JSON serializer&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyErr&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PyTypeError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="fm"&gt;format!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{:?}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;python_to_serde&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Python&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;PyObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;serde_json&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PyCanonicalJSONError&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// ... See full implementation&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// https://github.com/mozilla-services/python-canonicaljson-rs/blob/62599b24/src/lib.rs#L87-L167&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to convert a generic &lt;tt class="docutils literal"&gt;PyObject&lt;/tt&gt; into the generic &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;serde_json::Value&lt;/span&gt;&lt;/tt&gt;, we will first try to &lt;a class="reference external" href="https://docs.rs/pyo3/0.11.1/pyo3/conversion/trait.FromPyObject.html#tymethod.extract"&gt;extract&lt;/a&gt; the Rust equivalents of Python basic types (&lt;tt class="docutils literal"&gt;String&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;bool&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;u64&lt;/tt&gt;, ...) from this Python object reference, and simply &lt;a class="reference external" href="https://docs.serde.rs/serde_json/value/fn.to_value.html"&gt;instantiate Serde values&lt;/a&gt;. For other types, we try to &lt;a class="reference external" href="https://docs.rs/pyo3/0.11.1/pyo3/struct.PyObject.html#method.cast_as"&gt;cast the reference&lt;/a&gt; to Python object types (&lt;tt class="docutils literal"&gt;PyDict&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;PyList&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;PyTuple&lt;/tt&gt;, ...) in order to recursively convert them. The code was mostly inspired &lt;a class="reference external" href="https://github.com/mre/hyperjson/"&gt;by Matthias Endler's hyperjson&lt;/a&gt;. See &lt;a class="reference external" href="https://github.com/mozilla-services/python-canonicaljson-rs/blob/62599b24/src/lib.rs#L87-L167"&gt;full implementation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using &lt;a class="reference external" href="https://github.com/PyO3/maturin"&gt;maturin&lt;/a&gt;, the above library crate can be built and published as a wheel on Pypi. Wheels save consumers from compiling the Rust part when installing the Python package, and Maturin takes care of packaging metadata etc.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pyproject.toml&lt;/span&gt;

&lt;span class="k"&gt;[build-system]&lt;/span&gt;
&lt;span class="n"&gt;requires&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;maturin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;build-backend&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;maturin&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;[package.metadata.maturin]&lt;/span&gt;
&lt;span class="n"&gt;classifier&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Intended Audience :: Developers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Programming Language :: Python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Programming Language :: Rust&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;maturin build&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;maturin publish&lt;/tt&gt; just worked as expected.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;To be honest I haven't battle tested the multiplatform part extensively since my dev box and our servers run Linux.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="javascript-webassembly"&gt;
&lt;h2&gt;JavaScript &amp;amp; WebAssembly&lt;/h2&gt;
&lt;p&gt;WebAssembly (or Wasm) is a binary format that a virtual machine can execute directly, without having to parse and compile the source code.&lt;/p&gt;
&lt;p&gt;In the browser, a WebAssembly module is loaded as a Web page resource, and can be called transparently from JavaScript code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;canonicaljson&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;./node_modules/canonicaljson-wasm/canonicaljson_wasm.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;canonicaljson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;h√©o&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;42&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To achieve this, instead of compiling Rust to binary code that can only be executed by a specific operating system or processor, we will compile it to this universal binary format, using &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wasm-bindgen&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;In order to expose our &lt;tt class="docutils literal"&gt;canonical_json&lt;/tt&gt; crate to Wasm, like for Python, we will have to create a library crate and to bind passed types. This binding crate will rely on &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wasm-bindgen&lt;/span&gt;&lt;/tt&gt; and its &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;serde-serialize&lt;/span&gt;&lt;/tt&gt; feature, which does everything we need. Exposing functions and passing arbitrary data from JavaScript to Rust is relatively easy and well documented.&lt;/p&gt;
&lt;p&gt;In our example, the main code of the wrapping crate can look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wasm_bindgen&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;prelude&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;canonical_json&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ser&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cj_to_string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;err_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;JsValue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;JsValue&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;#[wasm_bindgen]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;JsValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;JsValue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;serde_value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into_serde&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;map_err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err_to_str&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;JsValue&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cj_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;serde_value&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We build this crate using &lt;a class="reference external" href="https://github.com/rustwasm/wasm-pack"&gt;wasm-pack&lt;/a&gt;. It will generate the expected &lt;tt class="docutils literal"&gt;.js&lt;/tt&gt; module.&lt;/p&gt;
&lt;p&gt;I followed this &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/WebAssembly/Rust_to_wasm"&gt;tutorial on MDN&lt;/a&gt; to tie everything up in an &lt;a class="reference external" href="https://leplatrem.github.io/canonicaljson-wasm/"&gt;ugly demo page&lt;/a&gt; using Webpack.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There's something super exciting in knowing that the same Rust code, robust and performant, can now be used both from Python and JavaScript. Kotlin and Swift should be similarly straightforward.&lt;/p&gt;
&lt;p&gt;Shipping bug fixes will now consist in releasing a new version of the serializer and bumping the dependency in the binding repos!&lt;/p&gt;
&lt;p&gt;Even if our use-case was relatively modest, there is a lot of repetitive boiler plate code between the original library and the binding crates. And that's why the Firefox Sync team started the &lt;a class="reference external" href="https://github.com/rfk/uniffi-rs"&gt;uniffi-rs&lt;/a&gt; prototype: define your types and exposed interfaces in an &lt;a class="reference external" href="https://en.wikipedia.org/wiki/IDL_specification_language"&gt;IDL file&lt;/a&gt;, and it will take care of all the boilerplate and piping. Unfortunately it does not support the loose type &lt;tt class="docutils literal"&gt;Any&lt;/tt&gt; yet, that was necessary for the input of our serializer.&lt;/p&gt;
&lt;p&gt;If the binding code remains trivial and featherweight, this idea of using Rust to share a codebase between several targets is a massive win!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="python"></category><category term="javascript"></category><category term="rust"></category></entry><entry><title>Python good practices in early 2020</title><link href="https://blog.mathieu-leplatre.info/python-good-practices-in-early-2020.html" rel="alternate"></link><published>2020-04-01T00:00:00+02:00</published><updated>2020-04-01T00:00:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2020-04-01:/python-good-practices-in-early-2020.html</id><summary type="html">&lt;p&gt;A great part of my job at Mozilla consists in maintaining the ecosystem of &lt;a class="reference external" href="https://remote-settings.readthedocs.io"&gt;Firefox Remote Settings&lt;/a&gt;, which is already a few years old.&lt;/p&gt;
&lt;p&gt;But recently I had the chance to spin up a new Python project (&lt;a class="reference external" href="https://github.com/mozilla-services/poucave/"&gt;Poucave&lt;/a&gt;), and that was a good opportunity to look at recent trends that ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;A great part of my job at Mozilla consists in maintaining the ecosystem of &lt;a class="reference external" href="https://remote-settings.readthedocs.io"&gt;Firefox Remote Settings&lt;/a&gt;, which is already a few years old.&lt;/p&gt;
&lt;p&gt;But recently I had the chance to spin up a new Python project (&lt;a class="reference external" href="https://github.com/mozilla-services/poucave/"&gt;Poucave&lt;/a&gt;), and that was a good opportunity to look at recent trends that I missed :) This article goes through some of the choices we made, knowing that almost everything is obviously debatable. By the way, depending on the vigour of the Python community, please note that the information may not age well and could be outdated when you read it :)&lt;/p&gt;
&lt;div class="section" id="environment"&gt;
&lt;h2&gt;Environment&lt;/h2&gt;
&lt;p&gt;Since we publish the app as a Docker container, we don't have to support multiple Python environments (eg. with &lt;a class="reference external" href="https://tox.readthedocs.io"&gt;tox&lt;/a&gt;). On the other hand, contributors may want to use &lt;a class="reference external" href="https://github.com/pyenv/pyenv"&gt;Pyenv&lt;/a&gt; to overcome the limitations of their operating system.&lt;/p&gt;
&lt;p&gt;I like to keep tooling minimalist, and I can't explain why, but I also enjoy limiting the list of configuration files in the project root folder.&lt;/p&gt;
&lt;p&gt;Probably because of my age, I'm familiar with &lt;tt class="docutils literal"&gt;make&lt;/tt&gt;. It's quite universal and popular. And using a single &lt;a class="reference external" href="https://github.com/mozilla-services/poucave/blob/master/Makefile"&gt;Makefile&lt;/a&gt; with the appropriate dependencies between targets, we can create the environment and run the application or the tests, by running only one make command.&lt;/p&gt;
&lt;p&gt;I was used to Virtualenv, Pip, and requirements files. Common practice consists in having &lt;a class="reference external" href="https://github.com/mozilla-services/poucave/tree/v1.19.0/requirements"&gt;a folder with a requirements file by environment&lt;/a&gt;, and a constraints file for reproducible builds. We also setup &lt;a class="reference external" href="https://app.dependabot.com/"&gt;Dependabot&lt;/a&gt; on the repo to make sure our dependencies are kept up to date.&lt;/p&gt;
&lt;p&gt;Now the cool kids use &lt;a class="reference external" href="https://github.com/pipxproject/pipx"&gt;Pipx&lt;/a&gt;, &lt;a class="reference external" href="https://pipenv.pypa.io"&gt;Pipenv&lt;/a&gt;, &lt;a class="reference external" href="https://flit.readthedocs.io"&gt;Flit&lt;/a&gt;, or &lt;a class="reference external" href="https://python-poetry.org"&gt;Poetry&lt;/a&gt;! Even if Poetry seemed to stand out, the debate was still virulent when the project was started, especially with regards to production installs and Docker integration. Therefore I didn't make any decision and remained conservative. I'd be happy to &lt;a class="reference external" href="https://github.com/mozilla-services/poucave/issues/400"&gt;reconsider that choice&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
requirements/constraints.txt
requirements/default.txt
requirements/dev.txt
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
# constraints.txt
chardet==3.0.4 \
    --hash=sha256:84ab92ed1c4d4f16916e05906b6b75a6c0fb5db821cc65e70cbd64a3e2a5eaae \
    --hash=sha256:fc323ffcaeaed0e0a02bf4d117757b98aed530d9ed4531e3e15460124c106691
...
...
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
# default.txt
-c ./constraints.txt

aiohttp==3.6.2 \
    --hash=sha256:1e984191d1ec186881ffaed4581092ba04f7c61582a177b187d3a2f07ed9719e \
    --hash=sha256:50aaad128e6ac62e7bf7bd1f0c0a24bc968a0c0590a726d5a955af193544bcec \
...
...
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; would look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;SOURCE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;poucave
&lt;span class="nv"&gt;VENV&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.venv
&lt;span class="nv"&gt;PYTHON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/bin/python3
&lt;span class="nv"&gt;INSTALL_STAMP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/.install.stamp

&lt;span class="nf"&gt;install&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_STAMP&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;$(INSTALL_STAMP)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;PYTHON&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;/&lt;span class="n"&gt;default&lt;/span&gt;.&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;/&lt;span class="n"&gt;constraints&lt;/span&gt;.&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PIP_INSTALL&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-Ur&lt;span class="w"&gt; &lt;/span&gt;requirements/default.txt&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;requirements/constraints.txt
&lt;span class="w"&gt;    &lt;/span&gt;touch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;INSTALL_STAMP&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;$(PYTHON)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;virtualenv&lt;span class="w"&gt; &lt;/span&gt;--python&lt;span class="o"&gt;=&lt;/span&gt;python3&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;serve&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_STAMP&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;:
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PYTHON&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;SOURCE&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When running &lt;tt class="docutils literal"&gt;make serve&lt;/tt&gt;, the virtualenv is created if missing, and the latest dependencies are installed only if outdated...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt; As you can see we don't even bother ¬´activating¬ª the virtualenv. Therefore we don't really need tools like &lt;a class="reference external" href="https://virtualenvwrapper.readthedocs.io"&gt;virtualenvwrapper&lt;/a&gt; to switch between environments. That being said, I really enjoy having the &lt;a class="reference external" href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/virtualenvwrapper"&gt;Oh My Zsh plugin for it&lt;/a&gt; that automatically activates a related virtualenv when I jump in a folder that contains a &lt;tt class="docutils literal"&gt;.venv&lt;/tt&gt; folder :) Thanks &lt;a class="reference external" href="https://twitter.com/Exirel/status/1245677611138899970"&gt;Florian&lt;/a&gt; for the feedback ;)&lt;/p&gt;
&lt;p&gt;The CircleCI configuration file is as simple as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;docker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;circleci/python:3.8&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;checkout&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Code lint&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;make lint&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Test&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;make tests&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also see how, using an &lt;a class="reference external" href="https://github.com/mozilla-services/poucave/blob/9a102272071ade6ce1b7200707c0fbadc72a5cc1/Dockerfile#L34"&gt;ENTRYPOINT&lt;/a&gt;, we can &lt;a class="reference external" href="https://github.com/mozilla-services/poucave/blob/9a102272071ade6ce1b7200707c0fbadc72a5cc1/.circleci/config.yml#L34-L40"&gt;execute the tests from within the container&lt;/a&gt; on Circle CI.&lt;/p&gt;
&lt;p&gt;We also have a setup that &lt;a class="reference external" href="https://github.com/mozilla-services/poucave/blob/9a102272071ade6ce1b7200707c0fbadc72a5cc1/.circleci/config.yml#L48-L67"&gt;publishes our Docker container to https://hub.docker.com&lt;/a&gt; automatically.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="code-quality"&gt;
&lt;h2&gt;Code quality&lt;/h2&gt;
&lt;p&gt;Running &lt;a class="reference external" href="https://black.readthedocs.io"&gt;black&lt;/a&gt; to format the code is now a no-brainer. We added &lt;a class="reference external" href="https://github.com/timothycrosley/isort"&gt;isort&lt;/a&gt; to sort and organize imports automatically too.&lt;/p&gt;
&lt;p&gt;The working combination in one &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; target is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_STAMP&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/bin/isort&lt;span class="w"&gt; &lt;/span&gt;--line-width&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;88&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--lines-after-imports&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-rc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;SOURCE&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--virtual-env&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/bin/black&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;SOURCE&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, to avoid having an extra configuration file for &lt;em&gt;isort&lt;/em&gt; we used CLI arguments :)&lt;/p&gt;
&lt;p&gt;Since we want to verify code linting on the CI, we also have this &lt;tt class="docutils literal"&gt;lint&lt;/tt&gt; target, that additionnally runs &lt;a class="reference external" href="https://pypi.org/project/flake8/"&gt;flake8&lt;/a&gt; to detect unused imports or variables, and runs &lt;a class="reference external" href="http://mypy-lang.org/"&gt;mypy&lt;/a&gt; for type checking.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;lint&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_STAMP&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/bin/isort&lt;span class="w"&gt; &lt;/span&gt;--line-width&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;88&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--check-only&lt;span class="w"&gt; &lt;/span&gt;--lines-after-imports&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-rc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;SOURCE&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--virtual-env&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/bin/black&lt;span class="w"&gt; &lt;/span&gt;--check&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;SOURCE&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--diff
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/bin/flake8&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;SOURCE&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--ignore&lt;span class="o"&gt;=&lt;/span&gt;W503,E501
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/bin/mypy&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;SOURCE&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--ignore-missing-imports
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By the way, using type checking in your Python project is now pretty straightforward and enjoyable :)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some plugins to guarantee the quality of your contributions exist for your favorite editor. And a commit-hook can also do the job:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;make format&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;.git/hooks/pre-commit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check out &lt;a class="reference external" href="https://pre-commit.com"&gt;pre-commit&lt;/a&gt; or Rehan's &lt;a class="reference external" href="https://github.com/rehandalal/therapist"&gt;therapist&lt;/a&gt; for advanced commit hooks.&lt;/p&gt;
&lt;p&gt;Note that there are complementary linting tools out there:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/flake8-docstrings/"&gt;flake8-docstrings&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/terrencepreilly/darglint"&gt;darglint&lt;/a&gt; to validate your docstrings&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/wemake-services/wemake-python-styleguide#what-we-are-about"&gt;wemake-python-styleguide&lt;/a&gt; for a very strict Python linter&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bandit.readthedocs.io/en/latest/"&gt;bandit&lt;/a&gt; to find common security issues&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="tests"&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;p&gt;There's almost no debate about &lt;a class="reference external" href="https://pytest.readthedocs.io"&gt;pytest&lt;/a&gt; nowadays. To me, the most appealing feature is the &lt;a class="reference external" href="https://docs.pytest.org/en/latest/fixture.html"&gt;fixtures decorator&lt;/a&gt;, to keep your tests &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY&lt;/a&gt;. It enables you to use dependency injection, object factories, connection setup, config changes...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;api_client&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;APIClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mock_responses&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestsMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;rsps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;rsps&lt;/span&gt;

&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_response&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_make_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_make_response&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_api_get_gives_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api_client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_responses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;make_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;mock_responses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;make_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;api_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://docs.pytest.org/en/latest/example/parametrize.html"&gt;parametrize feature&lt;/a&gt; is also cool:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parametrize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;expected&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
       &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xfail&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
       &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xfail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;some bug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
       &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;skipif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sys.version_info &amp;gt;= (3,0)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)((&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
   &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As usual, I like to have make the CI fail when code coverage isn't 100%. So &lt;a class="reference external" href="https://github.com/pytest-dev/pytest-cov"&gt;pytest-cov&lt;/a&gt; comes to the rescue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_STAMP&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;.venv/bin/pytest&lt;span class="w"&gt; &lt;/span&gt;tests&lt;span class="w"&gt; &lt;/span&gt;--cov-report&lt;span class="w"&gt; &lt;/span&gt;term-missing&lt;span class="w"&gt; &lt;/span&gt;--cov-fail-under&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--cov&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;SOURCE&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Among the handy pytest extensions, I would mention:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pytest-dev/pytest-mock/"&gt;pytest-mock&lt;/a&gt; that provides &lt;tt class="docutils literal"&gt;unittest.mock.patch&lt;/tt&gt; as a &lt;tt class="docutils literal"&gt;mocker&lt;/tt&gt; fixture&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ionelmc/pytest-benchmark/"&gt;pytest-benchmark&lt;/a&gt; that provides a benchmark fixture to measure execution performance&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/joeyespo/pytest-watch"&gt;pytest-watch&lt;/a&gt; for TDD&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="executing-and-configuring"&gt;
&lt;h2&gt;Executing and configuring&lt;/h2&gt;
&lt;p&gt;In order to execute the package directly from the command-line (eg. &lt;tt class="docutils literal"&gt;python poucave&lt;/tt&gt;), use the &lt;tt class="docutils literal"&gt;poucave/__main__.py&lt;/tt&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poucave.app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The most appreciated libraries for advanced CLI parameters seem to be &lt;a class="reference external" href="https://click.palletsprojects.com"&gt;Click&lt;/a&gt; (declarative) and &lt;a class="reference external" href="https://github.com/google/python-fire"&gt;Fire&lt;/a&gt; (automatic).&lt;/p&gt;
&lt;p&gt;For the Docker container, at Mozilla we follow our &lt;a class="reference external" href="https://github.com/mozilla-services/Dockerflow"&gt;Dockerflow conventions&lt;/a&gt;. This helps our operations team to treat all containers the same way, regardless of the implementation language etc.&lt;/p&gt;
&lt;p&gt;A good take away for any application deployment is to manage configuration through environment variables (recommended in &lt;a class="reference external" href="https://12factor.net/config"&gt;12factor&lt;/a&gt; too).&lt;/p&gt;
&lt;p&gt;We centralize all configuration values in a dedicated module &lt;tt class="docutils literal"&gt;config.py&lt;/tt&gt;, that reads variables from env.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_TTL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DEFAULT_TTL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;LOG_LEVEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;LOG_LEVEL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;INFO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;LOGGING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;handlers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;console&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;level&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;LOG_LEVEL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;...&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then simply use it everywhere in the app:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dictConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LOGGING&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEFAULT_TTL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;During tests, config values are changed using &lt;tt class="docutils literal"&gt;mock&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_diagram_path&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;DEFAULT_TTL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;some.svg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But environment can be changed too using the built-in &lt;tt class="docutils literal"&gt;monkeypatch&lt;/tt&gt; fixture:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_lower_ttl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;monkeypatch&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;monkeypatch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DEFAULT_TTL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want to allow reading configuration from a file (&lt;tt class="docutils literal"&gt;.env&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;.ini&lt;/tt&gt;), or have complex default values, or type casting, you can use &lt;a class="reference external" href="https://github.com/henriquebastos/python-decouple"&gt;python-decouple&lt;/a&gt; and read configuration values through the provided helper:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;decouple&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;

&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DEBUG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;HEADERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;HEADERS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="a-web-app"&gt;
&lt;h2&gt;A Web app&lt;/h2&gt;
&lt;p&gt;The project consisted in a minimalist API. There are plenty of candidates, but I wanted something ultra simple and leveraging &lt;tt class="docutils literal"&gt;async&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;await&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/huge-success/sanic"&gt;Sanic&lt;/a&gt; and &lt;a class="reference external" href="https://fastapi.tiangolo.com"&gt;FastAPI&lt;/a&gt; seemed to stand out, but since my project needed an async HTTP client too, I decided to go with &lt;a class="reference external" href="https://docs.aiohttp.org/en/stable/web.html"&gt;aiohttp&lt;/a&gt; which provides both server and client stuff. &lt;a class="reference external" href="https://www.python-httpx.org"&gt;httpx&lt;/a&gt; used in &lt;em&gt;Sanic&lt;/em&gt; could have been a good choice too.&lt;/p&gt;
&lt;p&gt;The server code looks familiar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;aiohttp&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;

&lt;span class="n"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RouteTableDef&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@routes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;poucave&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And to centralize the HTTP client parameters within the app, we have this wrapper:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;contextlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;asynccontextmanager&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AsyncGenerator&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;aiohttp&lt;/span&gt;

&lt;span class="nd"&gt;@asynccontextmanager&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ClientSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;AsyncGenerator&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClientSession&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClientTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;REQUESTS_TIMEOUT_SECONDS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;poucave&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEFAULT_REQUESTS_HEADERS&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClientSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we use the &lt;a class="reference external" href="https://github.com/litl/backoff/"&gt;backoff&lt;/a&gt; library to manage retries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;retry_decorator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;backoff&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;backoff&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClientError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TimeoutError&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;max_tries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;REQUESTS_MAX_RETRIES&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# + 1 because REtries.&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@retry_decorator&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;ClientSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to mock HTTP requests and responses in this setup, we use the &lt;tt class="docutils literal"&gt;aiohttp_client&lt;/tt&gt; fixture from &lt;a class="reference external" href="https://github.com/aio-libs/pytest-aiohttp/"&gt;pytest-aiohttp&lt;/a&gt; for the application part, and &lt;a class="reference external" href="https://github.com/pnuckowski/aioresponses/"&gt;aioresponses&lt;/a&gt; for the responses part:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aiohttp_client&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;aiohttp_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mock_aioresponses&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;test_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;aioresponses&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;passthrough&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;test_server&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_api_root_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;poucave&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_api_fetches_info_from_source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_aioresponses&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;mock_aioresponses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOURCE_URI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;success&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/check-source&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;success&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="misc"&gt;
&lt;h2&gt;Misc&lt;/h2&gt;
&lt;p&gt;Some libraries and tools worth checking out:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/crsmithdev/arrow/"&gt;Arrow&lt;/a&gt; for better dates &amp;amp; times for Python&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/samuelcolvin/pydantic"&gt;Pydantic&lt;/a&gt; for data parsing and validation&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.attrs.org"&gt;attrs&lt;/a&gt; for a smart alternative to named tuples&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/cgarciae/pypeln"&gt;Pypeln&lt;/a&gt; for concurrent async pipelines&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/hawkowl/towncrier"&gt;towncrier&lt;/a&gt; to automate CHANGELOG entries&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.uvicorn.org"&gt;uvicorn&lt;/a&gt; for a performant ASGI server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt;: Disclaimer: I haven't used all of them. I just saw them in several projects :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope you found this article interesting! And most importantly, that you'll have the opportunity to leverage all these tools in your projects :)&lt;/p&gt;
&lt;p&gt;If you think something in this article is utterly wrong, please shout out!&lt;/p&gt;
&lt;p&gt;Thanks &lt;a class="reference external" href="https://github.com/areski"&gt;Areski&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/glasserc"&gt;Ethan&lt;/a&gt; for your early feedback!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="python"></category></entry><entry><title>JavaScript return await</title><link href="https://blog.mathieu-leplatre.info/javascript-return-await.html" rel="alternate"></link><published>2019-11-07T00:00:00+01:00</published><updated>2019-11-07T00:00:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2019-11-07:/javascript-return-await.html</id><summary type="html">&lt;p&gt;A very short article about one of the recent bugs I carelessly designed :)&lt;/p&gt;
&lt;p&gt;I wrote the code below and had certain expectations: no matter what happens, catch the error and return a fallback value.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return ‚Ä¶&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;A very short article about one of the recent bugs I carelessly designed :)&lt;/p&gt;
&lt;p&gt;I wrote the code below and had certain expectations: no matter what happens, catch the error and return a fallback value.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since I find it a bit verbose, I rewrote it this way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before &lt;em&gt;ESLint&lt;/em&gt; could complain about &lt;a class="reference external" href="https://eslint.org/docs/rules/no-return-await"&gt;no-return-await&lt;/a&gt;), I removed this ugly redundant use of &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; on a &lt;tt class="docutils literal"&gt;return&lt;/tt&gt; value. The function returns a promise after all!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nice and short!&lt;/p&gt;
&lt;p&gt;Maybe you did, but at the time I didn't notice that I had just changed the behaviour of the function. Now, when a JSON parsing error occurs, it will be thrown at the caller instead of returning the fallback value! That's not what I intended and now the code can be misinterpreted :)&lt;/p&gt;
&lt;p&gt;ESLint is smart enough to take the &lt;tt class="docutils literal"&gt;try {} catch () {}&lt;/tt&gt; into account, my inner voice wasn't.&lt;/p&gt;
&lt;p&gt;Conclusion: use your &lt;a class="reference external" href="https://blog.mathieu-leplatre.info/your-tests-as-your-specs.html"&gt;tests to specify&lt;/a&gt; the behaviour of your code!&lt;/p&gt;
</content><category term="Dev"></category><category term="javascript"></category></entry><entry><title>Check content hash between server and client</title><link href="https://blog.mathieu-leplatre.info/check-content-hash-between-server-and-client.html" rel="alternate"></link><published>2019-04-29T00:00:00+02:00</published><updated>2019-04-29T00:00:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2019-04-29:/check-content-hash-between-server-and-client.html</id><summary type="html">&lt;p&gt;In order to make sure that your remote content was fetched successfully by your client,
we can use a bit of cryptography.&lt;/p&gt;
&lt;p&gt;A simple way is to compute a hash on the server, and let the client compare the
hash for the content that was downloaded.&lt;/p&gt;
&lt;div class="section" id="what-s-a-hash"&gt;
&lt;h2&gt;What's a hash?&lt;/h2&gt;
&lt;p&gt;Given ‚Ä¶&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;In order to make sure that your remote content was fetched successfully by your client,
we can use a bit of cryptography.&lt;/p&gt;
&lt;p&gt;A simple way is to compute a hash on the server, and let the client compare the
hash for the content that was downloaded.&lt;/p&gt;
&lt;div class="section" id="what-s-a-hash"&gt;
&lt;h2&gt;What's a hash?&lt;/h2&gt;
&lt;p&gt;Given two pieces of data, a cryptographic hash function will return two different (fixed-length) values.&lt;/p&gt;
&lt;p&gt;The hash function should never return the same result for two different inputs, a.k.a ¬´collision¬ª.&lt;/p&gt;
&lt;p&gt;In this article, we'll use SHA-256 (Secure Hash Algorithm, with a 256 bits output). Given any content, the function
will return 256 bits (or 32 bytes). Each byte can be represented in hexadecimal (2 characters, from &lt;tt class="docutils literal"&gt;00&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;FF&lt;/tt&gt;),
and thus becomes a 64 characters string (a.k.a. ¬´hex digest¬ª).&lt;/p&gt;
&lt;p&gt;I really enjoyed watching &lt;a class="reference external" href="https://www.youtube.com/watch?v=S9JGmA5_unY"&gt;How secure is 256 bit security?&lt;/a&gt; by 3Blue1Brown. Note that in 2017, Google presented a &lt;a class="reference external" href="https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html"&gt;practical technique to break SHA1&lt;/a&gt; (used in Git for example).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="on-the-server"&gt;
&lt;h2&gt;On the server&lt;/h2&gt;
&lt;p&gt;In Python (as with most languages) it is straightforward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt;

&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Get up, stand up, don&amp;#39;t give up the fight&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;# or ``file.read()``&lt;/span&gt;

&lt;span class="n"&gt;hasher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha256&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# &amp;quot;04cb9657d1a1a34ccd4f30252a061c36e45b2a5afff86e4c91fa778fa70400eb&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ideally you would deliver this string to the client somewhere in your application data,
or in the HTTP response headers etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="on-the-client"&gt;
&lt;h2&gt;On the client&lt;/h2&gt;
&lt;p&gt;In JavaScript, we can leverage the &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest"&gt;Crypto API&lt;/a&gt;
to compute the SHA-256 of some content.&lt;/p&gt;
&lt;p&gt;First, obtain the bytes array of the content.&lt;/p&gt;
&lt;p&gt;For a &lt;tt class="docutils literal"&gt;String&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Get up, stand up, don&amp;#39;t give up the fight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;encoder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;TextEncoder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;encoder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or for a URL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arrayBuffer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then compute the hash:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;hashBuffer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;crypto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subtle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SHA-256&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;hashBytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hashBuffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// hex digest of bytes&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hashBytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;16&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;padStart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;serverHash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ne"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bad content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="going-further"&gt;
&lt;h2&gt;Going further&lt;/h2&gt;
&lt;p&gt;This hash verification is pretty solid to make sure that your data was downloaded and
fetched successfully. However, it does not guarantee authenticity, since anybody
can compute the SHA-256 function result without having any specific private key.&lt;/p&gt;
&lt;p&gt;In order to prevent &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack"&gt;man-in-the-middle attacks&lt;/a&gt;,
where someone could alter the content and deliver the modified hash values to the client,
you should use signatures. In this model, the server computes a hash using a private key, and the client
verifies the hash using a public key.&lt;/p&gt;
&lt;p&gt;Usually, we use &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm"&gt;Elliptic Curve DSA&lt;/a&gt; for that.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="tips"></category><category term="python"></category><category term="javascript"></category></entry><entry><title>Handling requests timeout in Python</title><link href="https://blog.mathieu-leplatre.info/handling-requests-timeout-in-python.html" rel="alternate"></link><published>2019-04-18T00:00:00+02:00</published><updated>2019-04-18T00:00:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2019-04-18:/handling-requests-timeout-in-python.html</id><summary type="html">&lt;p&gt;Being optimistic is sometimes a disadvantage. When we make calls to an API, we usually test it under ideal conditions. For example, we make sure the client behaves as expected against a real HTTP server that runs locally, in our CI or devbox.&lt;/p&gt;
&lt;p&gt;Let's be honest, we rarely test the ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Being optimistic is sometimes a disadvantage. When we make calls to an API, we usually test it under ideal conditions. For example, we make sure the client behaves as expected against a real HTTP server that runs locally, in our CI or devbox.&lt;/p&gt;
&lt;p&gt;Let's be honest, we rarely test the consequences of a faulty server in our client code. Shit happens in production, when the service is overloaded or the network becomes unreliable and flaky. Within an architecture based on micro-services, this can lead to a chain reaction that can come tumbling down like a house of cards.&lt;/p&gt;
&lt;p&gt;In this article, I will show you the basics to handle HTTP requests timeout in Python, using:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the popular &lt;a class="reference external" href="https://python-requests.org"&gt;requests&lt;/a&gt; library&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/litl/backoff/"&gt;backoff&lt;/a&gt;, a handful retry library&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/shopify/toxiproxy"&gt;toxiproxy&lt;/a&gt;, a proxy to simulate network chaos&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="timeouts-in-requests"&gt;
&lt;h2&gt;Timeouts in &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;We all use &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt;. But ¬´&lt;em&gt;what is the default timeout for your HTTP calls?&lt;/em&gt;¬ª may ask your ops on duty.&lt;/p&gt;
&lt;p&gt;Don't feel bad, I didn't know either. &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; takes it from &lt;tt class="docutils literal"&gt;urllib3&lt;/tt&gt; which itself take it from the standard &lt;tt class="docutils literal"&gt;socket&lt;/tt&gt; module, which... does not define it, and &lt;a class="reference external" href="https://github.com/python/cpython/blob/3eca28c61363a03b81b9fb12775490d6e42d8ecf/Modules/socketmodule.c#L6553-L6557"&gt;seems to be none&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Best way to make sure you know: make it configurable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;requests.adapters&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TimeoutSauce&lt;/span&gt;


&lt;span class="n"&gt;REQUESTS_TIMEOUT_SECONDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;REQUESTS_TIMEOUT_SECONDS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TimeoutSauce&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;connect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;connect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;REQUESTS_TIMEOUT_SECONDS&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;read&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;read&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;REQUESTS_TIMEOUT_SECONDS&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;# Set it globally, instead of specifying ``timeout=..`` kwarg on each call.&lt;/span&gt;
&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adapters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TimeoutSauce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CustomTimeout&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, any request failing to connect or read data after &lt;tt class="docutils literal"&gt;REQUESTS_TIMEOUT_SECONDS&lt;/tt&gt; will raise &lt;tt class="docutils literal"&gt;requests.exceptions.ConnectTimeout&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;requests.exceptions.ReadTimeout&lt;/tt&gt; errors. These two can be caught under &lt;tt class="docutils literal"&gt;requests.exceptions.Timeout&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="retry-failing-requests"&gt;
&lt;h2&gt;Retry failing requests&lt;/h2&gt;
&lt;p&gt;The same way we urge on hiting the refresh button but some page does not load, you may want your program to retry some failing requests before crashing completely.&lt;/p&gt;
&lt;p&gt;By default, &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; will retry 0 times. You can specify it using &lt;tt class="docutils literal"&gt;max_retries&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;REQUESTS_MAX_RETRIES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;REQUESTS_MAX_RETRIES&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;adapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adapters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_retries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;REQUESTS_MAX_RETRIES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This approach has some limitations: it will only retry failing connections or data read. If the requests made it to the server but got 503 in return (from a reverse proxy, load balancer, or whatever) then it won't retry it.&lt;/p&gt;
&lt;p&gt;That's why I truely recommend the &lt;a class="reference external" href="https://github.com/litl/backoff/"&gt;backoff&lt;/a&gt; library, which makes it super easy to retry any failing block of code using decorators. It has many cool features, it has several strategies to introduce delays betweens retries, can introduce &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Jitter"&gt;jitter&lt;/a&gt;, execute callbacks on success or errors etc.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;backoff&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;


&lt;span class="n"&gt;REQUESTS_MAX_RETRIES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;REQUESTS_MAX_RETRIES&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ServerError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="c1"&gt;# Re-usable decorator with exponential wait.&lt;/span&gt;
&lt;span class="n"&gt;retry_timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;backoff&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;wait_gen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;backoff&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Timeout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionError&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;max_tries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;REQUESTS_MAX_RETRIES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@retry_timeout&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_server_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SERVER_URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ServerError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Boom!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="simulate-bad-network-conditions"&gt;
&lt;h2&gt;Simulate Bad Network Conditions&lt;/h2&gt;
&lt;p&gt;They are several solutions out there to simulate faulty connections and timeouts. I remember that Tarek was working on &lt;a class="reference external" href="https://github.com/community-libs/vaurien"&gt;Vaurien&lt;/a&gt; a few years back, Netflix has &lt;a class="reference external" href="https://github.com/Netflix/chaosmonkey#readme"&gt;Chaos Monkey&lt;/a&gt;, and Shopify offers &lt;a class="reference external" href="https://github.com/shopify/toxiproxy"&gt;toxiproxy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I found the latter convenient enough to get started and do what I had in mind. They all sit between your server and your client, and can receive commands to start or stop manipulating the pipe between the client and the upstream server.&lt;/p&gt;
&lt;p&gt;On a recent Ubuntu, &lt;tt class="docutils literal"&gt;toxiproxy&lt;/tt&gt; is available out of the box:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;toxiproxy&lt;span class="w"&gt; &lt;/span&gt;toxiproxy-cli
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The service runs in the background, and its configuration is done using the CLI tool. For example, we'll run a proxy to our local API that is running on &lt;a class="reference external" href="http://localhost:8888"&gt;http://localhost:8888&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;toxiproxy-cli&lt;span class="w"&gt; &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;fantastic_api_dev&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;localhost:22222&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;localhost:8888
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we'll add a 5 seconds latency:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;toxiproxy-cli&lt;span class="w"&gt; &lt;/span&gt;toxic&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;fantastic_api_dev&lt;span class="w"&gt; &lt;/span&gt;--toxicName&lt;span class="w"&gt; &lt;/span&gt;latency_downstream&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;latency&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;latency&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Accessing our service at &lt;a class="reference external" href="http://localhost:22222"&gt;http://localhost:22222&lt;/a&gt; will now take a lot longer than usual. Check out the list of available &lt;a class="reference external" href="https://github.com/shopify/toxiproxy#toxics"&gt;toxics&lt;/a&gt; for more fun :)&lt;/p&gt;
&lt;p&gt;To remove an existing one, just do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;toxiproxy-cli&lt;span class="w"&gt; &lt;/span&gt;toxic&lt;span class="w"&gt; &lt;/span&gt;delete&lt;span class="w"&gt; &lt;/span&gt;fantastic_api_dev&lt;span class="w"&gt; &lt;/span&gt;--toxicName&lt;span class="w"&gt; &lt;/span&gt;latency_downstream
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The whole idea of such a service is to be able to introduce some network hazards in your integration tests. Basically, it consists in using the &lt;a class="reference external" href="https://github.com/douglas/toxiproxy-python"&gt;Python client library of toxiproxy&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;toxiproxy-python
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And setup the toxics in your tests setup:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;toxiproxy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Toxiproxy&lt;/span&gt;

&lt;span class="n"&gt;toxiserver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Toxiproxy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;toxiserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fantastic_api_dev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;upstream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost:8888&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LatencyTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUpClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;toxiserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fantastic_api_dev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_toxic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;latency_downstream&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;latency&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;latency&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proxy_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDownClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;destroy_toxic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;latency_downstream&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_client_raises_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;APIClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proxy_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch_user_info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="/images/quiet-monkey.gif" /&gt;
&lt;/div&gt;
&lt;p&gt;See also:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Peter's &lt;a class="reference external" href="https://www.peterbe.com/plog/best-practice-with-retries-with-requests"&gt;Best practice with retries with requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In &lt;a class="reference external" href="https://github.com/kennethreitz/requests3#feature-support"&gt;requests 3&lt;/a&gt; timeouts are required&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="tips"></category><category term="python"></category></entry><entry><title>Degrees of Philosophy</title><link href="https://blog.mathieu-leplatre.info/degrees-of-philosophy.html" rel="alternate"></link><published>2018-03-24T20:25:00+01:00</published><updated>2018-03-24T20:25:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2018-03-24:/degrees-of-philosophy.html</id><summary type="html">&lt;p&gt;A while ago, I was enjoying the &lt;a class="reference external" href="http://www.hackernewsletter.com/"&gt;Hackernewsletter&lt;/a&gt;, and I got amused by how two items of that edition caught my attention :)&lt;/p&gt;
&lt;p&gt;The first one was &lt;a class="reference external" href="https://github.com/kennethreitz/requests-html"&gt;request-html&lt;/a&gt;, which binds the &lt;a class="reference external" href="https://github.com/kennethreitz/requests/"&gt;requests&lt;/a&gt; Python library to a real browser. It can be pleasant for scraping websites, end-to-end testing of Web applications or ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;A while ago, I was enjoying the &lt;a class="reference external" href="http://www.hackernewsletter.com/"&gt;Hackernewsletter&lt;/a&gt;, and I got amused by how two items of that edition caught my attention :)&lt;/p&gt;
&lt;p&gt;The first one was &lt;a class="reference external" href="https://github.com/kennethreitz/requests-html"&gt;request-html&lt;/a&gt;, which binds the &lt;a class="reference external" href="https://github.com/kennethreitz/requests/"&gt;requests&lt;/a&gt; Python library to a real browser. It can be pleasant for scraping websites, end-to-end testing of Web applications or turning websites into APIs. It reminded me &lt;a class="reference external" href="https://github.com/makinacorpus/spynner/"&gt;Spynner&lt;/a&gt;, that &lt;a class="reference external" href="https://github.com/kiorky"&gt;Kiorky&lt;/a&gt; wrote like 8 years ago. And obviously &lt;a class="reference external" href="http://casperjs.org/"&gt;our esteemed CasperJS&lt;/a&gt; &amp;lt;3&lt;/p&gt;
&lt;p&gt;The second one was &lt;a class="reference external" href="https://www.sixdegreesofwikipedia.com/"&gt;6 degrees of Wikipedia&lt;/a&gt;, which builds a graph database of links between articles. It's absolutely fascinating! You can see how many ¬´navigation paths¬ª exist between two notions for example. By the way did you know that there are 2306 ways to navigate &lt;a class="reference external" href="https://www.sixdegreesofwikipedia.com/?source=Erlang%20%28programming%20language%29&amp;amp;target=Barbra%20Streisand"&gt;from Barbara Streisand to the Erlang programming language&lt;/a&gt; in 4 steps? I'm sure you'll be able to make use of that at your next family dinner.&lt;/p&gt;
&lt;p&gt;It reminded me &lt;a class="reference external" href="https://www.youtube.com/watch?v=mu4lJpFQUvU"&gt;a funny Youtube video&lt;/a&gt; where the guys play some ¬´Wikipedia navigation¬ª games. Like both players open a random article, the winner is the first one to reach the opponent's article by only following links from one page to another. Or both players open a random article, and the first one to reach the ¬´Philosophy¬ª page wins.&lt;/p&gt;
&lt;p&gt;While being bored at the airport, I dediced to go for a &lt;a class="reference external" href="filename}../Personal/joy_micro_hacks.rst"&gt;microhack&lt;/a&gt;!
I will write a small script to figure out how many hops it takes in average to go from any article to the Philosphy page. And following the &lt;strong&gt;first link&lt;/strong&gt; of the article like in the Youtube video...&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;requests-html&lt;span class="w"&gt; &lt;/span&gt;--python&lt;span class="o"&gt;=&lt;/span&gt;python3.6
&lt;/pre&gt;
&lt;p&gt;Let's reach the body of a Wikipedia random page first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;requests_html&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTMLSession&lt;/span&gt;

&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://fr.wikipedia.org&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;random_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/wiki/Sp%C3%A9cial:Page_au_hasard&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTMLSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;random_page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, it works and the API seems to be made for humans ;) Let's find out what would be the right CSS selector to pick the first link of the article:&lt;/p&gt;
&lt;img alt="Searching first link with Firefox Devtools" src="/images/wikipedia-first-link.png" /&gt;
&lt;p&gt;Something like &lt;cite&gt;#mw-content-text a&lt;/cite&gt;?&lt;/p&gt;
&lt;p&gt;But that sometimes picks the summary section on the right side. Be more hackish and precise:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;mw-content-text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;mw-parser-output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;^=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/wiki&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;mw-content-text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;mw-parser-output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;^=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/wiki&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code will be probably broken by the time you read that article, but I don't care! The joy of microhacks, not the joy of scraping, remember.&lt;/p&gt;
&lt;p&gt;Now let's iterate until the link points to the Philosophy page:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SELECTOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#mw-content-text &amp;gt; .mw-parser-output &amp;gt; p &amp;gt; a[href^=&amp;#39;/wiki&amp;#39;],&amp;quot;&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;#mw-content-text &amp;gt; .mw-parser-output &amp;gt; ul &amp;gt; li &amp;gt; a[href^=&amp;#39;/wiki&amp;#39;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random_page&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;first link is not philosophy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SELECTOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Philosophie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Cool it works!&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pipenv run python dop.py
Jeu vid√©o
Jeu √©lectronique
Jeu
Psychisme
Conscience
Philosophie
&lt;/pre&gt;
&lt;p&gt;Now let's repeat that for a hundred random pages, cache already visited links and compute average of degrees.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;degrees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random_page&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;first link is not philosophy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;degrees&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SELECTOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;  &lt;span class="c1"&gt;# bad selector&lt;/span&gt;
            &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;

        &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;degrees&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;  &lt;span class="c1"&gt;# loops&lt;/span&gt;
        &lt;span class="n"&gt;degrees&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Philosophie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;degrees&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;degrees&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; - &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;degrees&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;

        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can now tell you that if you keep clicking on the &lt;strong&gt;first link&lt;/strong&gt; of a random article you'll reach the &lt;em&gt;Philosophy&lt;/em&gt; page with 13.45 steps in average. We could also have run a &lt;a class="reference external" href="https://blog.mathieu-leplatre.info/some-python-3-asyncio-snippets.html"&gt;few workers in parallel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pretty useful huh!?&lt;/p&gt;
&lt;p&gt;It was that or hang around in gear shops where I'd never buy anything anyway...&lt;/p&gt;
</content><category term="Dev"></category><category term="microhack"></category></entry><entry><title>Placeholder for empty lists in CSS</title><link href="https://blog.mathieu-leplatre.info/placeholder-for-empty-lists-in-css.html" rel="alternate"></link><published>2018-01-15T00:00:00+01:00</published><updated>2018-01-15T00:00:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2018-01-15:/placeholder-for-empty-lists-in-css.html</id><summary type="html">&lt;p&gt;Call me a weirdo but one of my guilty pleasures is to implement minimalist apps with vanilla JavaScript.&lt;/p&gt;
&lt;p&gt;Especially now that we can do ES6, async/await and &lt;a class="reference external" href="https://twitter.com/FirefoxNightly/status/951382754125545473"&gt;even modules&lt;/a&gt;, it's a bliss! No npm, no browserify, no transpilation, just those three files &lt;tt class="docutils literal"&gt;index.html&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;style.css&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;script.js ‚Ä¶&lt;/tt&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Call me a weirdo but one of my guilty pleasures is to implement minimalist apps with vanilla JavaScript.&lt;/p&gt;
&lt;p&gt;Especially now that we can do ES6, async/await and &lt;a class="reference external" href="https://twitter.com/FirefoxNightly/status/951382754125545473"&gt;even modules&lt;/a&gt;, it's a bliss! No npm, no browserify, no transpilation, just those three files &lt;tt class="docutils literal"&gt;index.html&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;style.css&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;script.js&lt;/tt&gt;‚Äî like we used to do 15 years ago ‚Äî pure sweetness :)&lt;/p&gt;
&lt;p&gt;Today I needed to show a &lt;em&gt;¬´Empty¬ª&lt;/em&gt; placeholder when a &lt;tt class="docutils literal"&gt;&amp;lt;ul&amp;gt;&lt;/tt&gt; list is empty (ie. no &lt;tt class="docutils literal"&gt;&amp;lt;li&amp;gt;&lt;/tt&gt; child). My first attempt consisted in checking if the list had more than one child, more or less like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  Empty
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ul&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Remove placeholder.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's disturbing, bad and ugly. Mainly because the &lt;em&gt;Empty&lt;/em&gt; text node is also a child node, but especially because of this &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; statement in the application code. Like &lt;a class="reference external" href="https://youtu.be/qrYt4bbEUrU?t=15m33s"&gt;Linus said at TED&lt;/a&gt;, ¬´[‚Ä¶] good code is when the special case goes away and becomes the normal case¬ª :)&lt;/p&gt;
&lt;p&gt;Like it or not, but CSS can really help to keep the HTML and JS code to bare minimum. After a little research, I discovered that the &lt;tt class="docutils literal"&gt;:empty&lt;/tt&gt; selector works on any tag! And look, the special case goes away!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;after&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Empty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ul&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yes, that's better!&lt;/p&gt;
&lt;p&gt;In order to keep the CSS a little more decoupled from content, we can even do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Empty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;after&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some folks achieve amazing stuff using simple but powerful CSS rules! I often use &lt;a class="reference external" href="https://css-tricks.com/functional-css-tabs-revisited/"&gt;these tabs&lt;/a&gt; for example :)&lt;/p&gt;
</content><category term="Dev"></category><category term="css"></category><category term="javascript"></category><category term="html"></category></entry><entry><title>Some Python 3 asyncio snippets</title><link href="https://blog.mathieu-leplatre.info/some-python-3-asyncio-snippets.html" rel="alternate"></link><published>2017-08-31T00:00:00+02:00</published><updated>2017-08-31T00:00:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2017-08-31:/some-python-3-asyncio-snippets.html</id><summary type="html">&lt;p&gt;Until recently, I had never taken the chance to get my hands dirty with &lt;a class="reference external" href="https://docs.python.org/3/library/asyncio.html#module-asyncio"&gt;asyncio&lt;/a&gt;. But now that our production stacks run Python 3.6, there is no false excuse.&lt;/p&gt;
&lt;p&gt;I had done a lot of JavaScript before ‚Äî with promises and &lt;tt class="docutils literal"&gt;async&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;await&lt;/tt&gt; syntax ‚Äî but still, diving into the &lt;a class="reference external" href="http://lucumr.pocoo.org/2016/10/30/i-dont-understand-asyncio/"&gt;many ‚Ä¶&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Until recently, I had never taken the chance to get my hands dirty with &lt;a class="reference external" href="https://docs.python.org/3/library/asyncio.html#module-asyncio"&gt;asyncio&lt;/a&gt;. But now that our production stacks run Python 3.6, there is no false excuse.&lt;/p&gt;
&lt;p&gt;I had done a lot of JavaScript before ‚Äî with promises and &lt;tt class="docutils literal"&gt;async&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;await&lt;/tt&gt; syntax ‚Äî but still, diving into the &lt;a class="reference external" href="http://lucumr.pocoo.org/2016/10/30/i-dont-understand-asyncio/"&gt;many primitives of asyncio&lt;/a&gt; was far from immediate. Task versus future? Wrapped coroutine? Concurrent futures?&lt;/p&gt;
&lt;p&gt;This article gathers some notes and snippets I wish I had up my sleeve before starting.&lt;/p&gt;
&lt;p&gt;If you see something that bugs you, please use the comments!&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/async_juggling.jpg" /&gt;
&lt;div class="section" id="about-the-concepts"&gt;
&lt;h2&gt;About the concepts&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;coroutine&lt;/strong&gt; is basically an async function. But hey, it is also used to describe the object returned an by async function when you don't &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;coroutine&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;poll&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7f0e37cfbe08&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unlike promises in JavaScript, calling a coroutine does not start its code running. You have to schedule it manually, or simply &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; it.&lt;/p&gt;
&lt;p&gt;You can only use the &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; keyword from an async function. And there will always be a blocking call to &lt;tt class="docutils literal"&gt;loop.run_until_complete()&lt;/tt&gt; somewhere in the code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A &lt;strong&gt;future&lt;/strong&gt; is basically like a JavaScript promise ‚Äî a placeholder for an initially unknown value. A &lt;strong&gt;task&lt;/strong&gt; wraps a coroutine and its execution is scheduled in the event loop, and provides the future's interface. But you never instanciate it yourself. The API and documentation about futures and tasks are sometimes confusing about their distinction, so I just considered them synonyms so far.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensure_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="n"&gt;pending&lt;/span&gt; &lt;span class="n"&gt;coro&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The future/task object can be passed around. It has a state, a result and a potential exception. And you can await it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensure_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="run-coroutines-in-parallel"&gt;
&lt;h2&gt;Run coroutines in parallel&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;long_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;futures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;long_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gather&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;futures&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a human‚Ñ¢ I would have excepted the &lt;tt class="docutils literal"&gt;asyncio.wait()&lt;/tt&gt; function to run futures in parallel and return their results, but it doesn't exactly do that. It returns two lists of futures and you have to unwrap its value with &lt;tt class="docutils literal"&gt;result()&lt;/tt&gt;. And careful, the signature is not the same (a list of futures versus futures in &lt;tt class="docutils literal"&gt;*args&lt;/tt&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;futures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;long_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pending&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;futures&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="run-blocking-code-in-parallel"&gt;
&lt;h2&gt;Run blocking code in parallel&lt;/h2&gt;
&lt;p&gt;Blocking code can be executed accross a pool of threads or processes using &lt;a class="reference external" href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor"&gt;executors&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;concurrent.futures&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;long_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;executor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;futures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_workers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;futures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_in_executor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;executor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;long_task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gather&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;futures&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="asynchronous-stream-from-file-like-objects"&gt;
&lt;h2&gt;Asynchronous stream from file-like objects&lt;/h2&gt;
&lt;p&gt;Reading from a file or standard input like &lt;tt class="docutils literal"&gt;sys.stdin&lt;/tt&gt; is blocking. In order to treat them as asynchronuous streams of data, we leverage &lt;tt class="docutils literal"&gt;asyncio.StreamReader()&lt;/tt&gt; and expose them as &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0525/"&gt;async generators&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stream_as_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StreamReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;reader_protocol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StreamReaderProtocol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect_read_pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reader_protocol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# EOF.&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The generator is awaited with an &lt;tt class="docutils literal"&gt;async for&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;stream_as_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="process-data-stream-by-chunk-asynchronously"&gt;
&lt;h2&gt;Process data stream by chunk asynchronously&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;parse_urls&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;read_stuff&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;chunks to read&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;chunk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;split_lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;leftover&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;chunk_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;leftover&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;chunk_str&lt;/span&gt;
        &lt;span class="n"&gt;chunk_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chunk_str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lstrip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;leftover&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;

&lt;span class="n"&gt;urls_generator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_urls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;data_generator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urls_generator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;split_lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_generator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mock-aiohttp-responses"&gt;
&lt;h2&gt;Mock aiohttp responses&lt;/h2&gt;
&lt;p&gt;Suppose the following sample code using &lt;a class="reference external" href="http://aiohttp.readthedocs.io/"&gt;aiohttp&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;aiohttp&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_username&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClientSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;SERVER_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/profile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can test it using the amazing &lt;a class="reference external" href="https://asynctest.readthedocs.io/"&gt;asynctest&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/pnuckowski/aioresponses/"&gt;aioresponses&lt;/a&gt; libraries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asynctest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;aioresponses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;aioresponses&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asynctest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;remote_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;/profile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Ada&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;mocked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aioresponses&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;mocked&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remote_content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;mocked&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SERVER_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addCleanup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mocked&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_username&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;get_username&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Ada&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="consume-queue-in-batches"&gt;
&lt;h2&gt;Consume queue in batches&lt;/h2&gt;
&lt;p&gt;A producer feeds items into a queue, and consumers builds batches from them. When it takes too much time to fill a batch, it proceeds with the current one.&lt;/p&gt;
&lt;p&gt;By marking the tasks as done in the queue, we can await the queue and know when everything is processed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;async_timeout&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;markdone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Returns a callback that will mark `n` queue items done.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task_done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# will raise exception if failed.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;executor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;consumer is not cancelled&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;batch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;async_timeout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WAIT_TIMEOUT&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;BATCH_SIZE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="c1"&gt;# Wait for new items.&lt;/span&gt;
                    &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TimeoutError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_in_executor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;executor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;long_sync_task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_done_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;markdone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;executor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;futures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_workers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;NB_THREADS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Schedule the consumer&lt;/span&gt;
    &lt;span class="n"&gt;consumer_coro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;executor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;consumer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensure_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer_coro&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Run the producer and wait for completion&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Wait until the consumer is done consuming everything.&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# The consumer is still awaiting for the producer, cancel it.&lt;/span&gt;
    &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="python"></category><category term="asyncio"></category></entry><entry><title>FullstackFest 2016</title><link href="https://blog.mathieu-leplatre.info/fullstackfest-2016" rel="alternate"></link><published>2016-09-16T00:00:00+02:00</published><updated>2016-09-16T00:00:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2016-09-16:/fullstackfest-2016</id><summary type="html">&lt;p class="first last"&gt;Summary and feedback from Fullstack Fest 2016 in Barcelona&lt;/p&gt;
</summary><content type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This article was originally posted on &lt;a class="reference external" href="https://mozilla-services.github.io/servicedenuages.fr/en/fullstackfest-2016"&gt;servicedenuages.fr&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I had the chance to go the Fullstack Fest 2016 and really enjoyed it ‚Äî thanks Mozilla!&lt;/p&gt;
&lt;p&gt;This blog post is an attempt to give you a summary and some feedback of what happened during this 4+1 days conference!&lt;/p&gt;
&lt;div class="section" id="huge-applause"&gt;
&lt;h2&gt;Huge applause!&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://www.codegram.com"&gt;Codegram team&lt;/a&gt; did really really well! They raised the bar for tech conferences; all the feedback I heard was extremely positive! Plus, Barcelona is a pleasant destination :)&lt;/p&gt;
&lt;p&gt;Former &lt;em&gt;RubyCon&lt;/em&gt; and &lt;em&gt;FutureJS&lt;/em&gt; events were merged into one &lt;em&gt;fullstack&lt;/em&gt; event, 2 days of backend talks, 1 gap day with social activites, and 2 days of frontend talks.&lt;/p&gt;
&lt;blockquote&gt;
Problems of Today, ideas from the future. ‚Äî FullstackFest motto&lt;/blockquote&gt;
&lt;p&gt;I must congratulate the organizers for the choice of speakers and topics. It's a huge challenge to captivate 500 persons during 5 days, and they did really well! And also a big up for the impressive performance of the captioners!&lt;/p&gt;
&lt;img alt="CC-BY &amp;#64;fullstackfest" class="align-center" src="https://blog.mathieu-leplatre.info/images/fullstackfest-venue.jpg" /&gt;
&lt;/div&gt;
&lt;div class="section" id="trends"&gt;
&lt;h2&gt;Trends&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Amazon Lambda&lt;/li&gt;
&lt;li&gt;GraphQL&lt;/li&gt;
&lt;li&gt;Criticism of microservices&lt;/li&gt;
&lt;li&gt;Offline / high latency / decentralized Web&lt;/li&gt;
&lt;li&gt;Functional programming&lt;/li&gt;
&lt;li&gt;Reactive programming&lt;/li&gt;
&lt;li&gt;Immutability&lt;/li&gt;
&lt;li&gt;Machine learning&lt;/li&gt;
&lt;li&gt;Virtual reality&lt;/li&gt;
&lt;li&gt;Physical Web&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="CC-BY &amp;#64;fullstackfest" class="align-center" src="https://blog.mathieu-leplatre.info/images/fullstackfest-trends.jpg" /&gt;
&lt;/div&gt;
&lt;div class="section" id="one-sentence-summaries"&gt;
&lt;h2&gt;One sentence summaries&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;The videos are already online! In order to help you choose which one to watch, here is the shortest summary I could come up with for each talk, videos are linked on authors names:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Hardware is amazing, software is crap. Use parallelism and keep your data under your control ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=itKFrXghGuA&amp;amp;index=2&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Joe Armstrong&lt;/a&gt;, Erlang's inventor.&lt;/li&gt;
&lt;li&gt;Scale using ¬´pods¬ª: deploy several isolated stacks of your multitenant app ¬≠‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=7UyDK2bDjc4&amp;amp;index=3&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Simon Eskildsen&lt;/a&gt;, Shopify&lt;/li&gt;
&lt;li&gt;Theorical knowledge can help when designing distributed systems with high availability ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=bUlpp8_Mevk&amp;amp;index=4&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Ines Sombra&lt;/a&gt;, Fastly&lt;/li&gt;
&lt;li&gt;Improve efficiency and security using a unikernel: a kernel whose components are built specifically for your app ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=XNu2lze6jS0&amp;amp;index=5&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Amir Chaudhry&lt;/a&gt;, Docker Inc&lt;/li&gt;
&lt;li&gt;Instead of making X faster, do less of X ¬≠‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=b9H9AtbxpPM&amp;amp;index=6&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Tobias Pfeiffer&lt;/a&gt;, Bitcrowd&lt;/li&gt;
&lt;li&gt;Docker containers are only as secure as your best practices ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=oANurUSaOFs&amp;amp;index=7&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Ben Hall&lt;/a&gt;, &lt;a class="reference external" href="http://katacoda.com"&gt;http://katacoda.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Elixir provides high level abstractions that make Erlang awesome ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=Ba3aCm3A0o8&amp;amp;index=8&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Sa≈°a Juriƒá&lt;/a&gt;, Aircloak&lt;/li&gt;
&lt;li&gt;Unison is an experiment to come up with a new programming paradigm focused on distributed computing and persistence ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=f6yA3t0dO-k&amp;amp;index=10&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Paul Chiusano&lt;/a&gt;, Stage N&lt;/li&gt;
&lt;li&gt;HTTP2 reduces latency. It's here, use it with a one liner in your server configuration ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=CThgMRXS8w8&amp;amp;index=11&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Ole Michaelis&lt;/a&gt;, Jimdo&lt;/li&gt;
&lt;li&gt;Scale by publishing pre-rendered content to S3 when your data source changes ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=vUCr1oTtaKA&amp;amp;index=12&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Tim Perry&lt;/a&gt;, BBC&lt;/li&gt;
&lt;li&gt;Use Amazon lambda as a very cheap and ultra-efficient scaling solution ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=9IrFIobZUEA&amp;amp;index=13&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Austen Collins&lt;/a&gt;, serverless.com&lt;/li&gt;
&lt;li&gt;Processing natural language can be very easy with simple tricks ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=vRb-El8hC-U&amp;amp;index=14&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Duretti Hirpa&lt;/a&gt;, Slack&lt;/li&gt;
&lt;li&gt;It is our responsability to decentralize access and assure durability of our data. Internet of hash = bittorrent + git ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=jONZtXMu03w&amp;amp;index=15&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Juan Benet&lt;/a&gt;, ipfs.io&lt;/li&gt;
&lt;li&gt;Enable GraphQL on your API and rely on smart clients to do the hard work of querying and caching ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=eD7kLFGOgVw&amp;amp;index=16&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Marc-Andre Giroux&lt;/a&gt;, Shopify&lt;/li&gt;
&lt;li&gt;Some insights about recommendation engines and machine learning techniques ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=SRnM_P_ygqI&amp;amp;index=17&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Brian Sam-Bodden&lt;/a&gt;, Integrallis&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="CC-BY &amp;#64;fullstackfest" class="align-center" src="https://blog.mathieu-leplatre.info/images/fullstackfest-talks.jpg" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Immutable UIs make it simpler to improve durability, utility and beauty in your software architecture ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=pLvrZPSzHxo&amp;amp;index=18&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Lee Byron&lt;/a&gt;, Facebook, author of Immutable.js&lt;/li&gt;
&lt;li&gt;Elm applications have no runtime errors ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=rDQ22Yg3Fms&amp;amp;index=19&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Jack Franklin&lt;/a&gt;, Songkick&lt;/li&gt;
&lt;li&gt;With new versions of Ecmascript, asynchronuous programs will look more and more synchronuous ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=3pKNRgResq0&amp;amp;index=20&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Jafar Husain&lt;/a&gt;, Netflix, author of Falcor&lt;/li&gt;
&lt;li&gt;PostCSS and CSS modules are really helpful for building a libray of UI components ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=j8eBXGPl_5E&amp;amp;index=21&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;David Wells&lt;/a&gt;, Serverless&lt;/li&gt;
&lt;li&gt;At last we have proper grids with CSS4 ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=axVw1Zduqn0&amp;amp;index=22&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Jen Kramer&lt;/a&gt;, Hardvard University&lt;/li&gt;
&lt;li&gt;Evolution of Web apps which now have views, business logic and persistence ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=wtURpqTgtUs&amp;amp;index=23&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Luca Marchesini&lt;/a&gt;, Kuzzle&lt;/li&gt;
&lt;li&gt;Om Next leverages Clojure to bring conventions for data immutability, data specifications and data routing ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=Zb18iPjDgwM&amp;amp;index=24&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Ant√≥nio Nuno Monteiro&lt;/a&gt;, Technische Universit√§t Dresden&lt;/li&gt;
&lt;li&gt;The OpenBCI project allows everyone to study brainwaves using a homemade helmet ‚Äî  &lt;a class="reference external" href="https://www.youtube.com/watch?v=CSfUr3m0-w8&amp;amp;index=25&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Alex Castillo&lt;/a&gt;, Netflix&lt;/li&gt;
&lt;li&gt;Flow based programming via CycleJS allows you to design and debug your apps via a high level of abstraction ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=R-GzJgEccEQ&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc&amp;amp;index=27"&gt;Andr√© Staltz&lt;/a&gt;, Futurice&lt;/li&gt;
&lt;li&gt;CSP channels in Javascript is the best tool for dealing with streams of data ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=r7yWWxdP_nc&amp;amp;index=28&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Vincenzo Chianese&lt;/a&gt;, Apiary&lt;/li&gt;
&lt;li&gt;With Service workers we won't have to wait for the server response when submitting data ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=xs_QRqGZ8xQ&amp;amp;index=29&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Andrew Dunkman&lt;/a&gt;, Harvest&lt;/li&gt;
&lt;li&gt;Build your apps as if there were be accessed by Martians via a high-latency connection ¬≠‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=7rlEidtXlZg&amp;amp;index=30&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Slobodan Stojanovic&lt;/a&gt;, Cloud Horizon&lt;/li&gt;
&lt;li&gt;WebAssembly allows native apps to be run by the browser VM in the same stack context as JavaScript ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=vmzz17JGPHI&amp;amp;index=31&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Ben Smith&lt;/a&gt;, Google&lt;/li&gt;
&lt;li&gt;Render a 2D UI with React within a 3D WebGL scene ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=DfPPlakRvow&amp;amp;index=32&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Massimiliano Mantione&lt;/a&gt;, HyperFair&lt;/li&gt;
&lt;li&gt;Virtual reality in the browser is here! ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=Ciqucr_Ww9s&amp;amp;index=33&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Liv Erickson&lt;/a&gt;, Microsoft&lt;/li&gt;
&lt;li&gt;The physical Web is built on top of the open Web and will change our lives ‚Äî &lt;a class="reference external" href="https://www.youtube.com/watch?v=gV72mCdomo4&amp;amp;index=34&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;Scott Jenson&lt;/a&gt;, Google&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="some-thoughts"&gt;
&lt;h2&gt;Some thoughts&lt;/h2&gt;
&lt;p&gt;The challenges of Web content durability and decentralization are very concerning. The Web of today has too many points of failure, Web engineers are responsible for making it better. For example, 500 attendees cannot collaborate on a document without going through servers outside the room! My great-great-grandchildren might not be able to find a picture of me on the Web! &lt;a class="reference external" href="https://ipfs.io/#why"&gt;But read this page&lt;/a&gt; and you'll realize this is not &lt;em&gt;only&lt;/em&gt; about the future!&lt;/p&gt;
&lt;blockquote&gt;
You are cyberwizards!  ‚Äî Juan Benet&lt;/blockquote&gt;
&lt;p&gt;Both frontend and backend talks seem to agree on the fact that REST has strong limitations for high latency connections like on the mobile Web. GraphQL and Falcor are good candidates today, and can be complementary to our usual REST/CRUD endpoints.&lt;/p&gt;
&lt;p&gt;Google and Microsoft are following Amazon and its &lt;a class="reference external" href="https://aws.amazon.com/lambda/details/"&gt;Lambda&lt;/a&gt; to provide a platform of nanoservices for which you don't pay when idle, and that scale on trafic peaks. A whole app can be decomposed into functions and designed using internal events. Orchestration of those tiny pieces of code is another story (&lt;em&gt;for a CRUD endpoint, each verb is bound to a function&lt;/em&gt;), but &lt;a class="reference external" href="http://blog.serverless.com/defining-serverless/"&gt;Serverless&lt;/a&gt; wants to tackle that.&lt;/p&gt;
&lt;img alt="CC-BY &amp;#64;fullstackfest" class="align-center" src="https://blog.mathieu-leplatre.info/images/fullstackfest-vr.jpg" /&gt;
&lt;p&gt;Functional programming is in the air. Pure (stateless) functions scale because they can be executed anywere without context. Without side effects, it also becomes obvious to test them. They give backend developers some good pattern for highly available services, and provide the necessary constraints for immutability to frontend developers. I believe that if functional programming is not adopted as much as it could, it is not because of the paradigm and concepts, but because of the disconcerting syntax!&lt;/p&gt;
&lt;blockquote&gt;
There is no architecture nirvana!  ‚Äî Lee Byron&lt;/blockquote&gt;
&lt;p&gt;Angular/TypeScript was almost absent from the conference, but we could see a trend around type inference/checking. It really improves developer experience and reduces runtime errors in the end. With projects like Elm, developers feel safe while coding: the compiler is smart and polite, refactoring is fun! The concept of &lt;tt class="docutils literal"&gt;null&lt;/tt&gt; is replaced with a notion of &lt;em&gt;maybe &amp;lt;type&amp;gt;&lt;/em&gt; which makes apps robust.&lt;/p&gt;
&lt;p&gt;Everybody seemed to agree that JavaScript transpilation will last for a long time. The language will evolve, and we shouldn't hope for feature freeze. Plus, it really helps developers focus on modern stacks, leveraging modern features like &lt;a class="reference external" href="https://github.com/tc39/proposal-cancelable-promises"&gt;cancelable promises&lt;/a&gt;. And nowadays it is rather easy to build your app for legacy versions of JavaScript like ES5. But hey, it is a bit absurd that modern browsers have to download big bundles of code full of polyfills! It would be a lot nicer if they were delivered to legacy browsers only ‚Äî &lt;cite&gt;&amp;lt;!--[if IE 10]&amp;gt;&lt;/cite&gt; oh yeah :) ‚Äî or even better: shipped as something like a browser addon :)&lt;/p&gt;
&lt;p&gt;The old times where we could inspect the source code of a page ¬≠‚Äî and learn from it ‚Äî is far! It is sad, but we may have to accept it because WebAssembly goes a lot further and ships code that looks closely to assembler! It's far from the Web we know, but it's still the open Web! Note that it is very different from what we saw in the past with plugins like Java applets, now a WebAssembly function can be called from a usual JS script!&lt;/p&gt;
&lt;p&gt;The physical Web is awesome and I'm really excited about this revolution, especially how it could bring a peer-to-peer local Web, using &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Bluetooth_API"&gt;Web bluetooth&lt;/a&gt; for example. Scott told me that the Mozilla approach with &lt;a class="reference external" href="https://hacks.mozilla.org/2016/09/flyweb-pure-web-cross-device-interaction/"&gt;FlyWeb&lt;/a&gt; is slightly different because it goes through Wifi, but both teams in contact. The physical Web is an open project, and Google is pushing it strongly. I'm bothered by the &lt;em&gt;URL redirections&lt;/em&gt; strategy though because it puts the redirection intermediary in a very strong position. I believe that Google wants to be that intermediary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="personal-feedback"&gt;
&lt;h2&gt;Personal feedback&lt;/h2&gt;
&lt;p&gt;I never attended a conference that was so close to my flat! 3min walking! It was kind of weird to meet so many prestigious IT talents in my neighbourhood! ...and so many floppy disks :)&lt;/p&gt;
&lt;img alt="CC-BY &amp;#64;fullstackfest" class="align-center" src="https://blog.mathieu-leplatre.info/images/fullstackfest-floppy.jpg" /&gt;
&lt;p&gt;The venue was great, and very well setup for the show (&lt;a class="reference external" href="https://www.youtube.com/watch?v=vxMASndC3k4&amp;amp;index=1&amp;amp;list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc"&gt;see the introductory video clip!&lt;/a&gt;). The coffee was not so good though.&lt;/p&gt;
&lt;p&gt;I really enjoyed the fact that there was only &lt;strong&gt;one track&lt;/strong&gt;. I never had to divide myself between two interesting talks, and could just sit and enjoy :)&lt;/p&gt;
&lt;p&gt;Almost every topic resonated with the challenges we face at work. We are one of the few teams at Mozilla that do both backend and frontend, and that's awesome to feel in the same boat as the whole room of attendees. For example, we implemented &lt;a class="reference external" href="https://amo2kinto-lambda.readthedocs.io"&gt;something on Amazon lambda&lt;/a&gt; recently, we are well aware of the frontend architecture challenges through our &lt;a class="reference external" href="https://github.com/Kinto/kinto-admin"&gt;Kinto-admin&lt;/a&gt;, Ethan has a functional programming background in Haskell, and Nico and Mathieu &lt;a class="reference external" href="https://github.com/n1k0/kinto-elm-experiments"&gt;are playing with Elm&lt;/a&gt;. That's why I strongly regretted that my teammates were not with me!&lt;/p&gt;
&lt;p&gt;Also, I had the opportunity to meet Luca and Anthony from the Kuzzle team! We had a lot of fun together and our conversations about generic reusable backends were super insightful ‚Äî see &lt;a class="reference external" href="https://mail.mozilla.org/pipermail/kinto/2016-September/000197.html"&gt;my post on kinto ML&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last, but not least, I would like to thank Pusher.com for organizing a hack contest using their API! They had a physical button in their booth, and I made a kind-of video booth that records the webcam when the button is pressed. I could not have won this BB8 droid without &lt;a class="reference external" href="https://hacks.mozilla.org/2016/04/record-almost-everything-in-the-browser-with-mediarecorder/"&gt;Soledad's insights on MozillaHacks&lt;/a&gt;, and I thank her again :)&lt;/p&gt;
&lt;img alt="Me holding the prize proudly!" class="align-center" src="https://blog.mathieu-leplatre.info/images/fullstackfest-contest.jpg" /&gt;
&lt;/div&gt;
&lt;div class="section" id="some-links"&gt;
&lt;h2&gt;Some links&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.kontena.io"&gt;https://www.kontena.io&lt;/a&gt;: open source container platform. The features are really really attractive!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://toxiproxy.io"&gt;http://toxiproxy.io&lt;/a&gt;: a proxy to simulate network and system conditions&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://openresty.org"&gt;https://openresty.org&lt;/a&gt;: REST via Lua in Nginx&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Gossip_protocol"&gt;Gossip/epidemic protocols&lt;/a&gt; to invalidate cache&lt;/li&gt;
&lt;li&gt;Challenge unikernel security with the &lt;a class="reference external" href="http://amirchaudhry.com/bitcoin-pinata"&gt;Bitcoin pi√±ata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Solve deterministic problems with randomness using &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Monte_Carlo_method"&gt;the Monte Carlo method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Decision tree learning with &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Random_forest"&gt;random forests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Attack systems with &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Fork_bomb"&gt;fork bombs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The $10 million australian #censusfail &lt;a class="reference external" href="http://eftm.com.au/2016/08/how-two-uni-students-built-a-better-census-site-in-just-54-hours-for-500-30752"&gt;rebuilt for $500 using AWS Lambda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clean natural language with &lt;a class="reference external" href="https://stanfordnlp.github.io/CoreNLP/"&gt;CoreNLP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://howdy.ai"&gt;https://howdy.ai&lt;/a&gt;: trainable bot for Slack&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://openbazaar.org"&gt;https://openbazaar.org&lt;/a&gt;: A free market for all, no fees, no restrictions&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.apollostack.com"&gt;http://www.apollostack.com&lt;/a&gt;: everything you need to start using GraphQL&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.ted.com/talks/barry_schwartz_on_the_paradox_of_choice?language=en"&gt;The paradox of choice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://davidwells.io/19-open-source-react-component-libraries-to-use-in-your-next-project/"&gt;19 Open Source React Component Libraries to use in your next project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/team-gryff/react-monocle"&gt;react-monocle&lt;/a&gt;: A developer tool to visualize a React application's component hierarchy&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hyperdev.com"&gt;https://hyperdev.com&lt;/a&gt;: A fullstack JSBin&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ux.mulesoft.com"&gt;http://ux.mulesoft.com&lt;/a&gt;: MuleSoft components library&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Dev"></category></entry><entry><title>Your tests as your specs</title><link href="https://blog.mathieu-leplatre.info/your-tests-as-your-specs.html" rel="alternate"></link><published>2015-04-17T00:00:00+02:00</published><updated>2015-04-17T00:00:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2015-04-17:/your-tests-as-your-specs.html</id><summary type="html">&lt;p&gt;At last, with all this surrounding pressure, you finally decided to write tests.
Now, you always setup TravisCI to run when code change is submitted. You now feel
confident when pull-requests come in, and soon your test suite code coverage will
reach 100%.&lt;/p&gt;
&lt;p&gt;Let me be difficult to please here ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;At last, with all this surrounding pressure, you finally decided to write tests.
Now, you always setup TravisCI to run when code change is submitted. You now feel
confident when pull-requests come in, and soon your test suite code coverage will
reach 100%.&lt;/p&gt;
&lt;p&gt;Let me be difficult to please here...&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/tests-specs-nitpick.jpg" /&gt;
&lt;p&gt;You can reach clean code heaven with one final little step: &lt;strong&gt;transform the tests
suites into specifications&lt;/strong&gt;!&lt;/p&gt;
&lt;div class="section" id="bad-pattern"&gt;
&lt;h2&gt;Bad pattern&lt;/h2&gt;
&lt;p&gt;In many Open Source projects, a great attention is paid to the quality of the
code itself. It is quite often that some code is merged without the tests being
exhaustively reviewed.&lt;/p&gt;
&lt;p&gt;In other words, it is not rare that the quality of the tests is not reflecting
the quality of the application code.&lt;/p&gt;
&lt;p&gt;The most frequent pattern is that all tests are implemented in the same test case &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GameTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;game&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;played&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;played&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jean-Louis&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jean-Louis (score: 4)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# See bug #2780&lt;/span&gt;
        &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jean-Louis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Writing tests like this has many drawbacks:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;One has to read the entire test to understand the expected behaviour of the code;&lt;/li&gt;
&lt;li&gt;If the test fails, it will be hard to find out what part of the code has failed precisely;&lt;/li&gt;
&lt;li&gt;Refactoring the code will probably mean to rewrite the entire test since instructions are
inter-dependant;&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;TestCase&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;setUp()&lt;/tt&gt; notions are underused.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="better-pattern"&gt;
&lt;h2&gt;Better pattern&lt;/h2&gt;
&lt;p&gt;A simple way to improve the quality of the tests is to see them as specifications.
After all, it makes sense, you add some code for a reason! The tests are not only
here to prevent regressions, but also to explicit the expected behaviour of the application!&lt;/p&gt;
&lt;p&gt;I believe that many projects would take great benefits if following this approach &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# test_game.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InitializationTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_default_played_status_is_false&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;played&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UpdateTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jean-Louis&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_played_status_is_true_if_score_is_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;played&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_string_representation_is_player_with_score_if_played&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jean-Louis (score: 4)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_string_representation_is_only_player_if_not_played&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# See bug #2780&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jean-Louis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Writing tests like this has many advantages:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Each case isolates a situation;&lt;/li&gt;
&lt;li&gt;Each test is an aspect of the specification;&lt;/li&gt;
&lt;li&gt;Each test is independant;&lt;/li&gt;
&lt;li&gt;The testing vocabulary is honored: we &lt;em&gt;setup&lt;/em&gt; a &lt;em&gt;test case&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;If a test fails, it is straightforward to understand what part of the spec
was violated;&lt;/li&gt;
&lt;li&gt;Tests that were written when fixing bugs will explicit the expected behaviour
for edge cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="reporting"&gt;
&lt;h2&gt;Reporting&lt;/h2&gt;
&lt;p&gt;Now that we have explicited the specs, we will want to read them properly.&lt;/p&gt;
&lt;p&gt;One of things I like in JavaScript is &lt;a class="reference external" href="http://mochajs.org"&gt;Mocha&lt;/a&gt;. Appart
from the nice API and the very rich feature set, its default test reporter is
great, tt is colourful and structurally invites you to write tests as specs.&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/tests-specs-mocha.png" /&gt;
&lt;p&gt;In our project, we were using &lt;a class="reference external" href="http://nose.readthedocs.org"&gt;nose&lt;/a&gt;, so I
decided to write a reporter that would produce the same output as Mocha.&lt;/p&gt;
&lt;p&gt;You can install and use it this way:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip install nose-mocha-reporter

$ nosetests --with-mocha-reporter yourpackage/
&lt;/pre&gt;
&lt;p&gt;It will produce the following output:&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/tests-specs-nose-reporter.png" /&gt;
&lt;p&gt;It takes the tests suites and extract the names as readable strings:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;tests/core/test_game.py&lt;/tt&gt; ‚Üí &lt;tt class="docutils literal"&gt;CORE GAME&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;class InitializationTest(TestCase)&lt;/tt&gt; ‚Üí &lt;tt class="docutils literal"&gt;Initialization&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;def test_played_status_is_true_if_score_is_set&lt;/tt&gt; ‚Üí &lt;tt class="docutils literal"&gt;Played status is true if score is set&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It also mesures the execution time of each test in order highlight the slow ones.&lt;/p&gt;
&lt;p&gt;To conclude, this reporter has a pretty modest objective: remind you that &lt;strong&gt;the tests
you write should be read as specifications&lt;/strong&gt; &lt;a class="footnote-reference" href="#footnote-3" id="footnote-reference-3"&gt;[3]&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="special-thanks"&gt;
&lt;h2&gt;Special thanks!&lt;/h2&gt;
&lt;p&gt;I'm very grateful to &lt;a class="reference external" href="http://antoine.cezar.fr/"&gt;Antoine&lt;/a&gt; and
&lt;a class="reference external" href="http://alexmarandon.com/"&gt;Alex&lt;/a&gt; that showed me the light on
this. Since they might not be conscious of the influence they had on me,
I jump on the occasion to thank them loudly :)&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;See &lt;a class="reference external" href="https://github.com/makinacorpus/Geotrek/blob/v0.33.4/geotrek/trekking/tests/test_models.py#L71-L99"&gt;a good example&lt;/a&gt; that I wrote in the past&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;For example, &lt;a class="reference external" href="https://github.com/mozilla-services/cliquet/blob/1.7.0/cliquet/tests/resource/test_record.py"&gt;see this code&lt;/a&gt; I wrote later on.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;To be honest, I haven't worked much with &lt;a class="reference external" href="http://pytest.org"&gt;pytest&lt;/a&gt;
(&lt;em&gt;I probably should&lt;/em&gt;), and I don't know its eco-system: there might
something similar...&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="tips"></category><category term="opensource"></category><category term="methodology"></category></entry><entry><title>Subtivals, remote display ?</title><link href="https://blog.mathieu-leplatre.info/subtivals-remote-display.html" rel="alternate"></link><published>2015-03-26T00:00:00+01:00</published><updated>2015-03-26T00:00:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2015-03-26:/subtivals-remote-display.html</id><summary type="html">&lt;p&gt;Recently I was asked to think about a new feature for Subtivals : allowing
spectators to read subtitles on their mobile or tablet.&lt;/p&gt;
&lt;div class="section" id="usual-setup"&gt;
&lt;h2&gt;Usual setup&lt;/h2&gt;
&lt;p&gt;In a typical installation, Subtivals overlays the subtitles on top of the
main image coming from the cinema projector. It allows to add captioning on
any ‚Ä¶&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Recently I was asked to think about a new feature for Subtivals : allowing
spectators to read subtitles on their mobile or tablet.&lt;/p&gt;
&lt;div class="section" id="usual-setup"&gt;
&lt;h2&gt;Usual setup&lt;/h2&gt;
&lt;p&gt;In a typical installation, Subtivals overlays the subtitles on top of the
main image coming from the cinema projector. It allows to add captioning on
any movie, especially when the physical copy (35mm or DCP) does not carry them.
That's why most of Subtivals users are international film festivals, cultural centers or
film libraries.&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/subtivals-remote-cinema.png" style="width: 500px;" /&gt;
&lt;p&gt;Another common use-case is live captionning, where subtitles are projected on
a small screen below the scene. It allows to add captioning to concerts, theater,
operas, conference talks, live shows... Surprisingly there was no tool for that,
and most people were using Poweroint slides before discovering Subtivals.&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/subtivals-remote-opera.png" style="width: 500px;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="use-case"&gt;
&lt;h2&gt;Use-case&lt;/h2&gt;
&lt;p&gt;Overlaying subtitles requires a powerful projector (~4000 Lumens for white/yellow
and ~5000 Lumens for the colors used in hard of hearing captioning).&lt;/p&gt;
&lt;p&gt;When the scene is very large or the atmosphere very bright, such as open air events,
it can be hard to obtain sharp subtitles on a screen, even with a powerful longthrow projector.&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/subtivals-remote-stadium.png" style="width: 300px;" /&gt;
&lt;p&gt;Also, when the venue is very big, such as operas, subtitles have to be projected
with a very big text size for the spectators seated in the last rows. And
those in the front raws won't read easily either.&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/subtivals-remote-theater.png" style="width: 300px;" /&gt;
&lt;p&gt;Having remote display of subtitles for these situations makes sense. Subtitles
should be shown synchronously on various screens.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;We can imagine:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Adding several small LCD screens in the venue (like every 20 meters) instead of
one big projected image;&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="" class="align-center" src="/images/subtivals-remote-backseat.png" style="width: 300px;" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Showing subtitles on the spectator mobile or tablet;&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="" class="align-center" src="/images/subtivals-remote-tablet.png" style="width: 300px;" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Adding small screens (or tablets) on the backseat, like it is already done in
some operas;&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="" class="align-center" src="/images/subtivals-remote-backseat.jpg" style="width: 300px;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="technology"&gt;
&lt;h2&gt;Technology&lt;/h2&gt;
&lt;p&gt;I have of course no intention to implement native mobile applications, relying
on a specific communication protocol and struggling with obscure restricted
application stores.&lt;/p&gt;
&lt;p&gt;It has to be universal, fully open and follow well-known standards, it will
thus be built on a Web stack.&lt;/p&gt;
&lt;p&gt;We now have WebSockets, and Qt provides everything to use them! The remote display
will then be a simple JavaScript Web page, receiving subtitles in real-time from
the WebSocket server.&lt;/p&gt;
&lt;p&gt;Funny hacks ahead :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="prototype"&gt;
&lt;h2&gt;Prototype&lt;/h2&gt;
&lt;p&gt;I could build a very simple prototype in a few hours, with a minimalist JavaScript
code for the display page and some idiot code for the Node.js server. The code
is &lt;a class="reference external" href="https://github.com/Subtivals/live.subtivals.org"&gt;online&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Qt code in Subtivals in charge of push the subtitles in real time is
&lt;a class="reference external" href="https://github.com/traxtech/subtivals/pull/252"&gt;also very small&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It looks already fun and promising :)&lt;/p&gt;
&lt;video src="/images/subtivals-remote.webm" width="500" controls&gt;
    &lt;p&gt;Your browser does not support the video element &lt;/p&gt;
&lt;/video&gt;&lt;/div&gt;
&lt;div class="section" id="strategy-1-global"&gt;
&lt;h2&gt;Strategy #1: Global&lt;/h2&gt;
&lt;p&gt;We deploy a central server that is used by default in the application.&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/subtivals-remote-server.png" style="width: 500px;" /&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Operators have no setup, it's just clic and play, like it always has
been with Subtivals;&lt;/li&gt;
&lt;li&gt;Spectators have no setup either, they just open a Web page;&lt;/li&gt;
&lt;li&gt;An opportunity to generate some regular income if we choose to charge for the
service;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It relies on an Internet connection;&lt;/li&gt;
&lt;li&gt;The server has a regular cost, even if unused;&lt;/li&gt;
&lt;li&gt;The server should scale to support several thousands spectators and potentially
several simultaneous projections in the world;&lt;/li&gt;
&lt;li&gt;Some minimal cryptography has to be introduced to prevent attackers from
sending messages to the audience;&lt;/li&gt;
&lt;li&gt;It implies some stressful responsabilities 24/7 for events happening all over the
globe;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="strategy-2-local-server"&gt;
&lt;h2&gt;Strategy #2: local server&lt;/h2&gt;
&lt;p&gt;A variant of the first one, a server is deployed locally. A local wifi can
be setup in case Internet is not available.&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/subtivals-remote-localserver.png" style="width: 500px;" /&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It does not rely on Internet, and can be fully autonomous on site;&lt;/li&gt;
&lt;li&gt;The server and client code can be a lot simpler, since the pairing of Subtivals
with the clients is done locally only;&lt;/li&gt;
&lt;li&gt;Operators are responsible for their installation, no alert email for us
at 2AM in July;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It will remain an obscure feature for most Subtivals users;&lt;/li&gt;
&lt;li&gt;It requires some networking skills to wire-up the whole installation;&lt;/li&gt;
&lt;li&gt;This may imply packaging of Web server stacks for Windows and Mac OS X,
which is truely not one of my passions;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="strategy-3-subtivals-as-server"&gt;
&lt;h2&gt;Strategy #3: Subtivals as server&lt;/h2&gt;
&lt;p&gt;We get rid of the local Web server, and the Subtivals software itself acts as
a server, pushing subtitles itself to the audience.&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/subtivals-remote-localwifi.png" style="width: 500px;" /&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Nothing extra to be installed, just networking/firewall setup;&lt;/li&gt;
&lt;li&gt;It paves the way to the implementation of a Subtivals &lt;a class="reference external" href="https://github.com/traxtech/subtivals/issues/145"&gt;remote control&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;The operator can track the number of spectators;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It could affect Subtivals stability;&lt;/li&gt;
&lt;li&gt;The code base would grow;&lt;/li&gt;
&lt;li&gt;I expect to receive emails complaining about the application not being
reachable, all because of firewall setup etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We might go for the second strategy at first. We will provide some assistance
to the festival organizers for setting up the stack. It will allow us to get started
with a very small effort on the code implementation.&lt;/p&gt;
&lt;p&gt;Later, we can undertake the first strategy. By the way, if someone is interested
in implementing and running such a Web service 24/7, charging users or not,
please contact me :)&lt;/p&gt;
&lt;p&gt;The third strategy scares me, but the remote control idea is awesome! It means
that an operator could control the subtitles projection from her smartphone,
seating among the audience instead of from the booth!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="subtivals"></category><category term="subtitles"></category><category term="accessibility"></category><category term="qt"></category><category term="websockets"></category></entry><entry><title>Use Docker to ease database schema migrations</title><link href="https://blog.mathieu-leplatre.info/use-docker-to-ease-database-schema-migrations.html" rel="alternate"></link><published>2014-11-06T00:00:00+01:00</published><updated>2014-11-06T00:00:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2014-11-06:/use-docker-to-ease-database-schema-migrations.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.docker.com/"&gt;Docker&lt;/a&gt; is very versatile, and can fulfill many (&lt;em&gt;many&lt;/em&gt;) different
use-cases. You've probably heard of it to put applications in production.&lt;/p&gt;
&lt;p&gt;Even though I wrote quite a few &lt;em&gt;Dockerfiles&lt;/em&gt; to package and ship Web apps,
what has convinced me most is running database backends during development :)&lt;/p&gt;
&lt;p&gt;For example, when you ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.docker.com/"&gt;Docker&lt;/a&gt; is very versatile, and can fulfill many (&lt;em&gt;many&lt;/em&gt;) different
use-cases. You've probably heard of it to put applications in production.&lt;/p&gt;
&lt;p&gt;Even though I wrote quite a few &lt;em&gt;Dockerfiles&lt;/em&gt; to package and ship Web apps,
what has convinced me most is running database backends during development :)&lt;/p&gt;
&lt;p&gt;For example, when you work with relational databases, and develop features in different
branches, it can be very painful to reset your divergent schemas each time you switch branch.
(&lt;em&gt;like with Django South, or 1.7&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Likewise, if you want to replay data imports, migrations, on different database schemas,
or with various PostgreSQL versions etc.&lt;/p&gt;
&lt;p&gt;In this article, I will show how to use the &lt;tt class="docutils literal"&gt;commit&lt;/tt&gt; feature of &lt;em&gt;Docker&lt;/em&gt; to
solve these issues.&lt;/p&gt;
&lt;div class="section" id="run-postgresql-in-docker"&gt;
&lt;h2&gt;Run PostgreSQL in Docker&lt;/h2&gt;
&lt;p&gt;First, you should choose an image in the &lt;a class="reference external" href="https://registry.hub.docker.com/"&gt;Docker index&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you've chosen the one that fits your needs, pull an image is as easy as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;pull&lt;span class="w"&gt; &lt;/span&gt;helmi03/docker-postgis
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you can run it as a deamon, on &lt;tt class="docutils literal"&gt;localhost:5432&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5432&lt;/span&gt;:5432&lt;span class="w"&gt; &lt;/span&gt;helmi03/docker-postgis
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Congratulations, you have a PostGIS container running. Log-in as superuser with &lt;em&gt;docker/docker&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You can see its identifier with &lt;tt class="docutils literal"&gt;sudo docker ps&lt;/tt&gt;, and stop it using &lt;tt class="docutils literal"&gt;sudo docker stop &amp;lt;ID&amp;gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="commit"&gt;
&lt;h2&gt;Commit&lt;/h2&gt;
&lt;p&gt;The killer feature of &lt;em&gt;Docker&lt;/em&gt; is its incremental filesystem, which allows to
tag and commit the states of containers.&lt;/p&gt;
&lt;p&gt;For example, once you've created an empty database in your container, you will
save its state :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;ID&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;postgis-empty
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, for example, you will initialize your database tables for one of your applications,
create users, etc. You commit !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;ID&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;geotrek-0.28-empty
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Loaded data into the database ? Commit !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;ID&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;geotrek-0.28-demo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, that you've performed a series of commits, you can stop and re-run the container
at a previous state! &lt;em&gt;Docker&lt;/em&gt; is the git of virtual machines!&lt;/p&gt;
&lt;p&gt;See the list of your tags with &lt;tt class="docutils literal"&gt;sudo docker images&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;images
REPOSITORY&lt;span class="w"&gt;                    &lt;/span&gt;TAG&lt;span class="w"&gt;        &lt;/span&gt;IMAGE&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="w"&gt;        &lt;/span&gt;CREATED&lt;span class="w"&gt;        &lt;/span&gt;VIRTUAL&lt;span class="w"&gt; &lt;/span&gt;SIZE
geotrek-0.28-demo&lt;span class="w"&gt;             &lt;/span&gt;latest&lt;span class="w"&gt;     &lt;/span&gt;48f51d78273a&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;weeks&lt;span class="w"&gt; &lt;/span&gt;ago&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.236&lt;span class="w"&gt; &lt;/span&gt;GB
geotrek-0.28-empty&lt;span class="w"&gt;            &lt;/span&gt;latest&lt;span class="w"&gt;     &lt;/span&gt;3985183cd01a&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;weeks&lt;span class="w"&gt; &lt;/span&gt;ago&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.208&lt;span class="w"&gt; &lt;/span&gt;GB
postgis-empty&lt;span class="w"&gt;                 &lt;/span&gt;latest&lt;span class="w"&gt;     &lt;/span&gt;24ec864dc058&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;months&lt;span class="w"&gt; &lt;/span&gt;ago&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;844&lt;/span&gt;.4&lt;span class="w"&gt; &lt;/span&gt;MB
helmi03/docker-postgis&lt;span class="w"&gt;        &lt;/span&gt;latest&lt;span class="w"&gt;     &lt;/span&gt;f62d8f0fb8af&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;months&lt;span class="w"&gt; &lt;/span&gt;ago&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;746&lt;/span&gt;.2&lt;span class="w"&gt; &lt;/span&gt;MB
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="checkout"&gt;
&lt;h2&gt;Checkout&lt;/h2&gt;
&lt;p&gt;Checkout a previous state is very simple, it's like the first time you started
the image from Docker index, except that you now specify the name of your tag!&lt;/p&gt;
&lt;p&gt;First, stop the current instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;ps
CONTAINER&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="w"&gt;        &lt;/span&gt;IMAGE&lt;span class="w"&gt;                      &lt;/span&gt;COMMAND&lt;span class="w"&gt;       &lt;/span&gt;CREATED&lt;span class="w"&gt;       &lt;/span&gt;STATUS&lt;span class="w"&gt;      &lt;/span&gt;PORTS
7e1e44ce36d8&lt;span class="w"&gt;        &lt;/span&gt;geotrek-0.28-demo:latest&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/start.sh&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;hours&lt;span class="w"&gt; &lt;/span&gt;ago&lt;span class="w"&gt;   &lt;/span&gt;Up&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;hours&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:5432-&amp;gt;5432/tcp

$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;stop&lt;span class="w"&gt; &lt;/span&gt;7e1e44ce36d8
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Re-run at a previous state:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5432&lt;/span&gt;:5432&lt;span class="w"&gt; &lt;/span&gt;postgis-empty
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will quickly figure out that you can:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Run different versions of your containers (or PostgreSQL servers) on different ports&lt;/li&gt;
&lt;li&gt;Restore the state of your database for your &lt;em&gt;master&lt;/em&gt; branch at one fell swoop!&lt;/li&gt;
&lt;li&gt;Replay migrations scripts&lt;/li&gt;
&lt;li&gt;Run your application on customer database with no configuration change&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;li&gt;Have the same approach with &lt;em&gt;CouchDB&lt;/em&gt;, &lt;em&gt;Redis&lt;/em&gt;, &lt;em&gt;ElasticSearch&lt;/em&gt;, ...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To be honest, it's like git, it changed my way of working and I can't go
without it anymore...&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="django"></category><category term="git"></category><category term="tips"></category><category term="docker"></category></entry><entry><title>Good practices for Open Source projects</title><link href="https://blog.mathieu-leplatre.info/good-practices-for-open-source-projects.html" rel="alternate"></link><published>2014-08-19T00:00:00+02:00</published><updated>2014-08-19T00:00:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2014-08-19:/good-practices-for-open-source-projects.html</id><summary type="html">&lt;p&gt;In this article, I gathered some good practices for open source projects.&lt;/p&gt;
&lt;p&gt;I made my best to keep it short and not too verbose. If you want to discuss,
contribute or enhance this article, &lt;a class="reference external" href="https://github.com/leplatrem/blog.mathieu-leplatre.info/blob/master/content/Dev/opensource_project_good_practices.rst"&gt;simply use Github&lt;/a&gt; !&lt;/p&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A README file is the bare minimum&lt;/li&gt;
&lt;li&gt;More documentation content is to ‚Ä¶&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;In this article, I gathered some good practices for open source projects.&lt;/p&gt;
&lt;p&gt;I made my best to keep it short and not too verbose. If you want to discuss,
contribute or enhance this article, &lt;a class="reference external" href="https://github.com/leplatrem/blog.mathieu-leplatre.info/blob/master/content/Dev/opensource_project_good_practices.rst"&gt;simply use Github&lt;/a&gt; !&lt;/p&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A README file is the bare minimum&lt;/li&gt;
&lt;li&gt;More documentation content is to be stored in a &lt;tt class="docutils literal"&gt;docs/&lt;/tt&gt; folder&lt;/li&gt;
&lt;li&gt;Use the fabulous &lt;a class="reference external" href="http://rtfd.org"&gt;Read the Docs&lt;/a&gt; service&lt;/li&gt;
&lt;li&gt;Mention the license and copyright holder&lt;/li&gt;
&lt;li&gt;Explain &lt;strong&gt;why&lt;/strong&gt; this project was created&lt;/li&gt;
&lt;li&gt;Mention existing related projects&lt;/li&gt;
&lt;li&gt;How to &lt;strong&gt;install&lt;/strong&gt; and &lt;strong&gt;use&lt;/strong&gt; it ?&lt;/li&gt;
&lt;li&gt;Frequently asked questions (&lt;em&gt;time saver&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Link to the list of contributors&lt;/li&gt;
&lt;li&gt;Provide details about design and architecture&lt;/li&gt;
&lt;li&gt;Give instructions to developers on how to contribute&lt;/li&gt;
&lt;li&gt;Mention what you expect from contributors (&lt;em&gt;Definition-of-Done, checklist,
conventions...&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="source-code"&gt;
&lt;h2&gt;Source code&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use &lt;strong&gt;English&lt;/strong&gt; everywhere&lt;/li&gt;
&lt;li&gt;Use a decentralized versioning system (&lt;em&gt;Git&lt;/em&gt;, &lt;em&gt;mercurial&lt;/em&gt;, ...)&lt;/li&gt;
&lt;li&gt;Unit test your code. &lt;em&gt;Software without tests is broken by design&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Setup continuous integration (with &lt;a class="reference external" href="http://travis-ci.org"&gt;TravisCI&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Follow the programming language conventions (&lt;a class="reference external" href="https://flake8.readthedocs.org"&gt;PEP8&lt;/a&gt;, &lt;a class="reference external" href="http://www.jslint.com"&gt;JSLint&lt;/a&gt;, ...)&lt;/li&gt;
&lt;li&gt;Follow the framework conventions, and list explicitly the infringements you
decided to make in the documentation&lt;/li&gt;
&lt;li&gt;Be a professional coder, by following &lt;a class="reference external" href="http://www.amazon.com/The-Clean-Coder-Professional-Programmers/dp/0137081073"&gt;Uncle Bob recommendations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use a translation system, like &lt;em&gt;gettext&lt;/em&gt;, and keep English as the default language&lt;/li&gt;
&lt;li&gt;Enable collaborative translation of your app with &lt;a class="reference external" href="https://www.transifex.com"&gt;Transifex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Provide simple commands to install or run tests (in a &lt;em&gt;Makefile&lt;/em&gt; for example)&lt;/li&gt;
&lt;li&gt;Test your project features (&lt;em&gt;functional tests&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Make sure the tests self-describe your project specifications&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="releases"&gt;
&lt;h2&gt;Releases&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use semantic versionning (&lt;em&gt;main version, features change, bug fixes&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Keep a list of changes by version (&lt;em&gt;Changelog&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Follow some workflow for your changelog (Include it in docs, update it in the merge commit of pull-requests, &lt;a class="reference external" href="http://tech.novapost.fr/changelog-howto-en.html"&gt;read more recommendations&lt;/a&gt;...)&lt;/li&gt;
&lt;li&gt;Create a tag for each release (&lt;tt class="docutils literal"&gt;vX.Y.Z&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Create a branch for each version (&lt;a class="reference external" href="http://fle.github.io/an-efficient-git-workflow-for-midlong-term-projects.html"&gt;recommended workflow&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Publish your release (&lt;em&gt;backup copy&lt;/em&gt;) in a repository (&lt;a class="reference external" href="https://pypi.python.org"&gt;PyPi&lt;/a&gt;, &lt;a class="reference external" href="https://www.npmjs.org"&gt;NPM&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Automate your release process (&lt;em&gt;Makefile&lt;/em&gt;, &lt;a class="reference external" href="http://zestreleaser.readthedocs.org"&gt;Zest releaser&lt;/a&gt;, &lt;a class="reference external" href="https://www.npmjs.org"&gt;npm&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Release often, release early&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Communicate about new versions (&lt;em&gt;tweet&lt;/em&gt;, &lt;a class="reference external" href="https://www.openhub.net"&gt;OpenHub&lt;/a&gt;, &lt;a class="reference external" href="http://freecode.com"&gt;Freecode&lt;/a&gt;, ...)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="community"&gt;
&lt;h2&gt;Community&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Make sure users can interact somewhere about your project (&lt;a class="reference external" href="https://www.uservoice.com"&gt;UserVoice&lt;/a&gt;, &lt;em&gt;Google groups&lt;/em&gt;, ...)&lt;/li&gt;
&lt;li&gt;Setup alerts on &lt;a class="reference external" href="http://stackoverflow.com"&gt;Stackoverflow&lt;/a&gt; to help users and promote your project&lt;/li&gt;
&lt;li&gt;Make your best to find at least one valuable contributor, and give him
permissions on the repository&lt;/li&gt;
&lt;li&gt;Be clear about the project &lt;em&gt;functional perimeter&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Reject every addition of feature that introduces complexity or twists the project
main use cases&lt;/li&gt;
&lt;li&gt;Look for a successor as soon as the motivation goes down&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="history"&gt;
&lt;h2&gt;History&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;History of commits is as valuable as comments in the source code&lt;/li&gt;
&lt;li&gt;Mention the ticket number in the commit messages (e.g. &lt;tt class="docutils literal"&gt;Update specs (ref #123)&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Respect the commits messages formatting of your community (e.g. Drupal's prefixes like &lt;tt class="docutils literal"&gt;CHG&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DOC&lt;/tt&gt;...)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="workflow"&gt;
&lt;h3&gt;Workflow&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Keep the &lt;em&gt;master&lt;/em&gt; branch stable&lt;/li&gt;
&lt;li&gt;Create a dedicated branch with an explicit name for each feature (e.g. &lt;tt class="docutils literal"&gt;187_add_drop_down_menu&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Use pull-requests&lt;/li&gt;
&lt;li&gt;Even if you are the owner, and alone in your project, use pull-requests (&lt;em&gt;allows code review, triggers integration tests, history is clearer, ...&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Ideally, who merges the pull-request is not its author&lt;/li&gt;
&lt;li&gt;Ideally merge branches with the no fast-forward option (&lt;tt class="docutils literal"&gt;git merge &lt;span class="pre"&gt;--no-ff&lt;/span&gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Create a &lt;em&gt;develop&lt;/em&gt; branch in case of major refactoring, or follow a proper &lt;em&gt;Git workflow&lt;/em&gt;
to ease merging&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="github"&gt;
&lt;h2&gt;Github&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use Github&lt;/li&gt;
&lt;li&gt;Use Github issues (&lt;em&gt;as much as you can, for everything&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Even if you are alone, use Github issues as a TODO list&lt;/li&gt;
&lt;li&gt;Create some standard labels (&lt;em&gt;help-needed&lt;/em&gt;, &lt;em&gt;docs&lt;/em&gt;, &lt;em&gt;duplicate&lt;/em&gt; ...)&lt;/li&gt;
&lt;li&gt;Use the fantastic &lt;a class="reference external" href="https://github.com/blog/1375%0A-task-lists-in-gfm-issues-pulls-comments"&gt;checklists&lt;/a&gt; feature in issues and pull-requests descriptions&lt;/li&gt;
&lt;li&gt;Take advantage of the milestones, for the next version, or for a general roadmap (e.g. &lt;em&gt;Soon&lt;/em&gt;, &lt;em&gt;Later&lt;/em&gt;, &lt;em&gt;Final 1.0&lt;/em&gt;, ...)&lt;/li&gt;
&lt;li&gt;Categorize the labels, renaming them with a convention (e.g. &lt;em&gt;priority: low&lt;/em&gt;, &lt;em&gt;priority: high&lt;/em&gt;, ...)&lt;/li&gt;
&lt;li&gt;Copy the changelog parts into the dedicated releases page&lt;/li&gt;
&lt;li&gt;Use the &lt;a class="reference external" href="https://github.com/blog/1184-contributing-guidelines"&gt;contributing&lt;/a&gt; feature&lt;/li&gt;
&lt;li&gt;Use the &lt;a class="reference external" href="https://pages.github.com"&gt;gh-pages&lt;/a&gt; feature to demo your project&lt;/li&gt;
&lt;li&gt;Configure the main branch in the settings&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="opensource"></category><category term="github"></category><category term="git"></category></entry><entry><title>Edit Django geometries fields with Leaflet</title><link href="https://blog.mathieu-leplatre.info/edit-django-geometries-fields-with-leaflet.html" rel="alternate"></link><published>2014-03-26T00:00:00+01:00</published><updated>2014-03-26T00:00:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2014-03-26:/edit-django-geometries-fields-with-leaflet.html</id><summary type="html">&lt;p&gt;After the &lt;a class="reference external" href="https://blog.mathieu-leplatre.info/geodjango-maps-with-leaflet.html"&gt;previous article&lt;/a&gt;
regarding Django, Leaflet and GeoJSON, I wanted to highlight
the simplicity of GeoDjango geometries creation and edition with &lt;a class="reference external" href="https://github.com/makinacorpus/django-leaflet"&gt;django-leaflet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It relies on &lt;a class="reference external" href="https://github.com/Leaflet/Leaflet.draw"&gt;Leaflet.draw&lt;/a&gt; for user interactions.&lt;/p&gt;
&lt;img alt="" src="/images/leaflet-form-widget.png" /&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;
&lt;col class="field-name" /&gt;
&lt;col class="field-body" /&gt;
&lt;tbody valign="top"&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;note:&lt;/th&gt;&lt;td class="field-body"&gt;Until recently, it was restricted to Django 1.6+, but &lt;a class="reference external" href="https://github.com/makinacorpus/django-leaflet/pull/63"&gt;Ga√´l contributed&lt;/a&gt;
a backport that allows Django 1 ‚Ä¶&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;p&gt;After the &lt;a class="reference external" href="https://blog.mathieu-leplatre.info/geodjango-maps-with-leaflet.html"&gt;previous article&lt;/a&gt;
regarding Django, Leaflet and GeoJSON, I wanted to highlight
the simplicity of GeoDjango geometries creation and edition with &lt;a class="reference external" href="https://github.com/makinacorpus/django-leaflet"&gt;django-leaflet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It relies on &lt;a class="reference external" href="https://github.com/Leaflet/Leaflet.draw"&gt;Leaflet.draw&lt;/a&gt; for user interactions.&lt;/p&gt;
&lt;img alt="" src="/images/leaflet-form-widget.png" /&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;
&lt;col class="field-name" /&gt;
&lt;col class="field-body" /&gt;
&lt;tbody valign="top"&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;note:&lt;/th&gt;&lt;td class="field-body"&gt;Until recently, it was restricted to Django 1.6+, but &lt;a class="reference external" href="https://github.com/makinacorpus/django-leaflet/pull/63"&gt;Ga√´l contributed&lt;/a&gt;
a backport that allows Django 1.4.2+ users to have them too !&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="section" id="in-django-adminsite"&gt;
&lt;h2&gt;In Django Adminsite&lt;/h2&gt;
&lt;div class="section" id="given-a-geodjango-model-as-usual"&gt;
&lt;h3&gt;Given a GeoDjango model as usual&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.gis.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;gismodels&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MushroomSpot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gismodels&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;geom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gismodels&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PolygonField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gismodels&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GeoManager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="register-using-leaflet-geoadmin"&gt;
&lt;h3&gt;Register using Leaflet GeoAdmin&lt;/h3&gt;
&lt;p&gt;It's as simple as :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;leaflet.admin&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LeafletGeoAdmin&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MushroomSpot&lt;/span&gt;


&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MushroomSpot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LeafletGeoAdmin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="in-forms-views"&gt;
&lt;h2&gt;In forms views&lt;/h2&gt;
&lt;div class="section" id="edition-view-usign-class-based-view"&gt;
&lt;h3&gt;Edition view usign Class-Based View&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UpdateView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;leaflet.forms.widgets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LeafletWidget&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MushroomSpot&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MushroomSpotForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MushroomSpot&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;geom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;widgets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;geom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;LeafletWidget&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EditMushroomSpot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UpdateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MushroomSpot&lt;/span&gt;
    &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MushroomSpotForm&lt;/span&gt;
    &lt;span class="n"&gt;template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;form.html&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="form-template-with-leaflet-tags"&gt;
&lt;h3&gt;Form template with Leaflet tags&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% load leaflet_tags %}
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    {% leaflet_js plugins=&amp;quot;forms&amp;quot; %}
    {% leaflet_css plugins=&amp;quot;forms&amp;quot; %}
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Edit {{ object }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        {{ form }}
        {% csrf_token %}
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="going-further"&gt;
&lt;h2&gt;Going further...&lt;/h2&gt;
&lt;p&gt;The Django form widget has &lt;a class="reference external" href="https://github.com/makinacorpus/django-leaflet/blob/master/leaflet/forms/widgets.py"&gt;a couple of options&lt;/a&gt;, that can tweak some aspects of
the map (size, read-only, ...).&lt;/p&gt;
&lt;p&gt;But some advanced usage might require specific interactions or behaviour, beyond
Django &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.6/ref/forms/fields/#creating-custom-fields"&gt;field&lt;/a&gt; and &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.6/ref/forms/widgets/#base-widget-classes"&gt;widgets&lt;/a&gt; customizations.&lt;/p&gt;
&lt;div class="section" id="custom-field-javascript-component"&gt;
&lt;h3&gt;Custom field JavaScript component&lt;/h3&gt;
&lt;p&gt;The frontend field component behaviour and initialization is also pluggable, and
can be used to add extra controls, layers or whatever.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Custom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GeometryField&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GeometryField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;addTo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GeometryField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addTo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;filecontrol&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filecontrol&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fileLayerLoad&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filecontrol&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomLeafletWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LeafletWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;geometry_field_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Custom.GeometryField&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="custom-de-serialization-of-form-field-value"&gt;
&lt;h3&gt;Custom de/serialization of form field value&lt;/h3&gt;
&lt;p&gt;The Javascript component for de/serializing fields value is pluggable, can be used to override
the way the geometries are sent to the form.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Custom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FieldStore&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FieldStore&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;formfield&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;latlngs&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getLatLngs&lt;/span&gt;&lt;span class="p"&gt;()};&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomLeafletWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LeafletWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;field_store_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Custom.FieldStore&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="help-us-improve-django-leaflet"&gt;
&lt;h2&gt;Help us improve django-leaflet !&lt;/h2&gt;
&lt;p&gt;We built &lt;em&gt;django-leaflet&lt;/em&gt; at &lt;a class="reference external" href="http://makinacorpus.com"&gt;Makina Corpus&lt;/a&gt;
for some our Webmapping projects. It is used in production and gives
us satisfaction in most use-cases.&lt;/p&gt;
&lt;p&gt;If our initial design does not match your needs, please tell us what you
think !&lt;/p&gt;
&lt;p&gt;For example, personnally, I would like to remove the &lt;cite&gt;&amp;lt;script&amp;gt;&lt;/cite&gt; tag in the &lt;a class="reference external" href="https://github.com/makinacorpus/django-leaflet/blob/0.13.0/leaflet/templates/leaflet/_leaflet_map.html"&gt;map template&lt;/a&gt;, and pass configuration entries through the DOM instead...&lt;/p&gt;
&lt;p&gt;...your turn !&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="django"></category><category term="leaflet"></category><category term="gis"></category><category term="geojson"></category></entry><entry><title>Releasing software ideas</title><link href="https://blog.mathieu-leplatre.info/releasing-software-ideas.html" rel="alternate"></link><published>2014-02-17T21:25:00+01:00</published><updated>2014-02-17T21:25:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2014-02-17:/releasing-software-ideas.html</id><summary type="html">&lt;p&gt;A couple of weeks ago, I had a very interesting reading :
&lt;a class="reference external" href="http://danielsolisblog.blogspot.fr/2013/07/what-if-someone-steals-your-idea.html"&gt;What if someone steals your idea ?&lt;/a&gt; (translated into French &lt;a class="reference external" href="http://www.framablog.org/index.php/post/2013/08/29/voler-votre-idee"&gt;by Framasoft&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The author states that his boardgame concepts take a lot of value from development, time and efforts,
and very few from the original idea itself.&lt;/p&gt;
&lt;p&gt;The parallel with ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;A couple of weeks ago, I had a very interesting reading :
&lt;a class="reference external" href="http://danielsolisblog.blogspot.fr/2013/07/what-if-someone-steals-your-idea.html"&gt;What if someone steals your idea ?&lt;/a&gt; (translated into French &lt;a class="reference external" href="http://www.framablog.org/index.php/post/2013/08/29/voler-votre-idee"&gt;by Framasoft&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The author states that his boardgame concepts take a lot of value from development, time and efforts,
and very few from the original idea itself.&lt;/p&gt;
&lt;p&gt;The parallel with software is quite obvious: we can still share our software ideas and concepts,
a lot of time is yet to be invested before they become a usable product, with an identity, a user
community...&lt;/p&gt;
&lt;p&gt;Having the ambition to implement all ideas that come into our floroushing minds can be a serious curse!
A more reasonnable attitude would be to stay focused and share the ideas left over! Hence this post...&lt;/p&gt;
&lt;img alt="Overbooking, by Xavi Puigg" src="/images/overbooking.jpg" /&gt;
&lt;div class="section" id="stay-focused"&gt;
&lt;h2&gt;Stay focused&lt;/h2&gt;
&lt;p&gt;This year I would like to focus on two personal projects: &lt;a class="reference external" href="http://subtivals.org"&gt;Subtivals&lt;/a&gt; and
&lt;a class="reference external" href="https://github.com/spiral-project/daybed"&gt;Daybed&lt;/a&gt;. and I promise myself that I won't invest time on all scatterbrained software ideas that may pop around my head!&lt;/p&gt;
&lt;div class="section" id="subtivals-1"&gt;
&lt;h3&gt;Subtivals&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Subtivals&lt;/em&gt; was born from an actual need : to project subtitles during film festivals. It has a very
small user community, so called a &lt;em&gt;niche&lt;/em&gt;, but from all over the world !&lt;/p&gt;
&lt;p&gt;We receive feedback, questions and orders quite often, which maintains a level
of motivation above the average :)&lt;/p&gt;
&lt;p&gt;The code is clean, and the application very robust. I enjoy coding with Qt and C++!
Moreover most ideas can be crash-tested by real users on the field without too
much pressure :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="daybed-1"&gt;
&lt;h3&gt;Daybed&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Daybed&lt;/em&gt; is a lot more abstract and subject to competition: it's a Web API
that brings database as-a-service. You define your data models, and a REST API
comes into life automatically, for validation and storage.&lt;/p&gt;
&lt;p&gt;It covers a very wide range of potential use-cases (like many &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Rapid_application_development"&gt;Rapid Application Development&lt;/a&gt; tools by the way...), which
makes it hard to build its identity, and thus its community!&lt;/p&gt;
&lt;p&gt;We made a great progress on the API lately, and there will be a Daybed 1.0 very soon!
But we have to provide a lot of &lt;em&gt;cool-stuff-ization&lt;/em&gt; efforts, with small demos
and slick documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="software-ideas-for-free"&gt;
&lt;h2&gt;Software ideas for free !&lt;/h2&gt;
&lt;p&gt;After the reading of Daniel Solis' article, I thought it would be fun
to share some ideas and concepts that crossed my mind.&lt;/p&gt;
&lt;p&gt;But when I read at Jeff Knupp that there were, on Earth, &lt;a class="reference external" href="http://www.jeffknupp.com/blog/2014/01/28/need-a-project-idea-scratch-your-own-itch/"&gt;¬´ people who can't think of a good project idea ¬ª&lt;/a&gt;, I thought it was a serious waste to keep them for me!&lt;/p&gt;
&lt;img alt="Share your ideas, by nan palmero" src="/images/share_ideas.jpg" /&gt;
&lt;p&gt;The following ideas were collected on my notepad along the previous months. Some of them are
quite old, some them may be really bad, others quite awesome, some of them
are easy to implement, others aren't at all.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A social directory of community-supported farms, where users can compare
deliveries, by season, by region, with pictures and rating ;&lt;/li&gt;
&lt;li&gt;A portal for community-supported farms to organize their production and
relationships with members ;&lt;/li&gt;
&lt;li&gt;An open database of relationships between politicians and corporations ;&lt;/li&gt;
&lt;li&gt;A map of bars and restaurants with sunny terraces, by hour, by city ;&lt;/li&gt;
&lt;li&gt;A map of places where bikes were stolen ;&lt;/li&gt;
&lt;li&gt;A tool to compute dates of planet alignments ;&lt;/li&gt;
&lt;li&gt;A simple, pop-up-less, map bounding box and coordinates converter tool ;&lt;/li&gt;
&lt;li&gt;A tool to find the best place to meet for a group of friends at different locations,
so that each of them has the same (walking|driving|flight) distance &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt; ;&lt;/li&gt;
&lt;li&gt;A self-hosted application to manage wishlists, with ability to
secretly mark stuff as picked or organize shared budget &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt; ;&lt;/li&gt;
&lt;li&gt;&lt;span class="strike"&gt;An equivalent of Pelican for photos galleries&lt;/span&gt; &lt;a class="reference external" href="http://sigal.saimon.org/"&gt;Sigal, by Saimon&lt;/a&gt; !
It takes a folder with pictures, and generates a static page with &lt;a class="reference external" href="http://galleria.io/"&gt;galleria.js&lt;/a&gt; ;&lt;/li&gt;
&lt;li&gt;&lt;span class="strike"&gt;Manual activities search by &amp;quot;ingredient&amp;quot;&lt;/span&gt; &lt;a class="reference external" href="http://instructables.com"&gt;instructables.com&lt;/a&gt; &lt;a class="footnote-reference" href="#footnote-3" id="footnote-reference-3"&gt;[3]&lt;/a&gt; :
I have some clips, a plastic bottle and a match box, tell me what I can build with that for my kids ;&lt;/li&gt;
&lt;li&gt;A directory of pictures of food factories buildings ;&lt;/li&gt;
&lt;li&gt;A collaborative interactive timeline with maps to visualize movement, spread, empires... ;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Digital cinema&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A GUI to edit DCP files, edit projection dates, add subtitles etc. I began to write &lt;a class="reference external" href="https://docs.google.com/document/d/1FVUw70wpLwOp8xj6Uok8WAWah4V1KxYxan7OKHHGPUk/edit?usp=sharing"&gt;some specs for this&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;A GUI to easily generate KDM certificates, I also &lt;a class="reference external" href="https://docs.google.com/document/d/1XVqpMmwwGuGaCmN_odJmRHihr4aEuwhbXe0r_7D7eEI/edit?usp=sharing"&gt;wrote some specs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tech stuff&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;GeoJSON model fields in Django in order to get rid of GIS stack for simple stuff ;&lt;/li&gt;
&lt;li&gt;A SVG template engine, with specific tags for tables, vertical distributions, sub-templates...
(&lt;em&gt;I made one in PHP almost ten years ago...&lt;/em&gt;) ;&lt;/li&gt;
&lt;li&gt;System integration monitoring : draw your instances and their relationships, add stupid
sensors on them that keep you informed of broken links or streams ;&lt;/li&gt;
&lt;li&gt;Django SQL template, in order to load SQL commands with table and field names substituted
from your models ;&lt;/li&gt;
&lt;li&gt;A Web API on PostGIS for GeoJSON &amp;quot;data clips&amp;quot; : it lists all tables and views with geometries,
and let you obtain GeoJSON using simple query parameters ;&lt;/li&gt;
&lt;li&gt;A Leaflet plugin that takes a trajectory and a speed, and fires the ongoing position at a determined
frequency ;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Daybed apps&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some stuff that can easily be built with &lt;em&gt;Daybed&lt;/em&gt; :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A Web forms service (&lt;em&gt;Google Forms&lt;/em&gt;) ;&lt;/li&gt;
&lt;li&gt;A remote storage for JavaScript or mobile applications ;&lt;/li&gt;
&lt;li&gt;A lightweight alternative to &lt;em&gt;FormHub&lt;/em&gt;, &lt;em&gt;ODK aggregate&lt;/em&gt; or &lt;em&gt;Enketo&lt;/em&gt; ;&lt;/li&gt;
&lt;li&gt;A JavaScript CMS where users can define their content types and forms ;&lt;/li&gt;
&lt;li&gt;A mobile application builder ;&lt;/li&gt;
&lt;li&gt;A data wiki or pad ;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;li&gt;Daybed mobile app in Qt, equivalent of &lt;em&gt;ODKCollect&lt;/em&gt; for Daybed ;&lt;/li&gt;
&lt;li&gt;Daybed plugged into &lt;em&gt;geojson.io&lt;/em&gt;, instead of using Github gist for storage ;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="your-turn"&gt;
&lt;h3&gt;Your turn...&lt;/h3&gt;
&lt;p&gt;Now that I shared them, they are not mine anymore, take them if you like!&lt;/p&gt;
&lt;p&gt;Many things can happen now :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You will let them rot in the forgotten Web ;&lt;/li&gt;
&lt;li&gt;You will show me how bad they were ;&lt;/li&gt;
&lt;li&gt;You will point out existing projects ;&lt;/li&gt;
&lt;li&gt;You will ask me details ;&lt;/li&gt;
&lt;li&gt;You will implement an idea and share the code ;&lt;/li&gt;
&lt;li&gt;You will start a company, raise money and build an empire (&lt;em&gt;I wouldn't have anyway&lt;/em&gt;) ;&lt;/li&gt;
&lt;li&gt;You will sue me for &lt;a class="reference external" href="http://lanyrd.com/2012/dotjs/scbgdz/"&gt;your new puppy to have ruined your life&lt;/a&gt; :)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Update&lt;/strong&gt;: You will propose &lt;a class="reference external" href="https://twitter.com/daks_/status/435893872514695168"&gt;more ideas&lt;/a&gt; on twitter :)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Meanwhile, they'll disappear from my notebook and its underlying &lt;em&gt;todo list&lt;/em&gt;,
they won't haunt me anymore, I will be at peace.&lt;/p&gt;
&lt;img alt="Kid schedulem by Carissa GoodNCrazy" src="/images/kid_schedule.jpg" /&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Not the UI of the year but &lt;a class="reference external" href="http://www.mezzoman.com"&gt;http://www.mezzoman.com&lt;/a&gt; looks like a candidate&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;For example, like &lt;a class="reference external" href="http://mygiftslist.be"&gt;http://mygiftslist.be&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Merci &lt;a class="reference external" href="https://twitter.com/simongeorges/status/435807135302053889"&gt;Simon&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="daybed"></category><category term="subtivals"></category><category term="opensource"></category></entry><entry><title>Django : Create a QuerySet from a list, preserving order</title><link href="https://blog.mathieu-leplatre.info/django-create-a-queryset-from-a-list-preserving-order.html" rel="alternate"></link><published>2013-11-08T00:00:00+01:00</published><updated>2013-11-08T00:00:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2013-11-08:/django-create-a-queryset-from-a-list-preserving-order.html</id><summary type="html">&lt;p&gt;I thought it would be an easy one, but found myself lost with 34 opened tabs
on &lt;em&gt;stackoverflow&lt;/em&gt;...&lt;/p&gt;
&lt;div class="section" id="the-problem-keep-it-ordered"&gt;
&lt;h2&gt;The problem : keep it ordered&lt;/h2&gt;
&lt;p&gt;Usually, obtaining a &lt;tt class="docutils literal"&gt;QuerySet&lt;/tt&gt; from a list is quite simple :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;queryset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Theme.objects.filter&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;pk__in&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;type&lt;span class="o"&gt;(&lt;/span&gt;queryset&lt;span class="o"&gt;)&lt;/span&gt;
&amp;lt;class&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;django.db.models.query.QuerySet&amp;#39;&lt;/span&gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;queryset ‚Ä¶&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I thought it would be an easy one, but found myself lost with 34 opened tabs
on &lt;em&gt;stackoverflow&lt;/em&gt;...&lt;/p&gt;
&lt;div class="section" id="the-problem-keep-it-ordered"&gt;
&lt;h2&gt;The problem : keep it ordered&lt;/h2&gt;
&lt;p&gt;Usually, obtaining a &lt;tt class="docutils literal"&gt;QuerySet&lt;/tt&gt; from a list is quite simple :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;queryset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Theme.objects.filter&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;pk__in&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;type&lt;span class="o"&gt;(&lt;/span&gt;queryset&lt;span class="o"&gt;)&lt;/span&gt;
&amp;lt;class&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;django.db.models.query.QuerySet&amp;#39;&lt;/span&gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;queryset
&lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;Theme:&lt;span class="w"&gt; &lt;/span&gt;Fauna&amp;gt;,&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;Theme:&lt;span class="w"&gt; &lt;/span&gt;Flora&amp;gt;,&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;Theme:&lt;span class="w"&gt; &lt;/span&gt;Refuge&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The problem is that the list order is ignored :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;Theme.objects.filter&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;pk__in&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;Theme:&lt;span class="w"&gt; &lt;/span&gt;Fauna&amp;gt;,&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;Theme:&lt;span class="w"&gt; &lt;/span&gt;Flora&amp;gt;,&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;Theme:&lt;span class="w"&gt; &lt;/span&gt;Refuge&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If obtaining a &lt;tt class="docutils literal"&gt;QuerySet&lt;/tt&gt; is not a requirement, it's &lt;a class="reference external" href="http://stackoverflow.com/a/7361598/141895"&gt;rather easy to get a list sorted&lt;/a&gt;
according to another :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pks_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;themes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk__in&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pks_list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pks_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In my case, I want a &lt;tt class="docutils literal"&gt;QuerySet&lt;/tt&gt;, a brave lazy one, with proper &lt;tt class="docutils literal"&gt;filter()&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;exclude()&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;values()&lt;/tt&gt; ...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fallback-to-sql"&gt;
&lt;h2&gt;Fallback to SQL&lt;/h2&gt;
&lt;p&gt;AFAIK, most database engines ignore order of records, until you specify an
ordering column. In our case, the list is arbitrary, and does not map to any
existing attribute, thus db column.&lt;/p&gt;
&lt;p&gt;If you use MySQL (&lt;em&gt;who does?!&lt;/em&gt;), there is a &lt;tt class="docutils literal"&gt;FIELD()&lt;/tt&gt; function that provides
&lt;a class="reference external" href="http://stackoverflow.com/a/3626200/141895"&gt;custom input for the sort method&lt;/a&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;theme&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FIELD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the ORM, it gives us (&lt;em&gt;thanks Daniel Roseman&lt;/em&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pk_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ordering&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;FIELD(`id`, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;)&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pk_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk__in&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pk_list&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
           &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ordering&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ordering&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ordering&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well, good news it can be &lt;a class="reference external" href="http://stackoverflow.com/questions/1309624/simulating-mysqls-order-by-field-in-postgresql"&gt;ported to PostgreSQL&lt;/a&gt;.
But if possible, I would prefer native SQL.&lt;/p&gt;
&lt;p&gt;And it looks like the magnificient syntax of SQL provides &lt;tt class="docutils literal"&gt;ORDER BY CASE WHEN ... END&lt;/tt&gt; !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;theme&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;CASE&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;WHEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;THEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;WHEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;THEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;WHEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;THEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the ORM, it gives us :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pk_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;clauses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;WHEN id=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; THEN &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pk&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk_list&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="n"&gt;ordering&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CASE &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; END&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;clauses&lt;/span&gt;
&lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk__in&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pk_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
           &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ordering&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ordering&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ordering&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I wonder how it behaves with zillions of records though ;)&lt;/p&gt;
&lt;p&gt;One more thing: before Django 1.6, there &lt;a class="reference external" href="https://code.djangoproject.com/ticket/14930"&gt;was a bug&lt;/a&gt; with calling &lt;tt class="docutils literal"&gt;values_list()&lt;/tt&gt;
on a queryset ordered by an extra column. Use this :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ordering&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Good luck ! Please share your advices or critics ;)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="django"></category></entry><entry><title>Generate office documents with Django</title><link href="https://blog.mathieu-leplatre.info/generate-office-documents-with-django.html" rel="alternate"></link><published>2013-09-13T00:00:00+02:00</published><updated>2013-09-13T00:00:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2013-09-13:/generate-office-documents-with-django.html</id><summary type="html">&lt;p&gt;In our recent Django projects, we had to create documents (Libre/OpenOffice, Microsoft Office, PDF...),
and therefore created two components :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/makinacorpus/django-appypod"&gt;django-appypod&lt;/a&gt;, providing document templates views, built on top of &lt;a class="reference external" href="http://appyframework.org/pod.html"&gt;Appy.pod&lt;/a&gt; ;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/makinacorpus/convertit"&gt;convertit&lt;/a&gt;, a generic format conversion Web API.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="django-appypod-1"&gt;
&lt;h2&gt;django-appypod&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Appy&lt;/em&gt; is a set of python tools (e.g. framework) by ‚Ä¶&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;In our recent Django projects, we had to create documents (Libre/OpenOffice, Microsoft Office, PDF...),
and therefore created two components :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/makinacorpus/django-appypod"&gt;django-appypod&lt;/a&gt;, providing document templates views, built on top of &lt;a class="reference external" href="http://appyframework.org/pod.html"&gt;Appy.pod&lt;/a&gt; ;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/makinacorpus/convertit"&gt;convertit&lt;/a&gt;, a generic format conversion Web API.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="django-appypod-1"&gt;
&lt;h2&gt;django-appypod&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Appy&lt;/em&gt; is a set of python tools (e.g. framework) by &lt;a class="reference external" href="https://launchpad.net/~gaetan-delannay"&gt;Gaetan Delannay&lt;/a&gt;, which provides, among other stuff,
a templating engine for OpenDocument files.&lt;/p&gt;
&lt;p&gt;One the great advantage is that you edit your templates in LibreOffice, &lt;a class="reference external" href="http://en.wikipedia.org/wiki/WYSIWYG"&gt;WYSIWYG&lt;/a&gt; !&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/appypod-template.png" style="width: 70%;" /&gt;
&lt;p&gt;&lt;em&gt;django-appypod&lt;/em&gt; is a template view that renders a OpenDocument template for a context.
The exact same way you already do for HTML.&lt;/p&gt;
&lt;p&gt;Using class-based generic views :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.view.generic.detail&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TemplateView&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;djappypod.response&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OdtTemplateResponse&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;YourDocument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TemplateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OdtTemplateResponse&lt;/span&gt;
    &lt;span class="n"&gt;template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;your/template.odt&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Simple as hello ;)&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using classic functions-based views :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;your_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Simple as hello ;)&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OdtTemplateResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;your/template.odt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="" class="align-center" src="/images/appypod-rendered.png" style="width: 70%;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="convertit-1"&gt;
&lt;h2&gt;ConvertIt&lt;/h2&gt;
&lt;p&gt;We often need to serve those document as PDF files, and some users can't
be satisfied with &lt;em&gt;OpenDocument&lt;/em&gt; files.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Appy&lt;/em&gt; can rely on OpenOffice to convert documents to PDF and MS-Word, but we didn't like
the idea of having to install the bunch of binaries along every Django project.
Therefore we created &lt;em&gt;ConvertIt&lt;/em&gt;, a Web API that will just be in charge of
format conversion. It can live on a dedicated server, and thus isolate binaries, and
potentially convert from and to any exotic formats, relying on any exotic system binaries.&lt;/p&gt;
&lt;p&gt;So far we implemented most office documents conversions (.pdf, .doc, .xls), as well as SVG to PDF and PNG.&lt;/p&gt;
&lt;div class="section" id="docker-image"&gt;
&lt;h3&gt;Docker image&lt;/h3&gt;
&lt;p&gt;If you use Docker, you can get a ConvertIt instance running in one command :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo docker run -p :6543 makinacorpus/convertit
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="manual-installation"&gt;
&lt;h3&gt;Manual installation&lt;/h3&gt;
&lt;p&gt;It is a Pyramid project, pretty straightforward :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;convertit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Plus some conversion binaries (each one is optional):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;libreoffice&lt;span class="w"&gt; &lt;/span&gt;unoconv&lt;span class="w"&gt; &lt;/span&gt;inkscape
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run a development instance :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pserve&lt;span class="w"&gt; &lt;/span&gt;development.ini&lt;span class="w"&gt; &lt;/span&gt;--reload
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run a production instance :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;gunicorn
gunicorn&lt;span class="w"&gt; &lt;/span&gt;--paste&lt;span class="w"&gt; &lt;/span&gt;production.ini
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="usage"&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;p&gt;Using GET requests :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
curl http://convertit/?url=http://server/document.odt&amp;amp;to=application/pdf
HTTP/1.1 302 Found
Content-Disposition: attachement; filename=document.pdf
...
&lt;/pre&gt;
&lt;p&gt;Uploading file with POST :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
curl -F &amp;quot;file=&amp;#64;tiger.svg&amp;quot; http://convertit/?to=image/png
HTTP/1.1 302 Found
Content-Disposition: attachement; filename=tiger.png
...
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="integration-with-django"&gt;
&lt;h3&gt;Integration with Django&lt;/h3&gt;
&lt;p&gt;If your documents do not require login, a simple and stupid template tag can do it :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.urlresolvers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NoReverseMatch&lt;/span&gt;


&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="nd"&gt;@register&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;simple_tag&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convert_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sourceurl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;application/pdf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sourceurl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sourceurl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;NoReverseMatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="n"&gt;fullurl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_absolute_uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sourceurl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;?url=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;to=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CONVERSION_SERVER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullurl&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which you then use in templates:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;a href=&amp;quot;{% convert_url &amp;quot;app:document&amp;quot; object.pk %}&amp;quot;&amp;gt;Download PDF version&amp;lt;/a&amp;gt;
&lt;/pre&gt;
&lt;p&gt;However, if your view requires authentication, there are several strategies:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Auto-login requests coming from ConvertIt server ;&lt;/li&gt;
&lt;li&gt;Add a login required proxy view that download the file and perform a POST query to ConvertIt ;&lt;/li&gt;
&lt;li&gt;Setup SSO or any other token mechanism ;&lt;/li&gt;
&lt;li&gt;Contribute to ConvertIt to add HTTP authentication (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;url=http://user:pass&amp;#64;host&lt;/span&gt;&lt;/tt&gt;) ;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="reference external" href="https://gist.github.com/leplatrem/6552003"&gt;I made a snippet&lt;/a&gt; for the first option&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="in-short"&gt;
&lt;h2&gt;In short...&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;django-appypod&lt;/em&gt; is great because templates are WYSIWYG ;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ConvertIt&lt;/em&gt; is great because it's generic and pluggable ;&lt;/li&gt;
&lt;li&gt;There are great together because their deliver both office and PDF formats ;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are alternatives though if PDF is enough for you :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://weasyprint.org"&gt;WeasyPrint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.xhtml2pdf.com/"&gt;xhtml2pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="django"></category><category term="openoffice"></category><category term="convertit"></category><category term="appypod"></category></entry><entry><title>GeoDjango maps with Leaflet</title><link href="https://blog.mathieu-leplatre.info/geodjango-maps-with-leaflet.html" rel="alternate"></link><published>2013-08-21T00:00:00+02:00</published><updated>2013-08-21T00:00:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2013-08-21:/geodjango-maps-with-leaflet.html</id><summary type="html">&lt;p&gt;A short introduction to web mapping with Django, using two very simple
applications: &lt;a class="reference external" href="https://github.com/makinacorpus/django-leaflet"&gt;django-leaflet&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/makinacorpus/django-geojson"&gt;django-geojson&lt;/a&gt;, by &lt;a class="reference external" href="http://makinacorpus.com"&gt;Makina Corpus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We will build a map with all major weather stations of the world.&lt;/p&gt;
&lt;div class="section" id="weather-stations"&gt;
&lt;h2&gt;Weather stations&lt;/h2&gt;
&lt;p&gt;Each weather station has an id, a name and a position.&lt;/p&gt;
&lt;p&gt;As a GeoDjango model, it ‚Ä¶&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;A short introduction to web mapping with Django, using two very simple
applications: &lt;a class="reference external" href="https://github.com/makinacorpus/django-leaflet"&gt;django-leaflet&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/makinacorpus/django-geojson"&gt;django-geojson&lt;/a&gt;, by &lt;a class="reference external" href="http://makinacorpus.com"&gt;Makina Corpus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We will build a map with all major weather stations of the world.&lt;/p&gt;
&lt;div class="section" id="weather-stations"&gt;
&lt;h2&gt;Weather stations&lt;/h2&gt;
&lt;p&gt;Each weather station has an id, a name and a position.&lt;/p&gt;
&lt;p&gt;As a GeoDjango model, it becomes :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.gis.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;gismodels&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WeatherStation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gismodels&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;wmoid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;geom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gismodels&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PointField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gismodels&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GeoManager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="loading-actual-data"&gt;
&lt;h3&gt;Loading actual data&lt;/h3&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://www.wmo.int"&gt;World Meteorological Organization&lt;/a&gt; publishes a list of all major weather stations, in a &lt;a class="reference external" href="ftp://ftp.wmo.ch/wmo-ddbs/VolA_New/"&gt;CSV format&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, this format is not very friendly (especially latitudes and longitudes) :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
StationId   StationName         Latitude    Longitude ...
60351       JIJEL- ACHOUAT      36 48 00N   05 53 00E
...
07630       TOULOUSE BLAGNAC    43 37 16N   01 22 44E
...
&lt;/pre&gt;
&lt;p&gt;We will convert coordinates &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Geographic_coordinate_conversion#Conversion_from_DMS_to_Decimal_Degree"&gt;from degres minutes seconds to decimal degrees&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dms2dec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Degres Minutes Seconds to Decimal degres&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;degres&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;dec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;degres&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3600&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;S&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;W&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dec&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dec&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And create an instance of our model for each entry in the CSV :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.gis.geos&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webmap.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WeatherStation&lt;/span&gt;


&lt;span class="n"&gt;csv_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Pub9volA130819x.flatfile.txt&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;lng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dms2dec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Longitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;lat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dms2dec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Latitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;wmoid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;StationId&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;StationName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;WeatherStation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wmoid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wmoid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, our table is full of records (~ 12000) !&lt;/p&gt;
&lt;p&gt;If you open it with graphical tools like QGis, it's stuffed !&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/weather-stations-qgis.png" style="width: 100%;" /&gt;
&lt;p&gt;( &lt;em&gt;If you want a script that converts this stations file into GeoJSON&lt;/em&gt;, you can use &lt;a class="reference external" href="https://gist.github.com/leplatrem/6294314"&gt;this piece of code&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="plot-on-map"&gt;
&lt;h2&gt;Plot on map&lt;/h2&gt;
&lt;p&gt;With &lt;em&gt;django-leaflet&lt;/em&gt;, after having added &lt;tt class="docutils literal"&gt;leaflet&lt;/tt&gt; to your &lt;tt class="docutils literal"&gt;INSTALLED_APPS&lt;/tt&gt;,
you can insert maps in templates :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% load leaflet_tags %}
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    {% leaflet_js %}
    {% leaflet_css %}
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Weather Stations&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    {% leaflet_map &amp;quot;main&amp;quot; callback=&amp;quot;main_map_init&amp;quot; %}

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main_map_init&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// Use Leaflet API here&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A blank map shows up, with a basic OpenStreetMap background.&lt;/p&gt;
&lt;div class="section" id="vectorial-data"&gt;
&lt;h3&gt;Vectorial data&lt;/h3&gt;
&lt;p&gt;We now want to place markers for each weather station. For this, we use
&lt;em&gt;django-geojson&lt;/em&gt;, which provides a very simple base view :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# urls.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;djgeojson.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;GeoJSONLayerView&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webmap.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WeatherStation&lt;/span&gt;


&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^data.geojson$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GeoJSONLayerView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;WeatherStation&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We load this data in Ajax, and add it as map layer, in the initialization function left empty in the above snippet :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main_map_init&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dataurl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{% url &amp;quot;data&amp;quot; %}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Download GeoJSON via Ajax&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataurl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Add GeoJSON layer&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geoJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The map shows up, and get filled with weather stations !&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/weather-stations-leaflet.png" style="width: 100%;" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="going-further"&gt;
&lt;h2&gt;Going further...&lt;/h2&gt;
&lt;p&gt;This was a first introduction, but it applies to all kinds of goemetries (lines, polygons, ...).&lt;/p&gt;
&lt;p&gt;I &lt;a class="reference external" href="http://github.com/leplatrem/django-leaflet-geojson"&gt;published the full project&lt;/a&gt; if you want to start from an example.&lt;/p&gt;
&lt;p&gt;If you already feel comfortable with Django, there won't be any surprise : have a look at &lt;em&gt;Leaflet&lt;/em&gt;, &lt;em&gt;django-leaflet&lt;/em&gt; and &lt;em&gt;django-geojson&lt;/em&gt; respective documentations in order to get an idea of the customizations you are offered...&lt;/p&gt;
&lt;div class="section" id="performance"&gt;
&lt;h3&gt;Performance&lt;/h3&gt;
&lt;p&gt;A map with more than 12 000 HTML objects is not going to be snappy.&lt;/p&gt;
&lt;p&gt;Hopefully, it won't be the case for your first applications !&lt;/p&gt;
&lt;p&gt;And fortunately, there are plently of different strategies to draw such an amount of data :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use &lt;a class="reference external" href="https://github.com/Leaflet/Leaflet.markercluster"&gt;marker clusters&lt;/a&gt; to reduce the number of elements on the map (&lt;a class="reference external" href="https://github.com/leplatrem/django-leaflet-geojson/blob/master/Pub9volA130819x.geojson"&gt;see result here&lt;/a&gt;) ;&lt;/li&gt;
&lt;li&gt;Draw circles instead of markers and switch to Canvas (see Leaflet documentation) ;&lt;/li&gt;
&lt;li&gt;Use &lt;a class="reference external" href="https://github.com/glenrobertson/leaflet-tilelayer-geojson/"&gt;tiled geojson&lt;/a&gt; ;&lt;/li&gt;
&lt;li&gt;Render tiles using Tilemill/Mapnik ;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It gives us a lot of topics to explore and blog about :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="django"></category><category term="leaflet"></category><category term="gis"></category><category term="geojson"></category></entry><entry><title>Embed Daybed forms</title><link href="https://blog.mathieu-leplatre.info/embed-daybed-forms.html" rel="alternate"></link><published>2013-07-23T14:25:00+02:00</published><updated>2013-07-23T14:25:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2013-07-23:/embed-daybed-forms.html</id><summary type="html">&lt;p&gt;A brief article to introduce &lt;a class="reference external" href="https://github.com/spiral-project/backbone-daybed"&gt;backbone-daybed&lt;/a&gt;, a few
helpers to render Web forms for Daybed models.&lt;/p&gt;
&lt;img alt="Antikes Sofa Diwan furniert Laden daybed" src="http://upload.wikimedia.org/wikipedia/commons/7/70/Antikes_Sofa_Diwan_furniert_Laden_daybed.jpg" style="width: 512px;" /&gt;
&lt;div class="section" id="daybed-lay-down-and-rest"&gt;
&lt;h2&gt;Daybed, lay down and REST&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/spiral-project/daybed"&gt;Daybed&lt;/a&gt; is a data validation and storage API, written in Python,
using Pyramid and the fantastic &lt;a class="reference external" href="https://cornice.readthedocs.org/"&gt;Cornice&lt;/a&gt; addon.&lt;/p&gt;
&lt;p&gt;It's a minimalist Web API where you :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;define models (schemas)&lt;/li&gt;
&lt;li&gt;validate ‚Ä¶&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;A brief article to introduce &lt;a class="reference external" href="https://github.com/spiral-project/backbone-daybed"&gt;backbone-daybed&lt;/a&gt;, a few
helpers to render Web forms for Daybed models.&lt;/p&gt;
&lt;img alt="Antikes Sofa Diwan furniert Laden daybed" src="http://upload.wikimedia.org/wikipedia/commons/7/70/Antikes_Sofa_Diwan_furniert_Laden_daybed.jpg" style="width: 512px;" /&gt;
&lt;div class="section" id="daybed-lay-down-and-rest"&gt;
&lt;h2&gt;Daybed, lay down and REST&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/spiral-project/daybed"&gt;Daybed&lt;/a&gt; is a data validation and storage API, written in Python,
using Pyramid and the fantastic &lt;a class="reference external" href="https://cornice.readthedocs.org/"&gt;Cornice&lt;/a&gt; addon.&lt;/p&gt;
&lt;p&gt;It's a minimalist Web API where you :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;define models (schemas)&lt;/li&gt;
&lt;li&gt;validate data and store data&lt;/li&gt;
&lt;li&gt;retrieve and update records&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Key features are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing"&gt;CORS&lt;/a&gt; built-in support&lt;/li&gt;
&lt;li&gt;pluggable datastore engines (default is &lt;em&gt;CouchDB&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Geometry fields (maps!)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/SPORE/specifications"&gt;Spore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Access Control (&lt;em&gt;under development&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's a side-project we've been hacking on for a while, and we envision &lt;a class="reference external" href="https://github.com/spiral-project/daybed/wiki/Use-cases"&gt;many
applications&lt;/a&gt; !
One of them is, since the beginning, a Web forms service !&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="models-are-yours"&gt;
&lt;h2&gt;Models are yours&lt;/h2&gt;
&lt;p&gt;In order to create your own models, you can either use the
crude GUI of &lt;a class="reference external" href="http://leplatrem.github.io/daybed-map/"&gt;daybed-maps&lt;/a&gt;
&lt;strong&gt;or&lt;/strong&gt; post a JSON manually on the &lt;a class="reference external" href="http://daybed.lolnet.org"&gt;Daybed instance&lt;/a&gt; we run for you.&lt;/p&gt;
&lt;p&gt;In both cases you will reference your model definition using
the &lt;tt class="docutils literal"&gt;√¨d&lt;/tt&gt; you chose.&lt;/p&gt;
&lt;p&gt;Below, we define &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;demo-poll-conf&lt;/span&gt;&lt;/tt&gt; using cUrl in the command-line.&lt;/p&gt;
&lt;p&gt;The model will be a stupid poll to ask how many conferences you attended
in the past year.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# in a terminal...&lt;/span&gt;
&lt;span class="nv"&gt;definition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;
&lt;span class="s1"&gt;&amp;quot;title&amp;quot;: &amp;quot;Conferences Poll&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;quot;description&amp;quot;: &amp;quot;How many conferences attended last year ?&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;quot;fields&amp;quot;: [&lt;/span&gt;
&lt;span class="s1"&gt;  {&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;name&amp;quot;: &amp;quot;total&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;type&amp;quot;: &amp;quot;int&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;description&amp;quot;: &amp;quot;How many times ?&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;  }, {&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;name&amp;quot;: &amp;quot;category&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;type&amp;quot;: &amp;quot;enum&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;choices&amp;quot;: [&amp;quot;Web&amp;quot;, &amp;quot;Strategy&amp;quot;, &amp;quot;Technology&amp;quot;],&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;description&amp;quot;: &amp;quot;Mostly in...&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;  }&lt;/span&gt;
&lt;span class="s1"&gt;]}&amp;#39;&lt;/span&gt;

curl&lt;span class="w"&gt; &lt;/span&gt;-XPUT&lt;span class="w"&gt; &lt;/span&gt;http://daybed.lolnet.org/definitions/demo-poll-conf&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;definition&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="backbone-daybed-simple-and-stupid"&gt;
&lt;h2&gt;backbone-daybed, simple and stupid&lt;/h2&gt;
&lt;p&gt;Backbone.js is not the &lt;em&gt;next&lt;/em&gt; big thing :) &lt;em&gt;#ooold, it's sooo 2011&lt;/em&gt; !&lt;/p&gt;
&lt;p&gt;But frankly, it has remained simple, very easy to learn and yet quite efficient!
That's why I chose it to demo the power of having storage-as-a-service with Daybed.
Plus, &lt;a class="reference external" href="https://github.com/powmedia/backbone-forms"&gt;backbone-forms&lt;/a&gt; provided
the right level of abstraction I needed !&lt;/p&gt;
&lt;p&gt;For example, here we embed a form in the page for the model we just created,
and start polling the audience !&lt;/p&gt;
&lt;p&gt;The few lines of Javascript below render the form and reacts on submission !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://cdnjs.cloudflare.com/ajax/libs/jquery/1.8.3/jquery.min.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.4.2/underscore-min.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.0.0/backbone-min.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://cdnjs.cloudflare.com/ajax/libs/mustache.js/0.7.0/mustache.min.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://cdnjs.cloudflare.com/ajax/libs/backbone-forms/0.12.0/backbone-forms.min.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://rawgithub.com/spiral-project/backbone-daybed/1e410a85/backbone-daybed.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Daybed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#demo-form-container&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;demo-poll-conf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;created&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// plot chart !&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/jquery/1.8.3/jquery.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.4.2/underscore-min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.0.0/backbone-min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/mustache.js/0.7.0/mustache.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/backbone-forms/0.12.0/backbone-forms.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="https://rawgithub.com/spiral-project/backbone-daybed/1e410a85/backbone-daybed.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="https://rawgithub.com/nnnick/Chart.js/master/Chart.min.js"&gt;&lt;/script&gt;
&lt;style&gt;
    #demo-form-container {
        border: 1px solid #6C0AAB;
        margin-bottom: 30px;
        display: inline-block;
        padding: 10px;
        border-radius: 5px;
    }
    #demo-form-container .field-error {
        color: red;
    }
    #demo-form-container label {
        font-weight: bold;
    }
    #demo-form-container ul {
        margin: 0px;
        list-style-type: none;
    }
    #demo-form-container a.btn {
        float: right;
        text-decoration: none;
        background-color: #6C0AAB;
        color: white;
        border-radius: 3px;
        font-size: 16px;
    }
&lt;/style&gt;
&lt;div id="demo-form-container"&gt;&lt;/div&gt;

&lt;script type="text/javascript"&gt;
    $(document).ready(function () {
        Daybed.SETTINGS.SERVER = "http://daybed.lolnet.org";  // no trailing slash

        var form = Daybed.renderForm('#demo-form-container',
                                     {id: 'demo-poll-conf',
                                      title: 'Conferences poll :',
                                      save: 'Submit',
                                      cancel: null});

        // Fetch all the records
        var records = new Daybed.ItemList(form.definition);
        records.fetch();

        // On submission, plot the chart
        form.on('created', function (record) {
            records.add(record);

            // Prepare plot data
            var data = {
                labels : [],
                datasets : [{
                    fillColor : "#E0E4CC",
                    strokeColor : "#6C0AAB",
                    data : []
                }]
            };
            var byCat = {};
            records.each(function (r) {
                var cat = r.attributes.category;
                if (!byCat[cat]) byCat[cat] = [];
                byCat[cat].push(r.attributes.total);
            });
            for(var cat in byCat) {
                var sum = _.reduce(byCat[cat], function(memo, num){ return memo + num; }, 0),
                    val = sum / byCat[cat].length;
                data.labels.push(cat);
                data.datasets[0].data.push(val);
            }

            // Render the bar chart
            var ctx =  $('#demo-form-container').html('&lt;p&gt;Avg. per category&lt;/p&gt;'+
                                                      '&lt;canvas height="200"/&gt;')
                                                .find('canvas')[0].getContext("2d"),
                chart = new Chart(ctx).Bar(data);
        });
    });
&lt;/script&gt;&lt;p&gt;The helper downloads the definition JSON, renders fields within an HTML form with
&lt;em&gt;backbone-forms&lt;/em&gt;. And in this example specifically, on submission, we fetch all the records,
compute average values by category in order to plot some naive chart using &lt;a class="reference external" href="http://chartjs.org"&gt;Chart.js&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="" src="/images/backbone-daybed-preview.png" style="width: 700px;" /&gt;
&lt;p&gt;You can also have a look at the very few lines of the backbone-daybed demo, it's dead easy !
It features a CRUD application : Create, edit and delete records for the model of your choice ! &lt;a class="reference external" href="http://spiral-project.github.io/backbone-daybed/#demo-poll-conf"&gt;http://spiral-project.github.io/backbone-daybed/#demo-poll-conf&lt;/a&gt; (&lt;em&gt;See URL hash&lt;/em&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="shortly"&gt;
&lt;h2&gt;Shortly&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Daybed is a generic backend where you define models, validate and post data ;&lt;/li&gt;
&lt;li&gt;There are already &lt;a class="reference external" href="https://github.com/spiral-project/daybed/wiki/Use-cases"&gt;various working applications&lt;/a&gt; built with this storage-as-a-service ;&lt;/li&gt;
&lt;li&gt;Most Javascript frameworks will play well natively with Daybed REST API ;&lt;/li&gt;
&lt;li&gt;backbone-daybed is just a helper to render Daybed models as forms, .... &lt;a class="reference external" href="https://github.com/spiral-project/backbone-daybed/#readme"&gt;and a little bit more&lt;/a&gt; !&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So far, Daybed data is not protected (like a wiki), but access control is currently being implemented :)&lt;/p&gt;
&lt;p&gt;Stay tuned !&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="daybed"></category><category term="javascript"></category><category term="backbone"></category></entry><entry><title>Use PostGIS topologies to clean-up road networks</title><link href="https://blog.mathieu-leplatre.info/use-postgis-topologies-to-clean-up-road-networks.html" rel="alternate"></link><published>2013-07-03T14:25:00+02:00</published><updated>2013-07-03T14:25:00+02:00</updated><author><name>Mathieu Leplatre, Fr√©d√©ric Bonifas</name></author><id>tag:blog.mathieu-leplatre.info,2013-07-03:/use-postgis-topologies-to-clean-up-road-networks.html</id><summary type="html">&lt;p&gt;This article gives a few basics to get started with using the PostGIS topology extension.&lt;/p&gt;
&lt;p&gt;We will take avandtage of topologies to clean-up a real topological road network, coming from &lt;a class="reference external" href="http://data.grandtoulouse.fr/web/guest/les-donnees/-/opendata/card/12693-filaire-de-voirie"&gt;Toulouse OpenData files&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/toulouse-voirie.png" /&gt;
&lt;div class="section" id="topological"&gt;
&lt;h2&gt;Topological&lt;/h2&gt;
&lt;p&gt;A topology is a general concept, where objects are defined by their relationships
instead of their ‚Ä¶&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This article gives a few basics to get started with using the PostGIS topology extension.&lt;/p&gt;
&lt;p&gt;We will take avandtage of topologies to clean-up a real topological road network, coming from &lt;a class="reference external" href="http://data.grandtoulouse.fr/web/guest/les-donnees/-/opendata/card/12693-filaire-de-voirie"&gt;Toulouse OpenData files&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/toulouse-voirie.png" /&gt;
&lt;div class="section" id="topological"&gt;
&lt;h2&gt;Topological&lt;/h2&gt;
&lt;p&gt;A topology is a general concept, where objects are defined by their relationships
instead of their geometries. Instead of lines, we manipulate edges, vertices and faces :
might remind you the core concepts of graph theory.&lt;/p&gt;
&lt;p&gt;A topological road network is supposed to have their lines (edges) connected at single points (nodes).&lt;/p&gt;
&lt;p&gt;In this example dataset, &lt;a class="reference external" href="http://wiki.openstreetmap.org/wiki/JOSM/Validator"&gt;JOSM  validator&lt;/a&gt; detects not less than 1643 errors :) Broken connections, crossing lines ...&lt;/p&gt;
&lt;img alt="" src="/images/toulouse-voirie-error.png" /&gt;
&lt;img alt="" src="/images/toulouse-voirie-error2.png" /&gt;
&lt;img alt="" src="/images/toulouse-voirie-error3.png" /&gt;
&lt;p&gt;&lt;strong&gt;Let's clean this up !&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;On Ubuntu 12.04, you just have to install PostGIS :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-add-repository&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;ppa:ubuntugis/ppa
sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;update
sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;postgresql&lt;span class="w"&gt; &lt;/span&gt;postgis
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The topology extension is installed by default. Just activate it in your database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DATABASE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;roadsdb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EXTENSION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;postgis&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EXTENSION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;postgis_topology&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;search_path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;topology&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="data-import"&gt;
&lt;h2&gt;Data Import&lt;/h2&gt;
&lt;p&gt;Load your shapefile (using command-line) like usual :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;public.&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;roadsdb&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;postgres&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;postgres&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;
ogr2ogr&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PostgreSQL&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PG:&lt;span class="s2"&gt;&amp;quot;host=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;host&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; user=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; dbname=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;db&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; password=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-a_srs&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;EPSG:2154&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-nln&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;schema&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;roads&lt;span class="w"&gt; &lt;/span&gt;-nlt&lt;span class="w"&gt; &lt;/span&gt;MULTILINESTRING&lt;span class="w"&gt; &lt;/span&gt;ROAD_SHAPEFILE.SHP
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create and associate the PostGIS topology:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;topology&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateTopology&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;roads_topo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2154&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;topology&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddTopoGeometryColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;roads_topo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;public&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;roads&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;topo_geom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LINESTRING&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Convert linestrings to vertices and edges within the topology :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- Layer 1, with 1.0 meter tolerance&lt;/span&gt;
&lt;span class="k"&gt;UPDATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;roads&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;topo_geom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;topology&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toTopoGeom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wkb_geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;roads_topo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From now on, we have a topology, whose imperfections were corrected. It smoothly merged
all &lt;em&gt;dirty&lt;/em&gt; junctions, whose defects were at most 1.0 meter wide.&lt;/p&gt;
&lt;img alt="" src="/images/toulouse-voirie-clean.png" /&gt;
&lt;p&gt;You may enconter insertion problems : the tool fails &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt; and aborts the whole transaction.
Use this snippet to skip errors and go on with the next records:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;DO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$$&lt;/span&gt;&lt;span class="k"&gt;DECLARE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;BEGIN&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;FOR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;IN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;roads&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LOOP&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;BEGIN&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;roads&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;topo_geom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;topology&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toTopoGeom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wkb_geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;roads_topo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ogc_fid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ogc_fid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;EXCEPTION&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;WHEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OTHERS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;THEN&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;RAISE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Loading of record % failed: %&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ogc_fid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SQLERRM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LOOP&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="err"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is rather frustrating to face topological errors at insertion ! You can try with a lower tolerance,
or check that your records have at least valid geometries. &lt;em&gt;Any clarification or help on this would be welcome&lt;/em&gt; :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="visualize-and-export"&gt;
&lt;h2&gt;Visualize and export&lt;/h2&gt;
&lt;p&gt;In order to visualize your topology vertices in QGIS, browse your database tables,
and add the following layers: &lt;tt class="docutils literal"&gt;roads_topo.edge_data&lt;/tt&gt; and  &lt;tt class="docutils literal"&gt;roads_topo.node&lt;/tt&gt;.&lt;/p&gt;
&lt;img alt="" src="/images/toulouse-voirie-topology.png" /&gt;
&lt;p&gt;You can also export the resulting geometries into a new table :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;roads_clean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ogc_fid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;topo_geom&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;roads&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or obtain your lovable Shapefile in return :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ogr2ogr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;ESRI Shapefile&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ROAD_CLEAN&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SHP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;host=${host} user=${user} dbname=${db} password=${password}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;sql&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;SELECT topo_geom::geometry FROM roads&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If, like &lt;a class="reference external" href="http://gis.stackexchange.com/questions/71270/split-line-at-intersection-and-attach-attributes/"&gt;Amit&lt;/a&gt;  you want to split the lines at
intersections and assign original attributes, just join &lt;tt class="docutils literal"&gt;roads_topo.edge_data&lt;/tt&gt; and on the &lt;tt class="docutils literal"&gt;roads&lt;/tt&gt; table :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lib_off&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ogc_fid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;roads_topo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;roads_topo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;roads&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edge_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;element_id&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;AND&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;topogeo_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;topo_geom&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="going-further"&gt;
&lt;h2&gt;Going further...&lt;/h2&gt;
&lt;p&gt;We could collapse crossing lines and disconnected junctions into a nice and clean network.&lt;/p&gt;
&lt;p&gt;Yes ahem, we weren't able to repair &lt;em&gt;every&lt;/em&gt; topological error of this dataset using this automatic method.
Some inconsistencies, like the following one, are like 6 meters wide ! They are, by the way, perfectly described in OpenStreetMap :&lt;/p&gt;
&lt;img alt="" src="/images/toulouse-voirie-error4.png" /&gt;
&lt;p&gt;We could also play with simplifications using &lt;a class="reference external" href="http://strk.keybit.net/blog/2012/04/13/simplifying-a-map-layer-using-postgis-topology/"&gt;Sandro Santilli&lt;/a&gt;'s &lt;tt class="docutils literal"&gt;SimplifyEdgeGeom&lt;/tt&gt; &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt; function, it will collapse edges with a higher tolerance ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SimplifyEdgeGeom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;roads_topo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;edge_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;roads_topo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don't hesitate to share your thoughts and feedback. Concrete use cases and examples are rare about this!
And as usual, drop a comment if anything is wrong or not clear :)&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;SQL/MM Spatial exception&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;geometry intersects edge&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;side location conflict&lt;/tt&gt;, ...&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Just execute the &lt;a class="reference external" href="https://gist.github.com/leplatrem/5729022"&gt;function SQL code&lt;/a&gt;. It's
just an elegant wrapper around &lt;tt class="docutils literal"&gt;ST_ChangeEdgeGeom&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;ST_Simplify&lt;/tt&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="postgis"></category><category term="sql"></category><category term="topology"></category><category term="opendata"></category><category term="toulouse"></category></entry><entry><title>News about Subtivals</title><link href="https://blog.mathieu-leplatre.info/news-about-subtivals.html" rel="alternate"></link><published>2013-06-07T00:00:00+02:00</published><updated>2013-06-07T00:00:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2013-06-07:/news-about-subtivals.html</id><summary type="html">&lt;p&gt;Subtivals was used successfully in movie festivals in Cyprus, and that
makes us happy ! And we regularly receive demands for Subtivals installers
accross the globe ! The great unicode support of Subtivals (&lt;em&gt;provided natively by Qt&lt;/em&gt;)
makes it a great tool for movie subtitling on the international scene !&lt;/p&gt;
&lt;div class="section" id="a-new-website-subtivals-org"&gt;
&lt;h2&gt;A new website ‚Ä¶&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Subtivals was used successfully in movie festivals in Cyprus, and that
makes us happy ! And we regularly receive demands for Subtivals installers
accross the globe ! The great unicode support of Subtivals (&lt;em&gt;provided natively by Qt&lt;/em&gt;)
makes it a great tool for movie subtitling on the international scene !&lt;/p&gt;
&lt;div class="section" id="a-new-website-subtivals-org"&gt;
&lt;h2&gt;A new website... subtivals.org !&lt;/h2&gt;
&lt;p&gt;We used to host our main project page within a Github README file. We now
have a dedicated website :&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://subtivals.org"&gt;http://subtivals.org&lt;/a&gt; !&lt;/p&gt;
&lt;p&gt;It's still hosted and edited on Github &amp;lt;3, we thank them for that !&lt;/p&gt;
&lt;video src="http://mathieu-leplatre.info/media/subtivals/subtivals-1.6-calibration.webm" width="500" preload="auto" autoplay loop&gt;
    &lt;p&gt;Your browser does not support the video element &lt;/p&gt;
&lt;/video&gt;&lt;p&gt;( &lt;em&gt;Calibration tool in action&lt;/em&gt; )&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-new-features-in-version-1-6"&gt;
&lt;h2&gt;Some new features in version 1.6&lt;/h2&gt;
&lt;p&gt;We added a shortcut editor, it's a great way to explore existing shortcuts,
and thus prevent reading the documentation ! Plus, if Subtivals users have habits
with former tools like &lt;em&gt;Icareus Screen pro software&lt;/em&gt;, they can adjust the settings
and use this great opensource alternative easily ;)&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/subtivals-1.6-shorcuteditor.png" /&gt;
&lt;p&gt;Also, Subtivals can now read plain text files. This appears to be useful for
theaters or operas, since timecode notion is irrelevant in those use cases.
We chose a very simple text format:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
This is one subtitle!

Here comes another,
with two lines!
&lt;/pre&gt;
&lt;p&gt;Timecodes are optional, but still supported :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
00:00:19:13 00:00:23:08
√Ä 24-25 ans, j'avais d√©j√† un film
qui tournait en festival.
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="get-it"&gt;
&lt;h2&gt;Get it !&lt;/h2&gt;
&lt;p&gt;Subtivals is released under &lt;a class="reference external" href="http://www.gnu.org/copyleft/gpl.html"&gt;GPL&lt;/a&gt;,
this means you can use, access the source code, modify, package, distribute the software,
as long as it remains GPL.&lt;/p&gt;
&lt;p&gt;Like previous versions, we provide packages for Ubuntu. If you already
installed it, it will be updated automatically. Otherwise, it's just simple as :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo add-apt-repository ppa:mathieu.leplatre/subtivals
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install subtivals
&lt;/pre&gt;
&lt;p&gt;Demo versions can be downloaded though for &lt;a class="reference external" href="http://mathieu-leplatre.info/media/subtivals/"&gt;Mac OS and Windows&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We still follow &lt;a class="reference external" href="http://gcompris.net/-Download-"&gt;Bruno‚Äôs approach&lt;/a&gt; :
we sell the installers on proprietary operating systems, in order to promote GNU/Linux.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="subtivals"></category><category term="subtitles"></category><category term="accessibility"></category><category term="qt"></category><category term="c++"></category></entry><entry><title>Drape lines on a DEM with PostGIS</title><link href="https://blog.mathieu-leplatre.info/drape-lines-on-a-dem-with-postgis.html" rel="alternate"></link><published>2013-04-30T10:25:00+02:00</published><updated>2013-04-30T10:25:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2013-04-30:/drape-lines-on-a-dem-with-postgis.html</id><summary type="html">&lt;p&gt;This article gives a few SQL commands to drape 2D geometries on a DEM (&lt;em&gt;Digital Elevation Model&lt;/em&gt;), in order to obtain 3D geometries.
We use PostGIS 2, and its rasters support especially.&lt;/p&gt;
&lt;div class="section" id="load-your-dem"&gt;
&lt;h2&gt;Load your DEM&lt;/h2&gt;
&lt;p&gt;Assuming you have a DEM compatible with GDAL, you can easily load the raster into ‚Ä¶&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This article gives a few SQL commands to drape 2D geometries on a DEM (&lt;em&gt;Digital Elevation Model&lt;/em&gt;), in order to obtain 3D geometries.
We use PostGIS 2, and its rasters support especially.&lt;/p&gt;
&lt;div class="section" id="load-your-dem"&gt;
&lt;h2&gt;Load your DEM&lt;/h2&gt;
&lt;p&gt;Assuming you have a DEM compatible with GDAL, you can easily load the raster into the database using these commands.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reprojects&lt;/strong&gt; to specified SRID, &lt;strong&gt;crops&lt;/strong&gt; to specified extent, and writes output in a file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gdalwarp&lt;span class="w"&gt; &lt;/span&gt;-t_srs&lt;span class="w"&gt; &lt;/span&gt;EPSG:32632&lt;span class="w"&gt; &lt;/span&gt;-te&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;289942&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4845809&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;400671&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4947295&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dem_file.geotif&lt;span class="w"&gt; &lt;/span&gt;output.bin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tiles into 100 pixels squares and &lt;strong&gt;converts to SQL&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;raster2pgsql&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;-C&lt;span class="w"&gt; &lt;/span&gt;-I&lt;span class="w"&gt; &lt;/span&gt;-M&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;100x100&lt;span class="w"&gt; &lt;/span&gt;output.bin&lt;span class="w"&gt; &lt;/span&gt;mnt&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;output.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Load SQL&lt;/strong&gt; into database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;psql&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;yourdb&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="w"&gt; &lt;/span&gt;output.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="" class="align-center" src="/images/postgis_dem_qgis.jpg" /&gt;
&lt;/div&gt;
&lt;div class="section" id="drape-geometries"&gt;
&lt;h2&gt;Drape geometries&lt;/h2&gt;
&lt;p&gt;There are at least 3 strategies to drape your geometries.&lt;/p&gt;
&lt;div class="section" id="with-geometry-resolution"&gt;
&lt;h3&gt;With geometry resolution&lt;/h3&gt;
&lt;p&gt;We obtain one elevation value per point on your line.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;: You keep your original geometry resolution (number of points)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;: You potentially loose a lot of 3D information (think of &amp;quot;hops&amp;quot;)&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/postgis_dem_native.png" /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WITH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- From an arbitrary line&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SRID=32632;LINESTRING (348595 4889225,352577 4887465,354784 4883841)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;points2d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- Extract its points&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_DumpPoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;cells&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- Get DEM elevation for each&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_Value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;points2d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_Intersects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- Instantiate 3D points&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;points3d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_SetSRID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_MakePoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_X&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_Y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;32632&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;-- Build 3D line from 3D points&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_MakeLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;points3d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; by Daniel Gerber: if the line goes outside your DEM, use a left join (&lt;tt class="docutils literal"&gt;FROM points2d LEFT OUTER JOIN elevation ON &lt;span class="pre"&gt;ST_Intersects(...)&lt;/span&gt;&lt;/tt&gt;) and set default value to 0.0 with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;coalesce(ST_Value(..),&lt;/span&gt; 0.0)&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="with-dem-resolution"&gt;
&lt;h3&gt;With DEM resolution&lt;/h3&gt;
&lt;p&gt;We obtain one elevation value per cell of your raster.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;: You take full advantage of your DEM&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;: You may increase tremendously the resolution of geometries&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/postgis_dem_full.png" /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WITH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- From an arbitrary line&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SRID=32632;LINESTRING (348595 4889225,352577 4887465,354784 4883841)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;cells&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- Get DEM elevation for each intersected cell&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_Centroid&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ST_Intersection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Intersection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_Intersects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- Instantiate 3D points, ordered on line&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;points3d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_SetSRID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_MakePoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_X&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_Y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;32632&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_Distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_StartPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;-- Build 3D line from 3D points&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_MakeLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;points3d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sampling"&gt;
&lt;h3&gt;Sampling&lt;/h3&gt;
&lt;p&gt;We obtain one elevation value per step of X units (meters).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;: You control the resulting resolution&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;: Sometimes hard to find a good balance depending on geometries extents&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/postgis_dem_sampled.png" /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WITH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- From an arbitrary line&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SRID=32632;LINESTRING (348595 4889225,352577 4887465,354784 4883841)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;linemesure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- Add a mesure dimension to extract steps&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_AddMeasure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_Length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;linem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;generate_series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_Length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;points2d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_GeometryN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_LocateAlong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;linemesure&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;cells&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- Get DEM elevation for each&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_Value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;points2d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_Intersects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- Instantiate 3D points&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;points3d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_SetSRID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_MakePoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_X&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_Y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;32632&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;-- Build 3D line from 3D points&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_MakeLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;points3d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="as-a-postgresql-function"&gt;
&lt;h3&gt;As a PostgreSQL function&lt;/h3&gt;
&lt;p&gt;You can define a function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;OR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;REPLACE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FUNCTION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;drape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;RETURNS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="k"&gt;DECLARE&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;line3d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;BEGIN&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;WITH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_MakeLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;INTO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geom3d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;points3d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;RETURN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geom3d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LANGUAGE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;plpgsql&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And drape your geometries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- Add a column to your table&lt;/span&gt;
&lt;span class="k"&gt;ALTER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;yourtable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;COLUMN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geom_3d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LineStringZ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;32632&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;-- Fill it&lt;/span&gt;
&lt;span class="k"&gt;UPDATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;yourtable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geom_3d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;drape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="altimetric-profiles"&gt;
&lt;h2&gt;Altimetric profiles&lt;/h2&gt;
&lt;p&gt;We obtain a basic chart, where you have the distance in abscissa and altitude in ordinate. This SQL query returns 2 columns, &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; axis.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;WITH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;points3d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_DumpPoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom_3d&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;ST_StartPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom_3d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;yourtable&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1234&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ST_Z&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;points3d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, you can apply a different strategy at this stage, and get full resolution or sampled altimetric profiles...&lt;/p&gt;
&lt;p&gt;Drop a comment if anything is not clear :)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="postgis"></category><category term="sql"></category></entry><entry><title>Test your Leaflet applications with Mocha</title><link href="https://blog.mathieu-leplatre.info/test-your-leaflet-applications-with-mocha.html" rel="alternate"></link><published>2013-03-29T00:00:00+01:00</published><updated>2013-03-29T00:00:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2013-03-29:/test-your-leaflet-applications-with-mocha.html</id><summary type="html">&lt;p&gt;Pretty much like &lt;a class="reference external" href="https://nicolas.perriault.net/code/2013/why_javascript/"&gt;n1k0&lt;/a&gt;, I feel like I had learned Javascript three or four times, from the &lt;tt class="docutils literal"&gt;alert()&lt;/tt&gt; back in 1997 to this article about automatic testing. I must admit that, lately, most of my progress in Javascript comes from using and hacking Leaflet &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;, but I hadn't gone as ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pretty much like &lt;a class="reference external" href="https://nicolas.perriault.net/code/2013/why_javascript/"&gt;n1k0&lt;/a&gt;, I feel like I had learned Javascript three or four times, from the &lt;tt class="docutils literal"&gt;alert()&lt;/tt&gt; back in 1997 to this article about automatic testing. I must admit that, lately, most of my progress in Javascript comes from using and hacking Leaflet &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;, but I hadn't gone as far as unit testing until now !&lt;/p&gt;
&lt;p&gt;These are some notes about me getting started with using &lt;a class="reference external" href="http://visionmedia.github.com/mocha/#browser-support"&gt;Mocha&lt;/a&gt; and &lt;a class="reference external" href="http://leafletjs.com"&gt;Leaflet&lt;/a&gt;. If what you read is not clear or simply wrong, please let me know or &lt;a class="reference external" href="https://github.com/leplatrem/blog.mathieu-leplatre.info"&gt;fork it directly&lt;/a&gt; so that everybody can learn !&lt;/p&gt;
&lt;div class="section" id="goals"&gt;
&lt;h2&gt;Goals&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Test your Javascript code to prevent regressions, just as you already do with Python ;&lt;/li&gt;
&lt;li&gt;Run test suites from command-line, especially for &lt;a class="reference external" href="http://jenkins-ci.org"&gt;CI&lt;/a&gt; ;&lt;/li&gt;
&lt;li&gt;Learn something new and practical !&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many ways to achieve this, you might have spotted &lt;em&gt;QUnit&lt;/em&gt; or &lt;em&gt;Jasmine&lt;/em&gt;. We also like &lt;em&gt;CasperJS&lt;/em&gt;, coupled with &lt;em&gt;resurectio&lt;/em&gt;, but this would be more adapted to navigation automation or functional tests.&lt;/p&gt;
&lt;p&gt;I chose &lt;em&gt;Mocha&lt;/em&gt; since it seems to be well suited for unit tests and command-line usage. And since &lt;a class="reference external" href="https://github.com/Leaflet/Leaflet/issues/1428"&gt;there is a pull-request&lt;/a&gt; for switching from &lt;em&gt;Jasmine&lt;/em&gt; to &lt;em&gt;Mocha&lt;/em&gt; in Leaflet core... why not !&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="first-run-the-suite"&gt;
&lt;h2&gt;First, run the suite&lt;/h2&gt;
&lt;p&gt;Get your hand on the &lt;tt class="docutils literal"&gt;npm&lt;/tt&gt; command (comes with &lt;tt class="docutils literal"&gt;nodejs&lt;/tt&gt; package in Ubuntu)&lt;/p&gt;
&lt;p&gt;Create a &lt;tt class="docutils literal"&gt;package.json&lt;/tt&gt; file with your application description. There are plenty of examples, just make sure you require the right stuff :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yourapp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;your app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;main&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yourapp.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;make test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dependencies&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;leaflet&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;devDependencies&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mocha&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And fetch !&lt;/p&gt;
&lt;pre class="literal-block"&gt;
npm install
&lt;/pre&gt;
&lt;p&gt;Create &lt;tt class="docutils literal"&gt;yourapp.js&lt;/tt&gt; with simple and stupid stuff :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;YourApp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;compute&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And create a test for it in &lt;tt class="docutils literal"&gt;test/beginner.js&lt;/tt&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Use require only if available (ran from Node)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;typeof&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;function&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;assert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;leaflet/src/Leaflet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;YourApp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./../yourapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;YourApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Test function call&lt;/span&gt;
&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;compute&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;should be ok&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;YourApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Admire the result !&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;./node_modules/.bin/mocha
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="make-it-run-in-the-browser-too"&gt;
&lt;h2&gt;Make it run in the browser too&lt;/h2&gt;
&lt;p&gt;So far we do not rely too much on Leaflet :) But in a real application test, we will quickly need a &lt;tt class="docutils literal"&gt;L.Map&lt;/tt&gt; instance, along with a DOM most probably.&lt;/p&gt;
&lt;p&gt;By turning on the &lt;em&gt;Mocha&lt;/em&gt; HTML runner, we can indeed run tests from a web browser. But since the console remains one of our goals, we add &lt;a class="reference external" href="https://github.com/metaskills/mocha-phantomjs/#readme"&gt;mocha-phantomjs&lt;/a&gt; in the scene !&lt;/p&gt;
&lt;p&gt;Install &lt;tt class="docutils literal"&gt;phantomjs&lt;/tt&gt; and add it to the &lt;tt class="docutils literal"&gt;PATH&lt;/tt&gt; (the Ubuntu package does that for you). Then modify your &lt;tt class="docutils literal"&gt;package.json&lt;/tt&gt; to add &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;mocha-phantomjs&lt;/span&gt;&lt;/tt&gt; as a &lt;em&gt;devDependency&lt;/em&gt;. Re-run &lt;tt class="docutils literal"&gt;npm install&lt;/tt&gt; to fetch it.&lt;/p&gt;
&lt;p&gt;With &lt;em&gt;mocha-phantomjs&lt;/em&gt;, we will be able to run tests from within a browser &lt;strong&gt;and&lt;/strong&gt; from the command-line. The entry point will be the following &lt;tt class="docutils literal"&gt;test/index.html&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Mocha&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/html; charset=UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../node_modules/mocha/mocha.css&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mocha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;map&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display: none; height: 300px&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../node_modules/mocha/mocha.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../node_modules/leaflet/debug/leaflet-include.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../yourapp.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;map&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fitWorld&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;mocha&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bdd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;begginner.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mochaPhantomJS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mocha&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open the page locally or run in console with :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;./node_modules/mocha-phantomjs/bin/mocha-phantomjs test/index.html
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;PhantomJS&lt;/em&gt; is installed by default on Travis by the way :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="spying-and-mocking"&gt;
&lt;h2&gt;Spying and mocking&lt;/h2&gt;
&lt;p&gt;One of the popular tools in JS testing is &lt;a class="reference external" href="http://sinonjs.org"&gt;Sinon.js&lt;/a&gt;. There are many useful features allowing to spy and mock behaviour of your application components or dependencies (events, AJAX requests, errors, timers, etc.)&lt;/p&gt;
&lt;p&gt;For example, let's test that events are thrown as we expect :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;YourApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;snap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;marker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;snap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Test event with a &lt;em&gt;spy&lt;/em&gt; callback :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;snap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;event is thrown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;marker&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;marker&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sinon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;marker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;snap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;YourApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;snap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marker&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;called&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Faking user inputs is also possible using &lt;a class="reference external" href="https://github.com/tmcw/happen#readme"&gt;happen&lt;/a&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;zoom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;zooms-in with double click&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getZoom&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;zoomend&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getZoom&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;zoomend&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="c1"&gt;// Simulate double-click&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;happen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dblclick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_container&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="real-world-example"&gt;
&lt;h2&gt;Real world example&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/bbecquet"&gt;Benjamin Becquet&lt;/a&gt; implemented &lt;a class="reference external" href="https://github.com/bbecquet/Leaflet.PolylineDecorator"&gt;some linear referencing utilities&lt;/a&gt; for Leaflet. So did we last year at &lt;a class="reference external" href="http://makina-corpus.com"&gt;Makina Corpus&lt;/a&gt; ! We thus decided to merge our code base in a proper way :)&lt;/p&gt;
&lt;p&gt;We both are making our first steps with &lt;em&gt;Mocha&lt;/em&gt;, and didn't really started to build up the whole code, but you still can have a look at &lt;a class="reference external" href="https://github.com/makinacorpus/Leaflet.GeometryUtil"&gt;the repository&lt;/a&gt;, for its Makefile, Travis setup, usage of JSDocs or Chai.js...&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;By the way, &lt;em&gt;Secrets of the Javascript Ninja&lt;/em&gt; by John Resig and Bear Bibeault is a wonderful book !&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="leaflet"></category><category term="gis"></category><category term="mocha"></category><category term="javascript"></category></entry><entry><title>Subtivals, ready for Cinelatino !</title><link href="https://blog.mathieu-leplatre.info/subtivals-ready-for-cinelatino.html" rel="alternate"></link><published>2013-03-15T00:00:00+01:00</published><updated>2013-03-15T00:00:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2013-03-15:/subtivals-ready-for-cinelatino.html</id><summary type="html">&lt;p&gt;The &lt;a class="reference external" href="http://www.cinelatino.com.fr"&gt;film festival CineLatino in Toulouse&lt;/a&gt;
opens its doors today ! And I've just delivered the source package of version Subtivals 1.5.0
to the building robots of Launchpad !&lt;/p&gt;
&lt;img alt="" class="align-left" src="/images/symbol-deafness.png" /&gt;
&lt;p&gt;During the festival, Subtivals will not simply be used for captioning, it will be the
key tool for the &lt;a class="reference external" href="http://www.cinelatino.com.fr/contenu/accessibilite-pour-les-sourds-2013"&gt;projection of ‚Ä¶&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a class="reference external" href="http://www.cinelatino.com.fr"&gt;film festival CineLatino in Toulouse&lt;/a&gt;
opens its doors today ! And I've just delivered the source package of version Subtivals 1.5.0
to the building robots of Launchpad !&lt;/p&gt;
&lt;img alt="" class="align-left" src="/images/symbol-deafness.png" /&gt;
&lt;p&gt;During the festival, Subtivals will not simply be used for captioning, it will be the
key tool for the &lt;a class="reference external" href="http://www.cinelatino.com.fr/contenu/accessibilite-pour-les-sourds-2013"&gt;projection of two movies specifically&lt;/a&gt;,
for which some very rich deaf-specific subtitles have been prepared !&lt;/p&gt;
&lt;p&gt;As the same time, we are receiving very positive feedback from users in Turkey,
Poland, Greece... thank you all !&lt;/p&gt;
&lt;div class="section" id="now-a-mac-os-x-demo"&gt;
&lt;h2&gt;Now a Mac OS X demo&lt;/h2&gt;
&lt;p&gt;In addition to the &lt;a class="reference external" href="http://mathieu-leplatre.info/media/subtivals/subtivals-setup-1.4.1-demo.exe"&gt;Windows demo version&lt;/a&gt;, &lt;a class="reference external" href="http://twitter.com/mallox"&gt;mallox&lt;/a&gt;
packaged a &lt;a class="reference external" href="http://mathieu-leplatre.info/media/subtivals/subtivals-setup-1.4.0-demo.dmg"&gt;Mac OS X automatic installer&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/subtivals-1.4-macos.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="whats-new-in-1-5"&gt;
&lt;h2&gt;What‚Äôs new in 1.5&lt;/h2&gt;
&lt;p&gt;We mainly reworked the subtitle positioning system, in order to support
linespacing control, absolute and relative positions, using &lt;tt class="docutils literal"&gt;PlayResX&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;PlayResY&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/traxtech/subtivals/blob/master/debian/changelog"&gt;Changelog for more info...&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="get-it"&gt;
&lt;h2&gt;Get it !&lt;/h2&gt;
&lt;p&gt;Subtivals is released under &lt;a class="reference external" href="http://www.gnu.org/copyleft/gpl.html"&gt;GPL&lt;/a&gt;,
this means you can use, access the source code, modify, package, distribute the software,
as long as it remains GPL.&lt;/p&gt;
&lt;p&gt;Like previous versions, we provide packages for Ubuntu. If you already
installed it, it will be updated automatically. Otherwise, it's just simple as :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo add-apt-repository ppa:mathieu.leplatre/subtivals
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install subtivals
&lt;/pre&gt;
&lt;p&gt;Regarding Mac OS and Windows, we still follow &lt;a class="reference external" href="http://gcompris.net/-Download-"&gt;Bruno‚Äôs approach&lt;/a&gt; :
we sell the installers on proprietary operating systems, in order to promote GNU/Linux.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="subtivals"></category><category term="subtitles"></category><category term="toulouse"></category><category term="accessibility"></category><category term="qt"></category><category term="c++"></category></entry><entry><title>Django : Do not forget Do Not Track</title><link href="https://blog.mathieu-leplatre.info/django-do-not-forget-do-not-track.html" rel="alternate"></link><published>2013-03-01T00:00:00+01:00</published><updated>2013-03-01T00:00:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2013-03-01:/django-do-not-forget-do-not-track.html</id><summary type="html">&lt;p&gt;If you (fooly) Sail¬© on the Web¬Æ without &lt;a class="reference external" href="http://www.ghostery.com/"&gt;Ghostery‚Ñ¢&lt;/a&gt;,
this website is currently tracking you. Sad news, but there are indeed 3 widgets
(Disqus, Piwik and Twitter on the About page) that may collect data about your presence here.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://www.mozilla.org/en-US/dnt/"&gt;Do-Not-Track&lt;/a&gt; initiative consists in
avoiding user tracking, using an HTTP ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you (fooly) Sail¬© on the Web¬Æ without &lt;a class="reference external" href="http://www.ghostery.com/"&gt;Ghostery‚Ñ¢&lt;/a&gt;,
this website is currently tracking you. Sad news, but there are indeed 3 widgets
(Disqus, Piwik and Twitter on the About page) that may collect data about your presence here.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://www.mozilla.org/en-US/dnt/"&gt;Do-Not-Track&lt;/a&gt; initiative consists in
avoiding user tracking, using an HTTP header, sent by the browser.
It is a voluntary process, and we should honour it when we can ! &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is a quick way of respecting privacy in your Django websites.&lt;/p&gt;
&lt;p&gt;We use a context processor to spread the word accross all templates.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# context_processors.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;donottrack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;donottrack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_DNT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can then disable spying widgets and tools, such as Google Analytics...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% load ganalytics %}

{% if not donottrack %}
  {% ganalytics %}
{% endif %}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;...or share buttons !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;social-buttons cf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  {% if donottrack %}
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://wikipedia.org/wiki/Do_Not_Track&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{% trans &amp;quot;Do-Not-Track is set.&amp;quot; %}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  {% else %}
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;//twitter.com/share&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;socialite twitter-share&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ TITLE }} {{ URL }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;vhidden&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{% trans &amp;quot;Twitter&amp;quot; %}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  {% endif %}
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We now need a middleware to add vary headers (for cache control), since content
depends on this header.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# middleware.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.cache&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch_vary_headers&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DoNotTrackMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;patch_vary_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DNT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add those to your &lt;tt class="docutils literal"&gt;TEMPLATE_CONTEXT_PROCESSORS&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;MIDDLEWARE_CLASSES&lt;/tt&gt; settings and you're done.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; : There are reusable apps doing just that if you prefer : &lt;a class="reference external" href="https://github.com/mozilla/django-dnt"&gt;django-dnt&lt;/a&gt;,
&lt;a class="reference external" href="https://github.com/benspaulding/django-donottrack/"&gt;django-donottrack&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I wonder how I could do that with a static blog. Using headers-based rewrite condition ?&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="Dev"></category><category term="django"></category><category term="mozilla"></category><category term="privacy"></category></entry><entry><title>Subtivals 1.4 is out</title><link href="https://blog.mathieu-leplatre.info/subtivals-14-is-out.html" rel="alternate"></link><published>2013-01-08T00:00:00+01:00</published><updated>2013-01-08T00:00:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2013-01-08:/subtivals-14-is-out.html</id><summary type="html">&lt;p&gt;Since the &lt;a class="reference external" href="/announcing-subtivals-realtime-subtitles-for-film-festivals.html"&gt;article introducing Subtivals&lt;/a&gt; was
published, a lot of exciting things happened ! The first reward was the
&lt;a class="reference external" href="http://www.cinelatino.com.fr/"&gt;festival of Cinelatino&lt;/a&gt; in Toulouse, which had a major focus on accessibility this year.
Subtivals was used successfully : subtitles had never been so beautiful and refined,
and the public really acknowledged the ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since the &lt;a class="reference external" href="/announcing-subtivals-realtime-subtitles-for-film-festivals.html"&gt;article introducing Subtivals&lt;/a&gt; was
published, a lot of exciting things happened ! The first reward was the
&lt;a class="reference external" href="http://www.cinelatino.com.fr/"&gt;festival of Cinelatino&lt;/a&gt; in Toulouse, which had a major focus on accessibility this year.
Subtivals was used successfully : subtitles had never been so beautiful and refined,
and the public really acknowledged the efforts !&lt;/p&gt;
&lt;p&gt;Along the year we were in contact with people from Spain, Portugal, Canada,
Lebanon, Greece, Russia, Mexico... and the interest they showed in our tool
really made us cheerful and enthusiasts ! We had the proof that Subtivals
can be used in many contexts, from primary school performances to short-movie
festivals, through cinematheques and movie transcribers...&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/subtivals-arabic.png" /&gt;
&lt;div class="section" id="subtivals-a-surtitling-captioning-subtitling-program"&gt;
&lt;h2&gt;Subtivals, a surtitling / captioning / subtitling program&lt;/h2&gt;
&lt;p&gt;I usually have difficulties at explaining Subtivals goals, since its usage
is very specific to the world of movie projection.&lt;/p&gt;
&lt;p&gt;In addition, the activity of projecting subtitles on top of a movie has many names (soft-titling, surtitling,
supertitling, electronic subtitles, virtual subtitles or even &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Closed_captioning"&gt;closed
captioning&lt;/a&gt;...) making it harder for such
a tool to become visible on the Web.&lt;/p&gt;
&lt;p&gt;Subtivals won‚Äôt transcribe sound and perform voice recognition ! It is a
projection software, with fancy subtitles and advanced positioning, necessary
to reproduce music, ambiance, dialogs and context for the hard of hearing.&lt;/p&gt;
&lt;p&gt;Subtivals is very stable, very easy, very comfortable for the operator,
and particularly bullet-proof : subtitling should never fail in live!
Its particular strength lies in the control of the projection,
with a very good cooperation between automatic and manual modes.&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/subtivals-1.4dev-crop-win32.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="whats-new-in-1-4"&gt;
&lt;h2&gt;What‚Äôs new in 1.4&lt;/h2&gt;
&lt;p&gt;Since the version 1.0, we improved a lot of things, and added many features
(see &lt;a class="reference external" href="https://github.com/traxtech/subtivals/blob/master/debian/changelog"&gt;changelog&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Among them :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Subrip (SRT) support&lt;/li&gt;
&lt;li&gt;Subtitles progress highlighting&lt;/li&gt;
&lt;li&gt;Better interactions (shortcuts, scrolling)&lt;/li&gt;
&lt;li&gt;Text outlining and fullscreen&lt;/li&gt;
&lt;li&gt;Characters per second feedback&lt;/li&gt;
&lt;li&gt;ASS absolute positioning support&lt;/li&gt;
&lt;li&gt;Styles edition (colors, font, size, margins, alignments)&lt;/li&gt;
&lt;li&gt;Better calibration screen&lt;/li&gt;
&lt;li&gt;Mac OS version installation package&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From now, if you have a video mixer, with chroma-key support, then a separate
projector is not necessary for inlaying subtitles !&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/subtivals-chromakey.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="get-it"&gt;
&lt;h2&gt;Get it !&lt;/h2&gt;
&lt;p&gt;Subtivals is released under &lt;a class="reference external" href="http://www.gnu.org/copyleft/gpl.html"&gt;GPL&lt;/a&gt;,
this means you can use, access the source code, modify, package, distribute the software,
as long as it remains GPL.&lt;/p&gt;
&lt;p&gt;Like previous versions, we provide packages for Ubuntu. If you already
installed it, it will be updated automatically. Otherwise, it's just simple as :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo add-apt-repository ppa:mathieu.leplatre/subtivals
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install subtivals
&lt;/pre&gt;
&lt;p&gt;Regarding Mac OS and Windows, we still follow &lt;a class="reference external" href="http://gcompris.net/-Download-"&gt;Bruno‚Äôs approach&lt;/a&gt; :
we sell the installers on proprietary operating systems, in order to promote GNU/Linux.&lt;/p&gt;
&lt;p&gt;But from now on, we also distribute a demo version ! &lt;a class="reference external" href="http://mathieu-leplatre.info/media/subtivals/subtivals-setup-1.4.1-demo.exe"&gt;Download it
here&lt;/a&gt; !&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="subtivals"></category><category term="subtitles"></category><category term="accessibility"></category><category term="qt"></category><category term="c++"></category></entry><entry><title>Cheap debugging of PostgreSQL triggers in Django</title><link href="https://blog.mathieu-leplatre.info/cheap-debugging-of-postgresql-triggers-in-django.html" rel="alternate"></link><published>2012-10-22T12:25:00+02:00</published><updated>2012-10-22T12:25:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2012-10-22:/cheap-debugging-of-postgresql-triggers-in-django.html</id><summary type="html">&lt;p&gt;Lately, we were hacking on PostgreSQL (PostGIS) triggers, and we quickly felt
like debugging our code... Here is a cheap and quick way of printing out
triggers variables and context through Django.&lt;/p&gt;
&lt;div class="section" id="postgresql-server-configuration"&gt;
&lt;h2&gt;PostgreSQL server configuration&lt;/h2&gt;
&lt;p&gt;In &lt;em&gt;postgresql.conf&lt;/em&gt;, adjust the minimum level of notice sent to the client :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
client_min_messages = log ‚Ä¶&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Lately, we were hacking on PostgreSQL (PostGIS) triggers, and we quickly felt
like debugging our code... Here is a cheap and quick way of printing out
triggers variables and context through Django.&lt;/p&gt;
&lt;div class="section" id="postgresql-server-configuration"&gt;
&lt;h2&gt;PostgreSQL server configuration&lt;/h2&gt;
&lt;p&gt;In &lt;em&gt;postgresql.conf&lt;/em&gt;, adjust the minimum level of notice sent to the client :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
client_min_messages = log
&lt;/pre&gt;
&lt;p&gt;Note that this does not affect logging verbosity on server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="catch-messages-in-django"&gt;
&lt;h2&gt;Catch messages in Django&lt;/h2&gt;
&lt;p&gt;For a specific model :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;notice&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="p"&gt;:]:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;notice&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or globally, using &lt;tt class="docutils literal"&gt;post_save&lt;/tt&gt; signals &lt;em&gt;(can be verbose)&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.signals&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;post_save&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_notices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;notice&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notices&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;notice&lt;/span&gt;
&lt;span class="n"&gt;post_save&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;show_notices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="let-your-trigger-be-talkative"&gt;
&lt;h2&gt;Let your trigger be talkative&lt;/h2&gt;
&lt;p&gt;You can basically print out values, arrays, functions results, records...&lt;/p&gt;
&lt;pre class="literal-block"&gt;
RAISE LOG '% has geom %', NEW.id, ST_AsEWKT(NEW.geom);
&lt;/pre&gt;
&lt;p&gt;Will output something like &lt;tt class="docutils literal"&gt;LOG:&amp;nbsp; 3 has geom SRID=4326;POINT(0 0)&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
FOR record IN SELECT * FROM table
LOOP
    RAISE LOG 'Found %', record;
END LOOP;
&lt;/pre&gt;
&lt;p&gt;Will output something like &lt;tt class="docutils literal"&gt;LOG:&amp;nbsp; Found (a,b,c)&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
intersections_on_new := ARRAY[]::float[];
FOR pk IN SELECT ST_Line_Locate_Point(NEW.geom, (ST_Dump(ST_Intersection(other.geom, NEW.geom))).geom)
LOOP
    intersections_on_new := array_append(intersections_on_new, pk);
END LOOP;
RAISE LOG 'Intersects at %', intersections_on_new;
&lt;/pre&gt;
&lt;p&gt;Will output something like &lt;tt class="docutils literal"&gt;LOG:&amp;nbsp; Intersects at {0.5,0.3}&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="one-more-thing"&gt;
&lt;h2&gt;One more thing...&lt;/h2&gt;
&lt;p&gt;If you load your triggers source file through Django (like a &lt;tt class="docutils literal"&gt;post_migrate&lt;/tt&gt; signal or so),
and thus with &lt;em&gt;psycopg2&lt;/em&gt;, you might face that nasty internal quirck :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
postgresql_psycopg2/base.py&amp;quot;, line 52, in execute
    return self.cursor.execute(query, args)
IndexError: tuple index out of range
&lt;/pre&gt;
&lt;p&gt;This is due to &lt;tt class="docutils literal"&gt;%&lt;/tt&gt; characters, that you have to escape, replacing them with &lt;tt class="docutils literal"&gt;%%&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="django"></category><category term="postgresql"></category><category term="postgis"></category></entry><entry><title>Leaflet Tiles in Lambert 93 projection (2154)</title><link href="https://blog.mathieu-leplatre.info/leaflet-tiles-in-lambert-93-projection-2154.html" rel="alternate"></link><published>2012-08-05T00:00:00+02:00</published><updated>2012-08-05T00:00:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2012-08-05:/leaflet-tiles-in-lambert-93-projection-2154.html</id><summary type="html">&lt;div class="section" id="what-purpose"&gt;
&lt;h2&gt;What purpose ?&lt;/h2&gt;
&lt;p&gt;Ideally, unless living in Lapland, we should not be bothered that much about maps projections !
Unfortunately, in practice, there are a few contexts in which you simply
can't avoid braving them. For example, if you must show a raster layer with texts, and don't control its production.&lt;/p&gt;
&lt;p&gt;Reprojected ‚Ä¶&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="what-purpose"&gt;
&lt;h2&gt;What purpose ?&lt;/h2&gt;
&lt;p&gt;Ideally, unless living in Lapland, we should not be bothered that much about maps projections !
Unfortunately, in practice, there are a few contexts in which you simply
can't avoid braving them. For example, if you must show a raster layer with texts, and don't control its production.&lt;/p&gt;
&lt;p&gt;Reprojected pictures loose sharpness ! Your map may have to support the original
local projection.&lt;/p&gt;
&lt;p&gt;Let's see what Leaflet offers on this matter...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-the-map"&gt;
&lt;h2&gt;Configuring the map&lt;/h2&gt;
&lt;p&gt;My knowledge about local projections machinery is (very) light !&lt;/p&gt;
&lt;p&gt;I could demystify a couple of concepts with, among others, Tom Mac Wright's &lt;a class="reference external" href="http://macwright.org/2012/01/27/projections-understanding.html"&gt;educational&lt;/a&gt;
&lt;a class="reference external" href="http://macwright.org/2012/05/15/how-web-maps-work.html"&gt;articles&lt;/a&gt; and &lt;a class="reference external" href="http://macwright.org/2012/03/12/project-it-yourself.html"&gt;tools&lt;/a&gt;, or &lt;a class="reference external" href="http://blog.kartena.se/local-projections-in-a-world-of-spherical-mercator/"&gt;Kartena's article on Leaflet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nevertheless, the whole thing is pretty straightforward to setup, especially when
you look at &lt;a class="reference external" href="http://blog.thematicmapping.org/2012/07/using-custom-projections-with-tilecache.html"&gt;Bjorn Sandvik's working example&lt;/a&gt; !&lt;/p&gt;
&lt;p&gt;Download Leaflet, Proj4js and Proj4Leaflet, and fasten your seat belt !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;leaflet.css&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;js/leaflet.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;js/proj4js-compressed.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;js/proj4leaflet.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your layer characterics :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Your source tile layer extent, expressed in local projection&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;700000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;6325197&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1060000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;6617738&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Maximum resolution in meters per pixel (largest area side / tile size).&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;maxResolution&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1406.25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Scale for each level&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;maxResolution&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Coordinate to grid transformation matrix&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;transformation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Transformation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assemble in Leaflet :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Official Spatial Reference from http://www.spatialreference.org/ref/epsg/2154/&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;crs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CRS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;proj4js&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;EPSG:2154&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;+proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="nx"&gt;transformation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;crs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// required by Leaflet 0.4&lt;/span&gt;

&lt;span class="c1"&gt;// Location of tiles (see next paragraph)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ignLayer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TileLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://localhost:8080/1.0.0/ign/{z}/{x}/{y}.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;continuousWorld&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// very important&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;map&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;crs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;crs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;continuousWorld&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// very important&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;layers&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ignLayer&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Initial view&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LatLng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;44.65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;6.12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Universal Lat/Lng&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;zoom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="" class="align-center" src="/images/leaflet-l93.png" /&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/kartena/Proj4Leaflet/issues/8"&gt;kokoni&lt;/a&gt; suggests to use
an overlay layer to debug tile numbering :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;canvasTiles&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tileLayer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;canvasTiles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawTile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tilePoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strokeStyle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;256&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tilePoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tilePoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvasTiles&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="" class="align-center" src="/images/leaflet-tiles-overlay.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="serve-the-tiles-from-a-wms"&gt;
&lt;h2&gt;Serve the tiles from a WMS&lt;/h2&gt;
&lt;p&gt;Adapt with the &lt;tt class="docutils literal"&gt;bbox&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;maxesolution&lt;/tt&gt;, as in the map, and save this configuration to &lt;em&gt;tilecache.cfg&lt;/em&gt;.
It also assumes to match the &lt;tt class="docutils literal"&gt;scale&lt;/tt&gt; we chose above (divided by 2 at each level) :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[ign]
type=WMSLayer
layers=scan100,scan25
url=http://server.carto.fr/wms?
extension=jpg
tms_type=google
srs=EPSG:2154
bbox=700000,6325197,1060000,6617738
maxResolution=1142.7383

[cache]
type=GoogleDisk
base=/tmp/
&lt;/pre&gt;
&lt;p&gt;In order to run this configuration, just install :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
virtualenv .
source bin/activate
pip install TileCache
pip install Paste
&lt;/pre&gt;
&lt;p&gt;And either run it locally with &lt;tt class="docutils literal"&gt;tilecache_http_server.py&lt;/tt&gt; or tile the pyramid once
with &lt;tt class="docutils literal"&gt;tilecache_seed.py ign 0 10&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Finally, adjust the tile url in your map config !&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="first-impressions"&gt;
&lt;h2&gt;First impressions...&lt;/h2&gt;
&lt;p&gt;It works !&lt;/p&gt;
&lt;p&gt;A couple of things seem implicit, and Leaflet feels a bit fragile with this. Changing
a value somewhere might break an hidden assumption somewhere else.&lt;/p&gt;
&lt;p&gt;Also, the documentation can be misleading : it says to set &lt;tt class="docutils literal"&gt;continuousWorld&lt;/tt&gt; to &lt;em&gt;true&lt;/em&gt; for
things that don't represent the world :)&lt;/p&gt;
&lt;p&gt;We'll try to push Leaflet limits in the next days at &lt;a class="reference external" href="http://makina-corpus.com"&gt;Makina Corpus&lt;/a&gt;, especially 0.4 branch,
we'll keep posting if we face anything worth sharing :)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="leaflet"></category><category term="gis"></category><category term="javascript"></category></entry><entry><title>landez : tiles post-processing</title><link href="https://blog.mathieu-leplatre.info/landez-tiles-post-processing.html" rel="alternate"></link><published>2012-05-29T14:45:00+02:00</published><updated>2012-05-29T14:45:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2012-05-29:/landez-tiles-post-processing.html</id><summary type="html">&lt;p&gt;Some weeks ago, I started to refactor &lt;a class="reference external" href="https://github.com/makinacorpus/landez"&gt;landez&lt;/a&gt; (timidly).
But smart caching and post-processing of WMS maps were expected in my last project, so it gave me
a great boost : Landez 2.0 has landed ! :)&lt;/p&gt;
&lt;p&gt;The base code is much clearer, and a few new features came out ! Among them ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some weeks ago, I started to refactor &lt;a class="reference external" href="https://github.com/makinacorpus/landez"&gt;landez&lt;/a&gt; (timidly).
But smart caching and post-processing of WMS maps were expected in my last project, so it gave me
a great boost : Landez 2.0 has landed ! :)&lt;/p&gt;
&lt;p&gt;The base code is much clearer, and a few new features came out ! Among them, the ability to
apply image filters to your maps !&lt;/p&gt;
&lt;div class="section" id="grayscale-conversion"&gt;
&lt;h2&gt;Grayscale conversion&lt;/h2&gt;
&lt;p&gt;Not the funniest one of course, but quite handy to highlight map content !&lt;/p&gt;
&lt;img alt="" src="/images/landez-grayscale.jpg" /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;landez&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MBTilesBuilder&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;landez.filters&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;GrayScale&lt;/span&gt;

&lt;span class="n"&gt;overlay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MBTilesBuilder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;overlay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GrayScale&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="color-to-alpha"&gt;
&lt;h2&gt;Color to Alpha&lt;/h2&gt;
&lt;p&gt;If the tiles you overlay are mainly white, they might make your background layer brighter.
Therefore, adding a filter replacing white by transparent will nicely blend your
top layer without lightening the global result :&lt;/p&gt;
&lt;img alt="" src="/images/landez-overlay.jpg" /&gt;
&lt;img alt="" src="/images/landez-blend.jpg" /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;landez&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TilesManager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ImageExporter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;landez.filters&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ColorToAlpha&lt;/span&gt;

&lt;span class="n"&gt;overlay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TilesManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tiles_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://an.osm.mirror.org/&lt;/span&gt;&lt;span class="si"&gt;{z}&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{x}&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{y}&lt;/span&gt;&lt;span class="s1"&gt;.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;overlay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ColorToAlpha&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#ffffff&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;orthophoto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImageExporter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wms_server&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://server/wms&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;wms_layers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;orthophoto&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;orthophoto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_layer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;overlay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="continuous-integration"&gt;
&lt;h2&gt;Continuous Integration&lt;/h2&gt;
&lt;p&gt;A &lt;a class="reference external" href="http://travis-ci.org/#!/makinacorpus/landez"&gt;Travis job&lt;/a&gt; was setup and allows
me to improve the testing strictness :)&lt;/p&gt;
&lt;p&gt;The Travis configuration has some kind of magic, just drop one file and enable the hook in your Github repo :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
language: python
python:
  - 2.6
  - 2.7
install:
  - pip install Pillow
  - python setup.py develop
script:  python -m landez.tests
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="next-steps"&gt;
&lt;h2&gt;Next steps...&lt;/h2&gt;
&lt;p&gt;I hope to get the opportunity to develop new post-processing filters, as pretty as those
&lt;a class="reference external" href="http://mapbox.com/blog/tilemill-compositing-operations-preview/"&gt;coming-up in MapBox Tilemill&lt;/a&gt; !&lt;/p&gt;
&lt;p&gt;PerryGeo wrote &lt;a class="reference external" href="https://github.com/perrygeo/python-mbtiles"&gt;python-mbtiles&lt;/a&gt;
which might be a good candidate for low-level access of MBTiles content.
I like the idea of a common python stack for reading and writing, it is not very clear to
me &lt;a class="reference external" href="https://github.com/mapbox/mbtiles-spec/wiki/Implementations"&gt;which one&lt;/a&gt; will emerge as the best one though...&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="python"></category><category term="gis"></category><category term="landez"></category></entry><entry><title>Simple and funky Web map printing</title><link href="https://blog.mathieu-leplatre.info/simple-and-funky-web-map-printing.html" rel="alternate"></link><published>2012-05-02T00:00:00+02:00</published><updated>2012-05-02T00:00:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2012-05-02:/simple-and-funky-web-map-printing.html</id><summary type="html">&lt;p&gt;Strangely, users still insist in having Web page print capabilities, mostly to
share, export or archive what they see. Even if relevant permalinks are
often acceptable, we can't always dissuade them from printing :)&lt;/p&gt;
&lt;p&gt;And when it comes to Web maps, printing can be a nightmare ! Even though most of the ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Strangely, users still insist in having Web page print capabilities, mostly to
share, export or archive what they see. Even if relevant permalinks are
often acceptable, we can't always dissuade them from printing :)&lt;/p&gt;
&lt;p&gt;And when it comes to Web maps, printing can be a nightmare ! Even though most of the time,
the needs involve a nice landscape PDF file with the map, a legend and the company logo.
For this, designing CSS print stylesheets and using the browser &lt;em&gt;print&lt;/em&gt; shortcut is not always
helpful.&lt;/p&gt;
&lt;p&gt;I present here a simple solution &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt; based on headless Webkit screenshots, permalinks,
SVG templates (&lt;em&gt;WYSIWYG&lt;/em&gt;), and PDF conversion.&lt;/p&gt;
&lt;div class="section" id="what-you-see-is-what-you-print"&gt;
&lt;h2&gt;What You See Is What You Print&lt;/h2&gt;
&lt;p&gt;In the following (short) video, we can see :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a map with dynamic content (&lt;em&gt;GeoJSON&lt;/em&gt;), bound to a form for attribute filtering and a legend
refreshed upon data ranges modifications ;&lt;/li&gt;
&lt;li&gt;a &lt;em&gt;Print&lt;/em&gt; button that delivers the current view as &lt;em&gt;PDF&lt;/em&gt; ;&lt;/li&gt;
&lt;li&gt;a landscape printout in which the map view, the legend, the filter form values were nicely inserted.&lt;/li&gt;
&lt;/ul&gt;
&lt;video id="webprint" width="560" controls="controls"&gt;
  &lt;source src="http://mathieu-leplatre.info/media/20120501-print.ogv" type="video/ogg" /&gt;
  Your browser does not support the video tag.
&lt;/video&gt;&lt;p&gt;(&lt;em&gt;BTW, small boo-booÔªø in last screen: 'montain' instead of 'mountain'&lt;/em&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="kids-you-can-do-this-at-home"&gt;
&lt;h2&gt;Kids, you can do this at home&lt;/h2&gt;
&lt;p&gt;Here is how we did it :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a Web page with a &amp;quot;stateful&amp;quot; permalink (&lt;em&gt;i.e. restore the map and page state using anchors, location hash, etc. ;&lt;/em&gt;).
Backbone.js &amp;amp; co. are meant for this ;&lt;/li&gt;
&lt;li&gt;A color scale built client-side from the resulting dataset, using &lt;a class="reference external" href="https://github.com/gka/chroma.js"&gt;Chroma.js&lt;/a&gt;,
to colorize the map items and populate the legend entries ;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/makinacorpus/django-screamshot"&gt;django-screamshot&lt;/a&gt;, a Web page
screenshot application, relying on &lt;a class="reference external" href="http://casperjs.org/"&gt;CasperJS&lt;/a&gt;. Spooky! ;&lt;/li&gt;
&lt;li&gt;a SVG landscape A4 document, edited with &lt;em&gt;Inkscape&lt;/em&gt;, as a Django template in which we placed simple tags (&lt;tt class="docutils literal"&gt;{{ filter.age_min }}&lt;/tt&gt;) for texts,
the &lt;tt class="docutils literal"&gt;{% base64capture %}&lt;/tt&gt; tag for the map screenshot, and a couple of arithmetics tags to
recreate a nice vectorial legend using the color scale entries;&lt;/li&gt;
&lt;li&gt;a Django view that receives the current page context (posted in &lt;em&gt;JS&lt;/em&gt;), renders the SVG (&lt;em&gt;will thus perform the screenshot&lt;/em&gt;),
and converts it to PDF ;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Quite straightforward, a couple of hours to put together, relatively easy
to deploy, obviously meet most users needs... these hacks are our happiness !&lt;/p&gt;
&lt;p&gt;If you want to know more about some missing parts, feel free to ask ! I could release stuff or just post some snippets...&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;from now on, I shall precise : even if it can cover most needs, it won't be adequate in all situations.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="print"></category><category term="django"></category><category term="web"></category><category term="gis"></category><category term="django-screamshot"></category></entry><entry><title>Des cartes d'un autre monde, la suite</title><link href="https://blog.mathieu-leplatre.info/des-cartes-dun-autre-monde-la-suite-fr.html" rel="alternate"></link><published>2012-04-18T00:00:00+02:00</published><updated>2012-04-18T00:00:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2012-04-18:/des-cartes-dun-autre-monde-la-suite-fr.html</id><summary type="html">&lt;div class="section" id="bravo-aux-organisateurs"&gt;
&lt;h2&gt;Bravo aux organisateurs !&lt;/h2&gt;
&lt;p&gt;L'√©dition 2012 des rencontres Django-fr a mis la barre tr√®s haut ! Ce fut un plaisir
de retrouver, ou rencontrer, autant de gens sympathiques et int√©ressants dans un cadre
aussi agr√©able :)&lt;/p&gt;
&lt;p&gt;Comme l'a soulign√© Olivier &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;, cela va bien au del√† de la techno qui f√©d√®re la communaut√© ‚Ä¶&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="bravo-aux-organisateurs"&gt;
&lt;h2&gt;Bravo aux organisateurs !&lt;/h2&gt;
&lt;p&gt;L'√©dition 2012 des rencontres Django-fr a mis la barre tr√®s haut ! Ce fut un plaisir
de retrouver, ou rencontrer, autant de gens sympathiques et int√©ressants dans un cadre
aussi agr√©able :)&lt;/p&gt;
&lt;p&gt;Comme l'a soulign√© Olivier &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;, cela va bien au del√† de la techno qui f√©d√®re la communaut√© ;
les membres partagent aussi un esprit, une vision, des approches, qui transpassent
l'outil ! Agilit√©, pragmatisme, KISS, DRY, PEP20...&lt;/p&gt;
&lt;p&gt;Au menu, les probl√©matiques de scaling √©taient pr√©dominantes, Django propulse des sites √†
gros volume, comme &lt;em&gt;Liberation.fr&lt;/em&gt;, &lt;em&gt;20minutes.fr&lt;/em&gt;, &lt;em&gt;Mozilla&lt;/em&gt;, &lt;em&gt;Autolib&lt;/em&gt;, repr√©sent√©s
pendant ces rencontres, mais aussi &lt;em&gt;Instagram&lt;/em&gt;, &lt;em&gt;Lanyrd&lt;/em&gt;, &lt;em&gt;Disqus&lt;/em&gt;... autant d'exp√©riences √† partager!
Ce fut aussi un honneur d'accueillir deux invit√©s nord-am√©ricains, python Lords chez &lt;em&gt;Heroku&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Cette ann√©e, je pr√©sentais une approche √† contre-courant pour publier des donn√©es
cartographiques sur le Web :&lt;/p&gt;
&lt;blockquote&gt;
‚Äú Comment publier des donn√©es cartographiques, aussi simplement qu'on
publie une image ? Il existe un monde o√π Django expose lui-m√™me des
cartes interactives, sans d√©ployer l'artillerie habituelle !
Une approche √† contre-courant se pr√™tant parfaitement √† la mise en
valeur quasi-imm√©diate d'informations geographiques, comme celles
lib√©r√©es par votre ville ! ‚Äù&lt;/blockquote&gt;
&lt;iframe src="http://www.slideshare.net/slideshow/embed_code/12698176" width="560" height="432" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"&gt;&lt;/iframe&gt;&lt;p&gt;&lt;strong&gt;Pour r√©sumer&lt;/strong&gt; : √©loignons-nous de l'OGC (WMS, WFS,...) quand il s'agit
juste de publier une carte sur une page Web.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="comment-rafraichir-les-cartes"&gt;
&lt;h2&gt;Comment rafra√Æchir les cartes ?&lt;/h2&gt;
&lt;p&gt;Je reprends une citation remont√©e par &lt;em&gt;twidi&lt;/em&gt; :&lt;/p&gt;
&lt;blockquote&gt;
‚Äú There are only two hard things in Computer Science: cache invalidation and naming things ‚Äù
-- Phil Karlton&lt;/blockquote&gt;
&lt;p&gt;Selon la fr√©quence de rafraichissement de vos donn√©es, plusieurs strat√©gies sont
envisageables. Surtout qu'il est rare que l'ensemble de la carte n√©cessite d'√™tre actualis√©.&lt;/p&gt;
&lt;div class="section" id="en-generant-les-tuiles-en-temps-reel"&gt;
&lt;h3&gt;En g√©n√©rant les tuiles en temps r√©el&lt;/h3&gt;
&lt;p&gt;Comme l'expliquait Young Yahn &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;, g√©n√©rer des tuiles en temps r√©el demande
d'avoir une architecture assez trappue et cela s'av√®re stressant √† administrer.&lt;/p&gt;
&lt;p&gt;Cependant c'est possible avec des outils comme &lt;em&gt;tilelive&lt;/em&gt; ou &lt;em&gt;renderd&lt;/em&gt; (Apache &lt;em&gt;mod_tile&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="avec-une-tache-planifiee"&gt;
&lt;h3&gt;Avec une t√¢che planifi√©e&lt;/h3&gt;
&lt;p&gt;Il faut trouver le compromis entre le temps de fabrication de la carte et la fr√©quence
de rafraichissement des donn√©es source.&lt;/p&gt;
&lt;p&gt;S'il s'agit de minutes, rafraichir la carte toutes les heures semble envisageable. La plupart du
temps, une fois par jour suffira.&lt;/p&gt;
&lt;p&gt;Il existe plusieurs outils, comme &lt;a class="reference external" href="/render-your-tilemill-stylesheets-with-landez.html"&gt;landez&lt;/a&gt;,
pour reg√©n√©rer √† intervales r√©guliers votre carte issue de &lt;em&gt;Tilemill&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-la-seconde"&gt;
&lt;h3&gt;√Ä la seconde&lt;/h3&gt;
&lt;p&gt;Pour suivre une flotte de bateaux ou de v√©hicules, il faut que les √©l√©ments soient
d√©plac√©s en temps r√©el sur la carte.&lt;/p&gt;
&lt;p&gt;Il y a plusieurs outils tr√®s efficaces qui se reposent sur les Websockets. J'avais
fait l'application &lt;a class="reference external" href="/des-cartes-collaboratives-avec-livetitude-fr.html"&gt;Livetitude&lt;/a&gt;,
&lt;a class="reference external" href="http://vivid-warrior-6693.herokuapp.com"&gt;disponible en ligne&lt;/a&gt;, qui permet
d'√©diter √† plusieurs une carte de marqueurs, grace √† &lt;em&gt;Pusher&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La biblioth√®que &lt;em&gt;Sharejs&lt;/em&gt;, issue du projet d√©funt Google Wave, permettrait d'aller
plus loin en faisant de l'√©dition collaborative d'attributs de g√©om√©tries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="en-fonction-de-filtres-ou-formulaires"&gt;
&lt;h3&gt;En fonction de filtres ou formulaires&lt;/h3&gt;
&lt;p&gt;Pour redessiner la carte en fonction de filtres, sur des attributs par exemple, l'utilisation
du format GeoJSON s'av√®re assez efficace.&lt;/p&gt;
&lt;p&gt;Votre serveur re√ßoit le formulaire, construit le jeu de donn√©es, et renvoie les
r√©sultats (&lt;em&gt;Features = geometries + attributs&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Cette approche peut s'av√©rer d√©licate selon la taille des jeux de donn√©es. Plusieurs
ruses existent afin de limiter le volume (ex: g√©n√©ralisation progressive selon la zone affich√©e)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="carte-a-echelle-unique"&gt;
&lt;h2&gt;Carte √† √©chelle unique&lt;/h2&gt;
&lt;p&gt;Parfois, pour certaines cartes, une seule vue suffit ! Nul besoin de zoomer, puisque le
ph√©nom√®ne intervient √† une √©chelle en particulier !&lt;/p&gt;
&lt;p&gt;Pensez aux cartes des journaux ! Et vous serez s√©duits par l'excellent &lt;em&gt;Kartograph&lt;/em&gt;,
qui permet de publier des cartes sublimes facilement. Le SVG est manipulable en Javascript,
et permet d'ajouter des √©v√®nements sur les zones.&lt;/p&gt;
&lt;p&gt;Martin Dewulf a publi√© &lt;a class="reference external" href="http://migrationsmap.net"&gt;une jolie carte interactive √† partir de donn√©es ouvertes&lt;/a&gt;.
Le r√©sultat est tr√®s convaincaint, et sort de l'ordinaire.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="requiem-pour-les-trolls"&gt;
&lt;h2&gt;Requiem pour les trolls&lt;/h2&gt;
&lt;p&gt;La citation au d√©but de la pr√©sentation, issue de &lt;em&gt;#whereconf&lt;/em&gt;, √©tait volontairement
provocatrice. Mais de nombreux acteurs du Web et de la cartographie rejoignent
cette id√©e. Par exemple, entre temps, Sean Gillies a r√©it√©r√© :&lt;/p&gt;
&lt;blockquote&gt;
‚Äú How many MapBox and CartoDB like products would there be today if the
Open Source GIS community hadn't gone on a decade long WxS wander? ‚Äú
-- &amp;#64;sgillies, 2012&lt;/blockquote&gt;
&lt;div class="section" id="oriente-communication"&gt;
&lt;h3&gt;Orient√© communication&lt;/h3&gt;
&lt;p&gt;En 12 minutes, c'est tr√®s difficile de pr√©senter tous les aspects, inconv√©nients
et avantages d'une approche √† contre-courant !&lt;/p&gt;
&lt;p&gt;J'ai pr√©sent√© le besoin plus simple de la cartographie sur le Web :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;j'ai des donn√©es √† caract√®re g√©ographique ;&lt;/li&gt;
&lt;li&gt;je veux les afficher sur une page Web avec une carte interactive.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Le cas le plus simple, mais en m√™me temps le plus r√©pandu !&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pas-toujours-d-alternatives-a-l-ogc"&gt;
&lt;h3&gt;Pas toujours d'alternatives √† l'OGC&lt;/h3&gt;
&lt;p&gt;Dans certains contextes, les protocoles OGC sont indispensables :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;interroperabilit√© entre syst√®mes h√©t√©rog√®nes sans m√©diation pr√©alable (&lt;em&gt;serveurs externes, logiciels propri√©taires, etc.&lt;/em&gt;);&lt;/li&gt;
&lt;li&gt;catalogage s√©mantique et syndication des jeux de donn√©es (&lt;em&gt;INSPIRE&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;construction d'une plateforme IDS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;OpenLayers&lt;/em&gt; est la seule biblioth√®que javascript qui a les reins assez solides pour
s'int√©grer dans ces environnements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="savoir-oublier-le-web"&gt;
&lt;h3&gt;Savoir oublier le Web&lt;/h3&gt;
&lt;p&gt;Il faut savoir juger la pertinence d'une application Web. Dans certaines situations,
le Web n'est pas la seule solution pour faire du client-server en multi-utilisateurs.&lt;/p&gt;
&lt;p&gt;L'ann√©e derni√®re par exemple, nous avons d√©velopp√© une application collaborative
pour manipuler des tron√ßons routiers. Nous avons &lt;a class="reference external" href="/merkopolo-a-simple-yet-powerful-starter-kit-for-your-qtc-gis-application.html"&gt;choisi C++/Qt&lt;/a&gt;,
avec PostGIS et des &lt;a class="reference external" href="/access-a-json-webservice-with-qt-c.html"&gt;webservices JSON&lt;/a&gt;,
parce que c'est ce qui se pr√™tait le mieux au besoin ! La m√™me chose en &lt;em&gt;ExtJS&lt;/em&gt; aurait
√©t√© catastrophique !&lt;/p&gt;
&lt;iframe width="560" height="315" src="http://www.youtube.com/embed/7NPQo54NbJ8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://twitter.com/#!/oloynet/status/192295759431995393"&gt;oloynet&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://mapbox.com/blog/rendering-the-world/"&gt;Rendering the World, FOSS4G NA, 2012&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="django"></category><category term="web"></category><category term="gis"></category><category term="livetitude"></category></entry><entry><title>Render your TileMill stylesheets with Landez</title><link href="https://blog.mathieu-leplatre.info/render-your-tilemill-stylesheets-with-landez.html" rel="alternate"></link><published>2012-03-22T00:00:00+01:00</published><updated>2012-03-22T00:00:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2012-03-22:/render-your-tilemill-stylesheets-with-landez.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://mapbox.com/tilemill/"&gt;TileMill&lt;/a&gt; is an amazing tool to design your map, and publish it.
With &lt;a class="reference external" href="http://pypi.python.org/pypi/landez"&gt;landez&lt;/a&gt;, you can easily render it using python,
or do &lt;a class="reference external" href="/landez-introducing-new-features-of-our-tiles-toolbox.html"&gt;whatever comes with the API&lt;/a&gt; !&lt;/p&gt;
&lt;div class="section" id="from-tilemill-to-landez"&gt;
&lt;h2&gt;From TileMill to Landez&lt;/h2&gt;
&lt;p&gt;Use Tilemill to design your map, and export the &lt;a class="reference external" href="http://mapnik.org"&gt;Mapnik&lt;/a&gt; XML stylesheet :&lt;/p&gt;
&lt;img alt="" src="/images/tilemill-export-stylesheet.png" /&gt;
&lt;p&gt;Then simply use &lt;em&gt;landez&lt;/em&gt; with &lt;tt class="docutils literal"&gt;stylefile ‚Ä¶&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://mapbox.com/tilemill/"&gt;TileMill&lt;/a&gt; is an amazing tool to design your map, and publish it.
With &lt;a class="reference external" href="http://pypi.python.org/pypi/landez"&gt;landez&lt;/a&gt;, you can easily render it using python,
or do &lt;a class="reference external" href="/landez-introducing-new-features-of-our-tiles-toolbox.html"&gt;whatever comes with the API&lt;/a&gt; !&lt;/p&gt;
&lt;div class="section" id="from-tilemill-to-landez"&gt;
&lt;h2&gt;From TileMill to Landez&lt;/h2&gt;
&lt;p&gt;Use Tilemill to design your map, and export the &lt;a class="reference external" href="http://mapnik.org"&gt;Mapnik&lt;/a&gt; XML stylesheet :&lt;/p&gt;
&lt;img alt="" src="/images/tilemill-export-stylesheet.png" /&gt;
&lt;p&gt;Then simply use &lt;em&gt;landez&lt;/em&gt; with &lt;tt class="docutils literal"&gt;stylefile&lt;/tt&gt; argument :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;landez&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MBTilesBuilder&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MBTilesBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stylefile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Toulouse-Voirie.xml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;toulouse-voirie.mbtiles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_coverage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bbox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.39&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;43.56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;43.64&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="n"&gt;zoomlevels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;mb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the above example, a &lt;em&gt;MBTiles&lt;/em&gt; file &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;toulouse-voirie.mbtiles&lt;/span&gt;&lt;/tt&gt; will be
created with all rendered tiles. (&lt;strong&gt;Note:&lt;/strong&gt; This won't render UTF-Grid tiles,
since TileMill does not expose this part in the XML stylesheet.)&lt;/p&gt;
&lt;p&gt;If you don't have Mapnik2 installed, you might encounter rendering errors
like : &lt;tt class="docutils literal"&gt;AssertionError: Cannot render tiles without mapnik !&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation-of-mapnik-2"&gt;
&lt;h2&gt;Installation of Mapnik 2&lt;/h2&gt;
&lt;div class="section" id="mapnik2-packages-on-debian-ubuntu"&gt;
&lt;h3&gt;Mapnik2 packages on Debian/Ubuntu&lt;/h3&gt;
&lt;p&gt;In Ubuntu Precise (12.04) or Debian Wheezy (7.0), it's a piece of cake,
the package is available in the repos&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo apt-get install python-mapnik2
&lt;/pre&gt;
&lt;p&gt;In Ubuntu Maverick (10.10), Natty (11.04), Oneiric (11.10), it's quite easy,
there is a PPA, from MapBox&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo apt-add-repository ppa:developmentseed/mapbox
sudo update
sudo apt-get install python-mapnik2
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="mapnik2-and-python-bindings-from-sources"&gt;
&lt;h3&gt;Mapnik2 and python bindings from sources&lt;/h3&gt;
&lt;p&gt;Welcome in the quicksands of installing Mapnik2 python bindings from sources !&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/cspanring"&gt;Christian Spanring&lt;/a&gt; wrote a quick tutorial
to &lt;a class="reference external" href="https://gist.github.com/1314907"&gt;install it from sources on Ubuntu 10.04&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It might be a bit tricky to tweak this tutorial for your distribution. Hopefully, our
colleague &lt;a class="reference external" href="https://github.com/kiorky"&gt;Mathieu&lt;/a&gt; has prepared a &lt;a class="reference external" href="http://minitage.org"&gt;minitage's&lt;/a&gt; &amp;quot;&lt;em&gt;minilay&lt;/em&gt;&amp;quot; for it, &lt;a class="reference external" href="http://pypi.python.org/pypi/mapnik2#minitage"&gt;just follow the few steps&lt;/a&gt;
to compile the whole stack.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="tilemill"></category><category term="landez"></category><category term="gis"></category><category term="howto"></category></entry><entry><title>Announcing Subtivals, realtime subtitles for film festivals</title><link href="https://blog.mathieu-leplatre.info/announcing-subtivals-realtime-subtitles-for-film-festivals.html" rel="alternate"></link><published>2012-03-17T00:00:00+01:00</published><updated>2012-03-17T00:00:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2012-03-17:/announcing-subtivals-realtime-subtitles-for-film-festivals.html</id><summary type="html">&lt;img alt="" src="/images/subtivals-logo.png" /&gt;
&lt;div class="section" id="that-s-how-it-started"&gt;
&lt;h2&gt;That's how it started...&lt;/h2&gt;
&lt;p&gt;Subtitles and captions for the deaf and hard-of-hearing during film festivals
are rarely a priority, at least in France. Thus, most film copies are not
subtitled (except foreign movies shown in their original version).&lt;/p&gt;
&lt;p&gt;At the beginning of last year, &lt;a class="reference external" href="http://st2l.fr"&gt;my friend Lilian&lt;/a&gt; was promoting his ‚Ä¶&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;img alt="" src="/images/subtivals-logo.png" /&gt;
&lt;div class="section" id="that-s-how-it-started"&gt;
&lt;h2&gt;That's how it started...&lt;/h2&gt;
&lt;p&gt;Subtitles and captions for the deaf and hard-of-hearing during film festivals
are rarely a priority, at least in France. Thus, most film copies are not
subtitled (except foreign movies shown in their original version).&lt;/p&gt;
&lt;p&gt;At the beginning of last year, &lt;a class="reference external" href="http://st2l.fr"&gt;my friend Lilian&lt;/a&gt; was promoting his project
of improving and facilitating the projection of subtitles during film festivals.
His activity consists in superimposing subtitles or projecting them on a
separate display below the screen.&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/subtivals-superimposed.png" /&gt;
&lt;p&gt;In this way, subtitling dissociates from the movie reel, unlike DVDs for example.
An operator is thence in charge of keeping captions synchroneous. It is sometimes called
&amp;quot;&lt;em&gt;virtual subtitling&lt;/em&gt;&amp;quot;; it is cheaper and easier than subtitled hard copies.&lt;/p&gt;
&lt;p&gt;Since there was no suitable Open Source tools to fulfill these precise needs,
&lt;a class="reference external" href="http://gedial.com"&gt;Arnaud&lt;/a&gt; and I gave him a hand. We developed &lt;a class="reference external" href="https://github.com/traxtech/subtivals"&gt;Subtivals&lt;/a&gt;,
a Free Software with simplicity and usuability for the technical operator in mind.&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/subtivals-screenshot.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="main-features"&gt;
&lt;h2&gt;Main features&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Subtivals&lt;/em&gt; has gained many features on the way, we released the &lt;strong&gt;version 1.0&lt;/strong&gt; last month,
after almost a year of development, driven by Lilian's experience.&lt;/p&gt;
&lt;p&gt;Among most notable features :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Support of Advanced SubStation Alpha subtitles (ASS, *.ass) format&lt;/li&gt;
&lt;li&gt;Control Play / Pause / Delay / Speed&lt;/li&gt;
&lt;li&gt;Switch between several modes : timecode based, semi-automatic or fully manual&lt;/li&gt;
&lt;li&gt;Support for subtitles without timecodes (fixes duration automatically)&lt;/li&gt;
&lt;li&gt;SSA styles (italic, positions, colors)&lt;/li&gt;
&lt;li&gt;Customize and override styles (color and font size)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the small world of subtitles projection, where most tools are either
very expensive, or very archaic, &lt;em&gt;Subtivals&lt;/em&gt; is a revolution !&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hall-of-fame"&gt;
&lt;h2&gt;Hall of fame&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Subtivals&lt;/em&gt; has proven its efficiency for several months now ! It was used
successfully in many film festivals (&lt;a class="reference external" href="http://www.festival-douarnenez.com"&gt;Festival de cin√©ma de Douarnenez&lt;/a&gt;,
&lt;a class="reference external" href="http://festival-galactique.infini.fr"&gt;Festival Intergalactique de Brest&lt;/a&gt;,
&lt;a class="reference external" href="http://www.festivaldebiarritz.com"&gt;Festival de Cin√©ma d'Am√©rique Latine de Biarritz&lt;/a&gt;,
&lt;a class="reference external" href="http://www.filmfestamiens.org"&gt;Festival International du film d'Amiens&lt;/a&gt;,
&lt;a class="reference external" href="http://www.lacinemathequedetoulouse.com/archives/2012/thematiques"&gt;Festival Zoom Arri√®re, 6e √©dition&lt;/a&gt;,
... and soon :
&lt;a class="reference external" href="http://www.cinelatino.com.fr"&gt;Cin√©latino de Toulouse&lt;/a&gt;,
&lt;a class="reference external" href="http://festival-resistances.fr"&gt;R√©sistances √† Foix&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Its semi-manual mode also allows &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Surtitle"&gt;surtitling&lt;/a&gt; at theaters (or opera, ballets, ...).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Subtivals&lt;/em&gt; runs on GNU/Linux, Windows, Mac OS X and has no other external dependencies.&lt;/p&gt;
&lt;p&gt;On Ubuntu, install it easily using our PPA :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo add-apt-repository ppa:mathieu.leplatre/subtivals
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install subtivals
&lt;/pre&gt;
&lt;p&gt;Mac OS X and Windows installers are for sale, contact us !&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="contribute"&gt;
&lt;h2&gt;Contribute&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Subtivals&lt;/em&gt; is written in C++/Qt and released under the &lt;a class="reference external" href="http://www.gnu.org/copyleft/gpl.html"&gt;GNU General Public License&lt;/a&gt; .
It is available in English, French, Spanish and Catalan.&lt;/p&gt;
&lt;p&gt;If you feel like contributing, testing, translating... &lt;a class="reference external" href="https://github.com/traxtech/subtivals"&gt;join us on Github&lt;/a&gt; !&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="subtivals"></category><category term="subtitles"></category><category term="accessibility"></category><category term="qt"></category><category term="c++"></category></entry><entry><title>Django Handlebars.js integration</title><link href="https://blog.mathieu-leplatre.info/django-handlebarsjs-integration.html" rel="alternate"></link><published>2012-03-17T00:00:00+01:00</published><updated>2012-03-17T00:00:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2012-03-17:/django-handlebarsjs-integration.html</id><summary type="html">&lt;p&gt;In order to write &lt;a class="reference external" href="http://handlebarsjs.com/"&gt;Handlebars.js&lt;/a&gt; templates
in &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt; templates, I was gonna copy and paste for the second time
&lt;a class="reference external" href="https://gist.github.com/893408"&gt;Miguel Araujo's verbatim snippet&lt;/a&gt;.
But since one of the &lt;em&gt;Django&lt;/em&gt; weakness is the lack of reusable applications, I thought
I would package one instead :)&lt;/p&gt;
&lt;p&gt;The two existing django applications &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1 ‚Ä¶&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;In order to write &lt;a class="reference external" href="http://handlebarsjs.com/"&gt;Handlebars.js&lt;/a&gt; templates
in &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt; templates, I was gonna copy and paste for the second time
&lt;a class="reference external" href="https://gist.github.com/893408"&gt;Miguel Araujo's verbatim snippet&lt;/a&gt;.
But since one of the &lt;em&gt;Django&lt;/em&gt; weakness is the lack of reusable applications, I thought
I would package one instead :)&lt;/p&gt;
&lt;p&gt;The two existing django applications &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt; that integrate &lt;em&gt;Handlebars.js&lt;/em&gt; are somehow
bloated, they both kind of compile or render javascript templates on server-side &lt;em&gt;(sic)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Oppositely, my &lt;a class="reference external" href="https://github.com/makinacorpus/django-templatetag-handlebars"&gt;django-templatetag-handlebars&lt;/a&gt; is very simple, you
write your &lt;em&gt;Handlebars&lt;/em&gt; template inside your &lt;em&gt;django&lt;/em&gt; template. &lt;em&gt;Django&lt;/em&gt;
will preserve nicely &lt;tt class="docutils literal"&gt;{}&lt;/tt&gt; tags, but still render &lt;tt class="docutils literal"&gt;{% %}&lt;/tt&gt; tags.&lt;/p&gt;
&lt;p&gt;For example, with this in your template :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% tplhandlebars &amp;quot;tpl-infos&amp;quot; %}
    {{total}} {% trans &amp;quot;result(s).&amp;quot; %}
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{% trans &amp;quot;Min&amp;quot; %}: {{min}}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{% trans &amp;quot;Max&amp;quot; %}: {{max}}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% endtplhandlebars %}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The following block with end-up in your page :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tpl-infos&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/x-handlebars-template&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Min: {{min}}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Max: {{max}}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Render it, client-side, as usual using &lt;em&gt;Handlebars&lt;/em&gt; API :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;5&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Handlebars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#tpl-infos&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;rendered&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your rendered string is ready, and waiting to be inserted in your DOM :)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;10 result(s).
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Min: 4&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Max: 5&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/makinacorpus/django-templatetag-handlebars"&gt;Download and more info&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Both named &lt;em&gt;django-handlebars&lt;/em&gt;, &lt;a class="reference external" href="https://github.com/yavorskiy/django-handlebars"&gt;by Sergii Iavorskyi&lt;/a&gt; and &lt;a class="reference external" href="https://bitbucket.org/chrisv/django-handlebars"&gt;by Chris Vigelius&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="Dev"></category><category term="django"></category><category term="javascript"></category><category term="handlebars"></category></entry><entry><title>landez : introducing new features of our tiles toolbox</title><link href="https://blog.mathieu-leplatre.info/landez-introducing-new-features-of-our-tiles-toolbox.html" rel="alternate"></link><published>2012-02-24T12:45:00+01:00</published><updated>2012-02-24T12:45:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2012-02-24:/landez-introducing-new-features-of-our-tiles-toolbox.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/makinacorpus/landez"&gt;landez&lt;/a&gt; started as a very small toolbox to build MBTiles files
specifying bounding boxes and zoom levels. We have been using it for several GIS projects
at &lt;a class="reference external" href="http://www.makina-corpus.com"&gt;Makina Corpus&lt;/a&gt;, and can tell it's reliable !&lt;/p&gt;
&lt;p&gt;Landez is pure python and follows the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/KISS_principle"&gt;KISS principle&lt;/a&gt;.
It has optional requirements on &lt;a class="reference external" href="http://pypi.python.org/pypi/PIL"&gt;PIL&lt;/a&gt; and ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/makinacorpus/landez"&gt;landez&lt;/a&gt; started as a very small toolbox to build MBTiles files
specifying bounding boxes and zoom levels. We have been using it for several GIS projects
at &lt;a class="reference external" href="http://www.makina-corpus.com"&gt;Makina Corpus&lt;/a&gt;, and can tell it's reliable !&lt;/p&gt;
&lt;p&gt;Landez is pure python and follows the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/KISS_principle"&gt;KISS principle&lt;/a&gt;.
It has optional requirements on &lt;a class="reference external" href="http://pypi.python.org/pypi/PIL"&gt;PIL&lt;/a&gt; and &lt;a class="reference external" href="http://pypi.python.org/pypi/mapnik2"&gt;mapnik&lt;/a&gt;
for compositing, tile arranging or rendering.&lt;/p&gt;
&lt;p&gt;Recently, we've added many extra cool features, which deserve highlight !&lt;/p&gt;
&lt;div class="section" id="simple-wms-support"&gt;
&lt;h2&gt;Simple WMS support&lt;/h2&gt;
&lt;p&gt;With landez, you can store your WMS layers into MBTiles files ! It will
request the WMS /images and save them into tiles on disk ! You can then
enjoy the power of MBTiles files : transport, speed, ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MBTilesBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wms_server&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://yourserver.com/geoserver/wms&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;wms_layers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ign:departements&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                    &lt;span class="n"&gt;wms_options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;image/png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;transparent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dest.mbtiles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_coverage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bbox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.9853&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;43.6435.1126&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;44.0639&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
                &lt;span class="n"&gt;zoomlevels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;mb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tiles-compositing"&gt;
&lt;h2&gt;Tiles compositing&lt;/h2&gt;
&lt;p&gt;This is the killer feature ! With landez, you can now merge multiple sources
of tiles (URL, WMS, MBTiles, Mapnik stylesheet) together !&lt;/p&gt;
&lt;p&gt;For example, build a new MBTiles file by blending tiles of another on top of OpenStreetMap tiles :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MBTilesBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;merged.mbtiles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;overlay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TilesManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mbtiles_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;carto.mbtiles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_layer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;overlay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Simply make a composite a WMS layer with OpenStreetMap using transparency ! You might find this useful
for compositing satellite image with street maps :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MBTilesBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wms_server&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://yourserver.com/geoserver/wms&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;wms_layers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img:orthophoto&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                    &lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;wms_osm.mbtiles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;overlay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TilesManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_layer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;overlay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 40%&lt;/span&gt;
&lt;span class="n"&gt;mb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="arrange-tiles-into-single-images"&gt;
&lt;h2&gt;Arrange tiles into single /images&lt;/h2&gt;
&lt;p&gt;This feature can be very useful for printing tiled maps or have a quick overview
of your compositing results !&lt;/p&gt;
&lt;p&gt;Refer to any source of tiles, like you would do with &lt;cite&gt;MBTilesBuilder&lt;/cite&gt;,
add layers if you like and export the image !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImageExporter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tiles_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://server/tile/&lt;/span&gt;&lt;span class="si"&gt;{z}&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{x}&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{y}&lt;/span&gt;&lt;span class="s1"&gt;.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;ie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;export_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bbox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;180.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;90.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;180.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;90.0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;zoomlevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;imagepath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;image.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mbtiles-content-reading"&gt;
&lt;h2&gt;MBTiles content reading&lt;/h2&gt;
&lt;p&gt;landez can now read MBTiles content !&lt;/p&gt;
&lt;p&gt;We could proudly add it to the list of implementations for the &lt;a class="reference external" href="https://github.com/mapbox/mbtiles-spec/wiki/Implementations"&gt;MBTiles spec&lt;/a&gt;
and &lt;a class="reference external" href="https://github.com/mapbox/utfgrid-spec/wiki/Implementations"&gt;UTF-Grid spec&lt;/a&gt; !&lt;/p&gt;
&lt;p&gt;Use MBTiles files like any tile source :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MBTilesBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mbtiles_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yourfile.mbtiles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;...extract single image or UTF-Grid tiles :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;landez.reader&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MBTilesReader&lt;/span&gt;

&lt;span class="n"&gt;mbreader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MBTilesReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yourfile.mbtiles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Metadata&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mbreader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Zoom levels&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mbreader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zoomlevels&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Image tile&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tile.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# UTF-Grid tile&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;callback&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="next-steps"&gt;
&lt;h2&gt;Next steps...&lt;/h2&gt;
&lt;p&gt;The code has grown quickly and deserves a good refactoring, which is being done in a separate
branch &lt;a class="reference external" href="https://github.com/makinacorpus/landez"&gt;on GitHub&lt;/a&gt; ! The goal is to
keep the same simple API, better modularity, increase tests coverage...&lt;/p&gt;
&lt;p&gt;If you are wiling to participate, feel welcome !&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="python"></category><category term="mapbox"></category><category term="gis"></category><category term="landez"></category></entry><entry><title>Merkopolo : a simple yet powerful starter kit for your Qt/C++ GIS application</title><link href="https://blog.mathieu-leplatre.info/merkopolo-a-simple-yet-powerful-starter-kit-for-your-qtc-gis-application.html" rel="alternate"></link><published>2012-01-26T11:30:00+01:00</published><updated>2012-01-26T11:30:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2012-01-26:/merkopolo-a-simple-yet-powerful-starter-kit-for-your-qtc-gis-application.html</id><summary type="html">&lt;p&gt;Recently, while the whole world looks completely hyped up with Web applications,
we chose to design and develop a desktop software in Qt/C++.&lt;/p&gt;
&lt;p&gt;Obviously, the choice was measured and justified ! We had to build a specific GIS application
with complex interactions and huge amounts of data, for a limited ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, while the whole world looks completely hyped up with Web applications,
we chose to design and develop a desktop software in Qt/C++.&lt;/p&gt;
&lt;p&gt;Obviously, the choice was measured and justified ! We had to build a specific GIS application
with complex interactions and huge amounts of data, for a limited number of users.&lt;/p&gt;
&lt;p&gt;Quickly, we spotted &lt;a class="reference external" href="http://merkaartor.be/"&gt;Merkaartor&lt;/a&gt;, one of &lt;a class="reference external" href="http://wiki.openstreetmap.org/wiki/Editing"&gt;the official OpenStreetMap editors&lt;/a&gt;,
for its UI components and object model. And since we started to code, we never regretted this choice !&lt;/p&gt;
&lt;p&gt;C++ brings the power, Qt offers cross-platform and the compassion towards developers, and Merkaartor a lovely GIS flavour !&lt;/p&gt;
&lt;p&gt;We contributed to Merkaartor to give gits components a little bit of genericity, and
released &lt;a class="reference external" href="https://gitorious.org/merkopolo/merkopolo"&gt;Merkopolo&lt;/a&gt;, a Qt project
skeleton to handle dependencies and inclusion of base components.&lt;/p&gt;
&lt;p&gt;Here is what you immediately get once compiled :&lt;/p&gt;
&lt;img alt="" src="/images/merkopolo-preview.png" /&gt;
&lt;p&gt;Now you can start coding serious stuff on top, with the Merkaartor components stack :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Complete feature model with free attributes (tags)&lt;/li&gt;
&lt;li&gt;Custom drawing styles&lt;/li&gt;
&lt;li&gt;A variety of layers types (Tiles, WMS, Spatialite, GeoTIFF, GDAL...)&lt;/li&gt;
&lt;li&gt;Base classes for mouse interactions on map objects&lt;/li&gt;
&lt;li&gt;A projection system (&lt;em&gt;libproj&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;And even &lt;a class="reference external" href="postgis-data-in-c-using-gdal-and-qt.html"&gt;draw geometries from PostGIS database&lt;/a&gt; !&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="reference external" href="https://gitorious.org/merkopolo/merkopolo"&gt;Merkopolo is available on Gitorious&lt;/a&gt;.&lt;/p&gt;
</content><category term="Dev"></category><category term="c++"></category><category term="gis"></category><category term="qt"></category><category term="merkopolo"></category><category term="merkartor"></category></entry><entry><title>Access a JSON webservice with Qt C++</title><link href="https://blog.mathieu-leplatre.info/access-a-json-webservice-with-qt-c.html" rel="alternate"></link><published>2011-12-16T17:00:00+01:00</published><updated>2011-12-16T17:00:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-12-16:/access-a-json-webservice-with-qt-c.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Original post at&lt;/em&gt; &lt;a class="reference external" href="http://makina-corpus.org"&gt;Makina Corpus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Webservices are everywhere ! There are relevant in many situations, and
accessing them from your Qt C++ application is not an heresy.&lt;/p&gt;
&lt;p&gt;I will present here a very simple way to retrieve a JSON from a GET request.&lt;/p&gt;
&lt;div class="section" id="http-requests"&gt;
&lt;h2&gt;HTTP Requests&lt;/h2&gt;
&lt;p&gt;Using &lt;a class="reference external" href="http://developer.qt.nokia.com/doc/qt-4.7/qnetworkaccessmanager.html"&gt;QNetworkAccessManager&lt;/a&gt; is
a piece of ‚Ä¶&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Original post at&lt;/em&gt; &lt;a class="reference external" href="http://makina-corpus.org"&gt;Makina Corpus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Webservices are everywhere ! There are relevant in many situations, and
accessing them from your Qt C++ application is not an heresy.&lt;/p&gt;
&lt;p&gt;I will present here a very simple way to retrieve a JSON from a GET request.&lt;/p&gt;
&lt;div class="section" id="http-requests"&gt;
&lt;h2&gt;HTTP Requests&lt;/h2&gt;
&lt;p&gt;Using &lt;a class="reference external" href="http://developer.qt.nokia.com/doc/qt-4.7/qnetworkaccessmanager.html"&gt;QNetworkAccessManager&lt;/a&gt; is
a piece of cake :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;QNetworkAccessManager&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;networkManager&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;QUrl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://gdata.youtube.com/feeds/api/standardfeeds/most_popular?v=2&amp;amp;alt=json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;QNetworkRequest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;QNetworkReply&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;currentReply&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;networkManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// GET&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But, note that a slightly more generic approach would be to build the &lt;tt class="docutils literal"&gt;QUrl&lt;/tt&gt; from a parameters list :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;QUrl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://gdata.youtube.com/feeds/api/standardfeeds/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;QString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;most_popular&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%1%2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="n"&gt;QMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;QString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QVariant&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addQueryItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="parsing-json"&gt;
&lt;h2&gt;Parsing JSON&lt;/h2&gt;
&lt;p&gt;Get yourself a &lt;em&gt;slot&lt;/em&gt; to parse the &lt;tt class="docutils literal"&gt;QNetworkReply&lt;/tt&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;networkManager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;finished&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QNetworkReply&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SLOT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;onResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QNetworkReply&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;YourClass::onResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QNetworkReply&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_currentReply&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QNetworkReply&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// ...only in a blog post&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;QString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;readAll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;QScriptEngine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;QScriptValue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;evaluate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;      Google YouTube JSON looks like this :&lt;/span&gt;

&lt;span class="cm"&gt;      {&lt;/span&gt;
&lt;span class="cm"&gt;        &amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,&lt;/span&gt;
&lt;span class="cm"&gt;        &amp;quot;encoding&amp;quot;: &amp;quot;UTF-8&amp;quot;,&lt;/span&gt;
&lt;span class="cm"&gt;        &amp;quot;feed&amp;quot;: {&lt;/span&gt;
&lt;span class="cm"&gt;          ..&lt;/span&gt;
&lt;span class="cm"&gt;          ..&lt;/span&gt;
&lt;span class="cm"&gt;          &amp;quot;entry&amp;quot;: [{&lt;/span&gt;
&lt;span class="cm"&gt;            &amp;quot;title&amp;quot;: {&lt;/span&gt;
&lt;span class="cm"&gt;                &amp;quot;$t&amp;quot;: &amp;quot;Nickelback- When We Stand Together&amp;quot;&lt;/span&gt;
&lt;span class="cm"&gt;            },&lt;/span&gt;
&lt;span class="cm"&gt;            &amp;quot;content&amp;quot;: {&lt;/span&gt;
&lt;span class="cm"&gt;                &amp;quot;type&amp;quot;: &amp;quot;application/x-shockwave-flash&amp;quot;,&lt;/span&gt;
&lt;span class="cm"&gt;                &amp;quot;src&amp;quot;: &amp;quot;http://www.youtube.com/v/76vdvdll0Y?version=3&amp;amp;f=standard&amp;amp;app=youtube_gdata&amp;quot;&lt;/span&gt;
&lt;span class="cm"&gt;            },&lt;/span&gt;
&lt;span class="cm"&gt;            &amp;quot;yt$statistics&amp;quot;: {&lt;/span&gt;
&lt;span class="cm"&gt;                &amp;quot;favoriteCount&amp;quot;: &amp;quot;29182&amp;quot;,&lt;/span&gt;
&lt;span class="cm"&gt;                &amp;quot;viewCount&amp;quot;: &amp;quot;41513706&amp;quot;&lt;/span&gt;
&lt;span class="cm"&gt;            },&lt;/span&gt;
&lt;span class="cm"&gt;            ...&lt;/span&gt;
&lt;span class="cm"&gt;            ...&lt;/span&gt;
&lt;span class="cm"&gt;          },&lt;/span&gt;
&lt;span class="cm"&gt;          ...&lt;/span&gt;
&lt;span class="cm"&gt;          ...&lt;/span&gt;
&lt;span class="cm"&gt;          ]&lt;/span&gt;
&lt;span class="cm"&gt;        }&lt;/span&gt;
&lt;span class="cm"&gt;      }&lt;/span&gt;
&lt;span class="cm"&gt;    */&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Now parse this JSON according to your needs !&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;QScriptValue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;feed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;QScriptValueIterator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasNext&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;QScriptValue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;QString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;viewCount&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;yt$statistics&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;viewCount&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;toInteger&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Do something with those...&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's it :)&lt;/p&gt;
&lt;p&gt;If you want more complexity, and don't mind adding extra-dependencies, check out Tomasz Siekierda's &lt;a class="reference external" href="http://gitorious.org/qwebservice"&gt;QtWebService&lt;/a&gt; !&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="c++"></category><category term="qt"></category><category term="json"></category></entry><entry><title>Remove django form field validation errors manually</title><link href="https://blog.mathieu-leplatre.info/remove-django-form-field-valiation-errors-manually.html" rel="alternate"></link><published>2011-12-06T09:00:00+01:00</published><updated>2011-12-06T09:00:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-12-06:/remove-django-form-field-valiation-errors-manually.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Original post at&lt;/em&gt; &lt;a class="reference external" href="http://www.makina-corpus.org"&gt;Makina Corpus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sometimes I look for something which seems so simple and stupid that I can't imagine
it does not exist. It makes me wonder why and who is the fool. Worse, I can't be sure about my search keywords to prove me anything.&lt;/p&gt;
&lt;p&gt;I just wanted ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Original post at&lt;/em&gt; &lt;a class="reference external" href="http://www.makina-corpus.org"&gt;Makina Corpus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sometimes I look for something which seems so simple and stupid that I can't imagine
it does not exist. It makes me wonder why and who is the fool. Worse, I can't be sure about my search keywords to prove me anything.&lt;/p&gt;
&lt;p&gt;I just wanted to delete, reset or remove the validation errors of a single form field, within a django view, without
overriding the form or field class.&lt;/p&gt;
&lt;div class="section" id="a-one-liner"&gt;
&lt;h2&gt;A one-liner&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;aform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;afield&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aform&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;afield&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error_class&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;That's it folks !&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;This will not affect other fields errors or non-field errors ;&lt;/li&gt;
&lt;li&gt;This will reuse nicely the field error class (&lt;tt class="docutils literal"&gt;ErrorDict&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;ErrorList&lt;/tt&gt;) ;&lt;/li&gt;
&lt;li&gt;You cannot set &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;aform.errors['afield']&lt;/span&gt; = None&lt;/tt&gt; or your form &lt;tt class="docutils literal"&gt;full_clean()&lt;/tt&gt; will be performed again !&lt;/li&gt;
&lt;li&gt;Obviously, the ideal approach is to override your form &lt;tt class="docutils literal"&gt;clean()&lt;/tt&gt; properly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="django"></category><category term="tips"></category></entry><entry><title>An equivalent of Django's select_related for ManyToMany and OneToMany relationships</title><link href="https://blog.mathieu-leplatre.info/django-selectrelated-manytomany.html" rel="alternate"></link><published>2011-12-05T11:09:00+01:00</published><updated>2011-12-05T11:09:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-12-05:/django-selectrelated-manytomany.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Original post at&lt;/em&gt; &lt;a class="reference external" href="http://makina-corpus.org"&gt;Makina Corpus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Using an ORM simplifies and reduces greatly the amount of code to interact with databases.
Nevertheless, it can easily hide database design defects or become a source of serious performance issues.&lt;/p&gt;
&lt;div class="section" id="a-common-pitfall"&gt;
&lt;h2&gt;A Common Pitfall&lt;/h2&gt;
&lt;p&gt;With Django, the most classic problem occurs while accessing objects relations ‚Ä¶&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Original post at&lt;/em&gt; &lt;a class="reference external" href="http://makina-corpus.org"&gt;Makina Corpus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Using an ORM simplifies and reduces greatly the amount of code to interact with databases.
Nevertheless, it can easily hide database design defects or become a source of serious performance issues.&lt;/p&gt;
&lt;div class="section" id="a-common-pitfall"&gt;
&lt;h2&gt;A Common Pitfall&lt;/h2&gt;
&lt;p&gt;With Django, the most classic problem occurs while accessing objects relations attributes
inside a loop. That's why QuerySet's method &lt;tt class="docutils literal"&gt;select_related()&lt;/tt&gt; exists :
it will join specified relations so that access to their attributes does not hit the database.
&lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#select-related"&gt;Refer to Django's documentation&lt;/a&gt; for more information !&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="one-to-many-and-many-to-many-relationships"&gt;
&lt;h2&gt;One-To-Many and Many-To-Many Relationships&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;select_related()&lt;/tt&gt; is not able to follow One-To-Many (&lt;em&gt;1-n&lt;/em&gt;) and Many-To-Many (&lt;em&gt;n-n&lt;/em&gt;) relationships.
The Django team is currently working on &lt;tt class="docutils literal"&gt;prefetch_related()&lt;/tt&gt;. But before we can enjoy this
future feature, we can implement an equivalent in python.&lt;/p&gt;
&lt;p&gt;With these models :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pizza&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Restaurant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pizzas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ManyToManyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pizza&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;through&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PizzaRestaurant&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PizzaRestaurant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pizza&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pizza&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;restaurant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FloatField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This loop will generate &lt;em&gt;1 + N&lt;/em&gt; queries :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;restaurant&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pizza&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;restaurant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pizzas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;pizza&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Whereas this one will &lt;strong&gt;only&lt;/strong&gt; generate &lt;em&gt;2&lt;/em&gt; queries :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Store relationships in a dict&lt;/span&gt;
&lt;span class="n"&gt;byrestaurant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pr&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;PizzaRestaurant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_related&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;restaurant&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pizza&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;byrestaurant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restaurant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pizza&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Use stored lists&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;restaurant&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pizza&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;byrestaurant&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;restaurant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;pizza&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;According to the amount of &lt;em&gt;N&lt;/em&gt;, doing that trick in views can boost your pages !&lt;/p&gt;
&lt;p&gt;This is not perfect and elegant, but if it allows you to downsize the number of queries
from several thousands to fifteen, like &lt;a class="reference external" href="http://gitorious.org/memopol2-0/memopol2-0/merge_requests/18"&gt;it did on Memopol2&lt;/a&gt;, you can think twice.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="django"></category><category term="performance"></category></entry><entry><title>Des cartes collaboratives avec Livetitude</title><link href="https://blog.mathieu-leplatre.info/des-cartes-collaboratives-avec-livetitude-fr.html" rel="alternate"></link><published>2011-11-23T14:00:00+01:00</published><updated>2011-11-23T14:00:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-11-23:/des-cartes-collaboratives-avec-livetitude-fr.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Article original publi√© chez&lt;/em&gt; &lt;a class="reference external" href="http://makina-corpus.org"&gt;Makina Corpus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cela fait plusieurs semaines que je voulais pr√©senter ma petite application
de partage de cartes, dont je me sers d√©j√† comme alternative aux marqueurs de Google Maps.&lt;/p&gt;
&lt;div class="section" id="en-bref"&gt;
&lt;h2&gt;En bref&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/makinacorpus/livetitude"&gt;Livetitude&lt;/a&gt; est un outil Web pour cr√©er des cartes de mani√®re collaborative
&lt;strong&gt;en temps r√©el ‚Ä¶&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Article original publi√© chez&lt;/em&gt; &lt;a class="reference external" href="http://makina-corpus.org"&gt;Makina Corpus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cela fait plusieurs semaines que je voulais pr√©senter ma petite application
de partage de cartes, dont je me sers d√©j√† comme alternative aux marqueurs de Google Maps.&lt;/p&gt;
&lt;div class="section" id="en-bref"&gt;
&lt;h2&gt;En bref&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/makinacorpus/livetitude"&gt;Livetitude&lt;/a&gt; est un outil Web pour cr√©er des cartes de mani√®re collaborative
&lt;strong&gt;en temps r√©el&lt;/strong&gt; (√† la mani√®re d'un &lt;a class="reference external" href="http://fr.wikipedia.org/wiki/EtherPad"&gt;pad&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Fonctionnant sur des terminaux mobiles, Livetitude permet √©galement de partager la position des collaborateurs de la carte,
d'exporter les donn√©es au format GeoJSON ou de publier la carte sur une page Web.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sous-le-capot"&gt;
&lt;h2&gt;Sous le capot&lt;/h2&gt;
&lt;p&gt;J'ai pris du plaisir √† hacker cette application, elle tire profit
d'outils tr√®s simples mais tr√®s efficaces :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://http://leaflet.cloudmade.com"&gt;Leaflet&lt;/a&gt; pour afficher les cartes ;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pusher.com"&gt;Pusher&lt;/a&gt; (Websockets) pour la collaboration en temps r√©el ;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://couchdb.apache.org/"&gt;CouchDB&lt;/a&gt; pour stocker les donn√©es ;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://flask.pocoo.org"&gt;Flask&lt;/a&gt; pour servir les pages ;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.heroku.com"&gt;Heroku&lt;/a&gt; pour h√©berger l'application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bien entendu, le code source est libre et disponible sur &lt;a class="reference external" href="https://github.com/makinacorpus/livetitude"&gt;le GitHub de Makina Corpus&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="utilisation"&gt;
&lt;h2&gt;Utilisation&lt;/h2&gt;
&lt;p&gt;Une instance est &lt;a class="reference external" href="http://vivid-warrior-6693.herokuapp.com/"&gt;d√©ploy√©e en ligne&lt;/a&gt;, dans le cloud d'Heroku,
dont vous pouvez vous servir, &lt;em&gt;pour une utilisation en bon p√®re de famille&lt;/em&gt; :)&lt;/p&gt;
&lt;p&gt;Les marqueurs peuvent contenir du texte ou de l'HTML, et aucune donn√©e de localisation des visiteurs n'est stock√©e.&lt;/p&gt;
&lt;img alt="" src="/images/livetitude-poc.png" /&gt;
&lt;div class="section" id="comment-publier-vos-donnees-existantes"&gt;
&lt;h3&gt;Comment publier vos donn√©es existantes ?&lt;/h3&gt;
&lt;p&gt;Si vous souhaitez publier et visualiser vos marqueurs sur une carte de Livetitude,
il suffit de poster (&lt;tt class="docutils literal"&gt;POST&lt;/tt&gt;) les coordonn√©es de vos points sur l'URL &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://server/&amp;lt;CARTE&amp;gt;/add&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Par exemple, avec une petite fonction python :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;httplib&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;

&lt;span class="n"&gt;SERVER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;# e.g. vivid-warrior-6693.herokuapp.com&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mapname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;/add&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;mapname&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="s1"&gt;&amp;#39;coords&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="s1"&gt;&amp;#39;classid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;  &lt;span class="c1"&gt;# (=color)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Content-type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;application/x-www-form-urlencoded&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s2"&gt;&amp;quot;Accept&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;text/plain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;httplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SERVER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getresponse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PasLoin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10.1,54.9&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Super resto!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PasLoin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;19.4,65.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bon mojito&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Les points sont alors visibles en ligne sur &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://server/PasLoin&lt;/span&gt;&lt;/tt&gt; ou
disponible en GeoJSON sur &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://server/PasLoin/points&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="contribuer"&gt;
&lt;h2&gt;Contribuer&lt;/h2&gt;
&lt;p&gt;Livetitude est une application tr√®s simple, √† l'√©tat de preuve de concept. Mais
le code source est tr√®s r√©duit et donc tr√®s rapide √† prendre en main !&lt;/p&gt;
&lt;p&gt;Toutes vos &lt;a class="reference external" href="https://github.com/makinacorpus/livetitude/issues"&gt;suggestions ou contributions&lt;/a&gt; sont les bienvenues !&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="maps"></category><category term="gis"></category><category term="websockets"></category><category term="leaflet"></category><category term="heroku"></category></entry><entry><title>Git : annuler proprement un commit apr√®s un push</title><link href="https://blog.mathieu-leplatre.info/git-annuler-proprement-un-commit-apres-un-push-fr.html" rel="alternate"></link><published>2011-11-03T14:15:00+01:00</published><updated>2011-11-03T14:15:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-11-03:/git-annuler-proprement-un-commit-apres-un-push-fr.html</id><summary type="html">&lt;div class="section" id="ce-qu-il-faut-eviter"&gt;
&lt;h2&gt;Ce qu'il faut √©viter&lt;/h2&gt;
&lt;p&gt;Pour annuler des commits, il existe la commande &lt;tt class="docutils literal"&gt;git reset&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;reset&lt;span class="w"&gt; &lt;/span&gt;--hard&lt;span class="w"&gt; &lt;/span&gt;HEAD~1
HEAD&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;now&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;444b1cf&lt;span class="w"&gt; &lt;/span&gt;Rhoo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Celle-ci est pertinente tant que les commits n'ont pas √©t√© pouss√©s. Git vous retiendra au &lt;tt class="docutils literal"&gt;push&lt;/tt&gt; d'ailleurs :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;push
To&lt;span class="w"&gt; &lt;/span&gt;/tmp/repo
&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;rejected&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;master&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;master ‚Ä¶&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="ce-qu-il-faut-eviter"&gt;
&lt;h2&gt;Ce qu'il faut √©viter&lt;/h2&gt;
&lt;p&gt;Pour annuler des commits, il existe la commande &lt;tt class="docutils literal"&gt;git reset&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;reset&lt;span class="w"&gt; &lt;/span&gt;--hard&lt;span class="w"&gt; &lt;/span&gt;HEAD~1
HEAD&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;now&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;444b1cf&lt;span class="w"&gt; &lt;/span&gt;Rhoo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Celle-ci est pertinente tant que les commits n'ont pas √©t√© pouss√©s. Git vous retiendra au &lt;tt class="docutils literal"&gt;push&lt;/tt&gt; d'ailleurs :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;push
To&lt;span class="w"&gt; &lt;/span&gt;/tmp/repo
&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;rejected&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;master&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;master&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;non-fast-forward&lt;span class="o"&gt;)&lt;/span&gt;
error:&lt;span class="w"&gt; &lt;/span&gt;failed&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;some&lt;span class="w"&gt; &lt;/span&gt;refs&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/tmp/repo&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;En effet, √† partir du moment o√π un commit existe sur le serveur, il est potentiellement utilis√©
par des collaborateurs (&lt;em&gt;merg√©, √† la base d'une branche, etc.&lt;/em&gt;). On pourrait faire le sale et forcer le push :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;-f
Total&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;delta&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;reused&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;delta&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
To&lt;span class="w"&gt; &lt;/span&gt;/tmp/repo
&lt;span class="w"&gt; &lt;/span&gt;+&lt;span class="w"&gt; &lt;/span&gt;b67c343...444b1cf&lt;span class="w"&gt; &lt;/span&gt;master&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;master&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;forced&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mais il y a beaucoup mieux !&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ce-qu-il-faut-faire"&gt;
&lt;h2&gt;Ce qu'il faut faire&lt;/h2&gt;
&lt;p&gt;Annuler un commit, c'est finalement appliquer l'inverse de son &lt;strong&gt;diff&lt;/strong&gt; !&lt;/p&gt;
&lt;p&gt;On peut rediriger le diff des commits √† annuler vers la commande &lt;tt class="docutils literal"&gt;patch &lt;span class="pre"&gt;--reverse&lt;/span&gt;&lt;/tt&gt; :)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;diff&lt;span class="w"&gt; &lt;/span&gt;HEAD^&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;patch&lt;span class="w"&gt; &lt;/span&gt;--reverse
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pour faire plus simple, il y a &lt;tt class="docutils literal"&gt;git revert&lt;/tt&gt; !&lt;/p&gt;
&lt;p&gt;Par exemple pour annuler les trois derniers commits :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;revert&lt;span class="w"&gt; &lt;/span&gt;HEAD~3..HEAD
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ou pour annuler un commit en particulier :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;revert&lt;span class="w"&gt; &lt;/span&gt;444b1cff
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Il suffit alors de pousser proprement le commit obtenu sur le
serveur. Les √©ventuels collaborateurs qui avaient bas√© leur travail sur les commits
annul√©s devront g√©rer les conflits au moment venu...&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="git"></category><category term="tips"></category></entry><entry><title>Une d√©mo squelettique de python Flask CouchDB</title><link href="https://blog.mathieu-leplatre.info/une-demo-squelettique-de-python-flask-couchdb-fr.html" rel="alternate"></link><published>2011-10-11T11:30:00+02:00</published><updated>2011-10-11T11:30:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-10-11:/une-demo-squelettique-de-python-flask-couchdb-fr.html</id><summary type="html">&lt;p&gt;Avec &lt;tt class="docutils literal"&gt;Flask&lt;/tt&gt; et &lt;tt class="docutils literal"&gt;Couchdb&lt;/tt&gt; (e.g. &lt;a class="reference external" href="http://packages.python.org/Flask-CouchDB/"&gt;Flask-CouchDB&lt;/a&gt;),
on peut faire rapidement des trucs amusants, voire tr√®s utiles !&lt;/p&gt;
&lt;p&gt;Voici un &lt;strong&gt;squelette&lt;/strong&gt; d'application, fonctionnel, qui stocke et r√©cup√®re des objets cr√©es √† partir de posts HTTP.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;simplejson&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;couchdb.design&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ViewDefinition&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;flaskext.couchdb ‚Ä¶&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Avec &lt;tt class="docutils literal"&gt;Flask&lt;/tt&gt; et &lt;tt class="docutils literal"&gt;Couchdb&lt;/tt&gt; (e.g. &lt;a class="reference external" href="http://packages.python.org/Flask-CouchDB/"&gt;Flask-CouchDB&lt;/a&gt;),
on peut faire rapidement des trucs amusants, voire tr√®s utiles !&lt;/p&gt;
&lt;p&gt;Voici un &lt;strong&gt;squelette&lt;/strong&gt; d'application, fonctionnel, qui stocke et r√©cup√®re des objets cr√©es √† partir de posts HTTP.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;simplejson&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;couchdb.design&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ViewDefinition&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;flaskext.couchdb&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;CouchDB permanent view&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;docs_by_author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ViewDefinition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;docs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;byauthor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="s1"&gt;&amp;#39;function(doc) { emit(doc.author, doc); }&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Retrieve docs&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;lt;author_id&amp;gt;/docs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;docs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;docs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;docs_by_author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;couch&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;author_id&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;docs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;simplejson&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;docs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Add doc&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;lt;author_id&amp;gt;/add&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Build doc with posted values&lt;/span&gt;
        &lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;author_id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Insert into database&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;couch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;simplejson&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Flask main&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;COUCHDB_SERVER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://localhost:5984/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;COUCHDB_DATABASE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;docsdemo&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flaskext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;couchdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CouchDBManager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_viewdef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;docs_by_author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Install the view&lt;/span&gt;
    &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;J'ai d√©pos√© ce snippet sur &lt;a class="reference external" href="https://gist.github.com/1277655"&gt;Gist&lt;/a&gt; si besoin.&lt;/p&gt;
&lt;p&gt;On peut attaquer l'application avec &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title=Globalia&amp;amp;year=2004&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;http://0.0.0.0:5000/jc.rufin/add
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;true&lt;span class="o"&gt;}&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title=Red%20Brazil&amp;amp;contest=goncourt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;http://0.0.0.0:5000/jc.rufin/add
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;true&lt;span class="o"&gt;}&lt;/span&gt;

$&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;http://0.0.0.0:5000/jc.rufin/docs
&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Globalia&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2004&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jc.rufin&amp;quot;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_rev&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1-3195...fbc8&amp;quot;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dec81d...1733c&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Red Brazil&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;contest&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;goncourt&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jc.rufin&amp;quot;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_rev&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1-7b15...a9a2&amp;quot;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dec81dc...17c0c&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;N'oubliez pas de colorier les cases √† votre guise, sinon ce squelette ne sert √† rien, le JSON √©tant d√©j√† la langue maternelle de CouchDB.&lt;/p&gt;
</content><category term="Dev"></category><category term="python"></category><category term="couchdb"></category><category term="flask"></category></entry><entry><title>Mes premiers pas avec Heroku</title><link href="https://blog.mathieu-leplatre.info/mes-premiers-pas-avec-heroku-fr.html" rel="alternate"></link><published>2011-10-10T10:30:00+02:00</published><updated>2011-10-10T10:30:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-10-10:/mes-premiers-pas-avec-heroku-fr.html</id><summary type="html">&lt;p&gt;J'ai pris le temps de tester la plateforme &lt;a class="reference external" href="http://www.heroku.com"&gt;Heroku&lt;/a&gt;, qui fait pas mal de bruit
en ce moment.&lt;/p&gt;
&lt;p&gt;L'id√©e est simple : le d√©veloppeur pousse son code dans une branche Git
pour d√©ployer son application. Ils se chargent du reste.&lt;/p&gt;
&lt;p&gt;La &lt;a class="reference external" href="http://devcenter.heroku.com/articles/python"&gt;documentation pour d√©ployer du python&lt;/a&gt; est bien faite.&lt;/p&gt;
&lt;div class="section" id="heroku-et-virtualenv"&gt;
&lt;h2&gt;heroku et ‚Ä¶&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;J'ai pris le temps de tester la plateforme &lt;a class="reference external" href="http://www.heroku.com"&gt;Heroku&lt;/a&gt;, qui fait pas mal de bruit
en ce moment.&lt;/p&gt;
&lt;p&gt;L'id√©e est simple : le d√©veloppeur pousse son code dans une branche Git
pour d√©ployer son application. Ils se chargent du reste.&lt;/p&gt;
&lt;p&gt;La &lt;a class="reference external" href="http://devcenter.heroku.com/articles/python"&gt;documentation pour d√©ployer du python&lt;/a&gt; est bien faite.&lt;/p&gt;
&lt;div class="section" id="heroku-et-virtualenv"&gt;
&lt;h2&gt;heroku et virtualenv&lt;/h2&gt;
&lt;p&gt;Pour commencer, j'ai install√© l'outil &lt;tt class="docutils literal"&gt;heroku&lt;/tt&gt; en ruby (sic), dans un &lt;em&gt;virtualenv&lt;/em&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo aptitude install rubygems

virtualenv --no-site-packages env
source env/bin/activate
&lt;/pre&gt;
&lt;p&gt;Merci √† Bruno, qui nous a expliqu√© r√©cemment &lt;a class="reference external" href="http://bruno.im/2011/sep/29/streamline-your-django-workflow/"&gt;comment faire cohabiter les gems ruby et virtualenv&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
export GEM_HOME=&amp;quot;$VIRTUAL_ENV/gems&amp;quot;
export GEM_PATH=&amp;quot;&amp;quot;
export PATH=$PATH:$GEM_HOME/bin
&lt;/pre&gt;
&lt;p&gt;(√Ä ajouter au hook dans &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.virtualenvs/postactivate&lt;/span&gt;&lt;/tt&gt; pour plus tard)&lt;/p&gt;
&lt;p&gt;Pour terminer, il suffit de poser le &lt;em&gt;gem&lt;/em&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
gem install heroku
&lt;/pre&gt;
&lt;p&gt;Et j'ai bien &lt;tt class="docutils literal"&gt;heroku&lt;/tt&gt; cloisonn√© dans le &lt;em&gt;virtualenv&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;src$&lt;span class="w"&gt; &lt;/span&gt;which&lt;span class="w"&gt; &lt;/span&gt;heroku
/home/mathieu/path/env/gems/bin/heroku

&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;src$&lt;span class="w"&gt; &lt;/span&gt;heroku&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;
Usage:&lt;span class="w"&gt; &lt;/span&gt;heroku&lt;span class="w"&gt; &lt;/span&gt;COMMAND&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;--app&lt;span class="w"&gt; &lt;/span&gt;APP&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;command-specific-options&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="heroku-et-la-configuration-de-l-application"&gt;
&lt;h2&gt;heroku et la Configuration de l'Application&lt;/h2&gt;
&lt;p&gt;Pour apprivoiser la plateforme, j'ai utilis√© le &lt;em&gt;micro&lt;/em&gt;-framework &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;,
sugg√©r√© dans le tutorial python. C'est ultra-simple, ultra-l√©ger, ultra-tout.&lt;/p&gt;
&lt;p&gt;Afin de g√©rer ma configuration, j'ai cr√©√© une classe &lt;tt class="docutils literal"&gt;Settings&lt;/tt&gt; qui utilise les variables d'environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Settings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DEBUG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;TESTING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;TESTING&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PORT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;HOST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Que je branche dans l'application :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# app.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;settings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Settings&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Settings&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;#...&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ensuite gr√¢ce au client &lt;tt class="docutils literal"&gt;heroku&lt;/tt&gt;, je peux contr√¥ler √† distance
la configuration de mon application, qui est red√©marr√©e √† chaque changement :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;src$&lt;span class="w"&gt; &lt;/span&gt;heroku&lt;span class="w"&gt; &lt;/span&gt;config
&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;bin:/usr/local/bin:/usr/bin:/bin
&lt;span class="nv"&gt;PYTHONUNBUFFERED&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;

&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;src$&lt;span class="w"&gt; &lt;/span&gt;heroku&lt;span class="w"&gt; &lt;/span&gt;config:add&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True
Adding&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;vars:
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;DEBUG&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;True
Restarting&lt;span class="w"&gt; &lt;/span&gt;app...&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;v19.

&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;src$&lt;span class="w"&gt; &lt;/span&gt;heroku&lt;span class="w"&gt; &lt;/span&gt;config
&lt;span class="nv"&gt;DEBUG&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;True
&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;bin:/usr/local/bin:/usr/bin:/bin
&lt;span class="nv"&gt;PYTHONUNBUFFERED&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;

&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;src$&lt;span class="w"&gt; &lt;/span&gt;heroku&lt;span class="w"&gt; &lt;/span&gt;config:remove&lt;span class="w"&gt; &lt;/span&gt;DEBUG
Removing&lt;span class="w"&gt; &lt;/span&gt;DEBUG&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;restarting&lt;span class="w"&gt; &lt;/span&gt;app...&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;v20.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Je peux revenir en arri√®re quand un changement de config a pos√© probl√®me :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;src$&lt;span class="w"&gt; &lt;/span&gt;heroku&lt;span class="w"&gt; &lt;/span&gt;releases
Rel&lt;span class="w"&gt;   &lt;/span&gt;Change&lt;span class="w"&gt;                          &lt;/span&gt;By&lt;span class="w"&gt;                    &lt;/span&gt;When
----&lt;span class="w"&gt;  &lt;/span&gt;----------------------&lt;span class="w"&gt;          &lt;/span&gt;----------&lt;span class="w"&gt;            &lt;/span&gt;----------
v20&lt;span class="w"&gt;   &lt;/span&gt;Config&lt;span class="w"&gt; &lt;/span&gt;remove&lt;span class="w"&gt; &lt;/span&gt;DEBUG&lt;span class="w"&gt;             &lt;/span&gt;your@mail.com&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;seconds&lt;span class="w"&gt; &lt;/span&gt;ago
v19&lt;span class="w"&gt;   &lt;/span&gt;Config&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;DEBUG&lt;span class="w"&gt;                &lt;/span&gt;your@mail.com&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;minute&lt;span class="w"&gt; &lt;/span&gt;ago


&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;src$&lt;span class="w"&gt; &lt;/span&gt;heroku&lt;span class="w"&gt; &lt;/span&gt;rollback&lt;span class="w"&gt; &lt;/span&gt;v19
Rolled&lt;span class="w"&gt; &lt;/span&gt;back&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;v19
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="python"></category><category term="flask"></category><category term="tips"></category><category term="heroku"></category></entry><entry><title>Avec Git rebase, vos arbres poussent droit</title><link href="https://blog.mathieu-leplatre.info/avec-git-rebase-vos-arbres-poussent-droit-fr.html" rel="alternate"></link><published>2011-09-16T17:37:00+02:00</published><updated>2011-09-16T17:37:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-09-16:/avec-git-rebase-vos-arbres-poussent-droit-fr.html</id><summary type="html">&lt;div class="section" id="le-probleme"&gt;
&lt;h2&gt;Le probl√®me&lt;/h2&gt;
&lt;p&gt;Par d√©faut, un &lt;tt class="docutils literal"&gt;git pull&lt;/tt&gt; est √©quivalent √† &lt;tt class="docutils literal"&gt;git fetch&lt;/tt&gt; et &lt;tt class="docutils literal"&gt;git merge&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Les &lt;tt class="docutils literal"&gt;merge&lt;/tt&gt;, c'est bien pour les branches, mais pour le tronc, c'est p√©nible : √ßa pollue l'historique et
√ßa zig-zag s√©v√®re !&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/git-merge-mess.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="la-solution"&gt;
&lt;h2&gt;La solution&lt;/h2&gt;
&lt;p&gt;En r√©alit√©, quand on travaille sur le tronc, ce qu'on veut c'est faire ‚Ä¶&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="le-probleme"&gt;
&lt;h2&gt;Le probl√®me&lt;/h2&gt;
&lt;p&gt;Par d√©faut, un &lt;tt class="docutils literal"&gt;git pull&lt;/tt&gt; est √©quivalent √† &lt;tt class="docutils literal"&gt;git fetch&lt;/tt&gt; et &lt;tt class="docutils literal"&gt;git merge&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Les &lt;tt class="docutils literal"&gt;merge&lt;/tt&gt;, c'est bien pour les branches, mais pour le tronc, c'est p√©nible : √ßa pollue l'historique et
√ßa zig-zag s√©v√®re !&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/git-merge-mess.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="la-solution"&gt;
&lt;h2&gt;La solution&lt;/h2&gt;
&lt;p&gt;En r√©alit√©, quand on travaille sur le tronc, ce qu'on veut c'est faire &lt;tt class="docutils literal"&gt;git fetch&lt;/tt&gt; et &lt;tt class="docutils literal"&gt;git rebase&lt;/tt&gt;.
C'est √† dire, au lieu de √ßa :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
      A-----B-----C master
     /             \
D---E---F---G---H---I origin/master
&lt;/pre&gt;
&lt;p&gt;on veut √ßa :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
                  A---B---C master
                 /
D---E---F---G---H origin/master
&lt;/pre&gt;
&lt;p&gt;Autrement dit, un &lt;tt class="docutils literal"&gt;git pull &lt;span class="pre"&gt;--rebase&lt;/span&gt;&lt;/tt&gt; ! Pour le faire par d√©faut :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;--global&lt;span class="w"&gt; &lt;/span&gt;branch.autosetuprebase&lt;span class="w"&gt; &lt;/span&gt;always
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et ensuite, au cas-o√π, pour le d√©sactiver ponctuellement, utiliser &lt;tt class="docutils literal"&gt;git pull &lt;span class="pre"&gt;--no-rebase&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Maintenant, le tronc, il est tout propre !&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/git-merge-clean.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="les-consequences"&gt;
&lt;h2&gt;Les cons√©quences ?&lt;/h2&gt;
&lt;p&gt;Lors d'un &lt;tt class="docutils literal"&gt;git pull&lt;/tt&gt;, il faudra r√©soudre chaque &lt;em&gt;commit&lt;/em&gt; conflictuel ind√©pendamment (perso, je pr√©f√®re).&lt;/p&gt;
&lt;p&gt;Les √™tres humains voudront utiliser &lt;a class="reference external" href="http://meld.sourceforge.net/"&gt;meld&lt;/a&gt;. Il suffit de l'installer, et lors
d'un conflit, de lancer &lt;tt class="docutils literal"&gt;git mergetool&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Une fois que tous les conflits sont r√©solus, terminer l'op√©ration, avec &lt;tt class="docutils literal"&gt;git rebase &lt;span class="pre"&gt;--continue&lt;/span&gt;&lt;/tt&gt;, et pousser vos prouesses √†
vos amis avec &lt;tt class="docutils literal"&gt;git push&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="git"></category><category term="tips"></category></entry><entry><title>A very Simple and Stupid plugin system in python</title><link href="https://blog.mathieu-leplatre.info/a-very-simple-and-stupid-plugin-system-in-python.html" rel="alternate"></link><published>2011-09-02T00:00:00+02:00</published><updated>2011-09-02T00:00:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-09-02:/a-very-simple-and-stupid-plugin-system-in-python.html</id><summary type="html">&lt;p&gt;Two convenience functions for listing and importing python modules :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# utils.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plugins_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plugins_dirs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; List all python modules in specified plugins folders &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;plugins_dirs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pathsep&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;


&lt;span class="k"&gt;def ‚Ä¶&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Two convenience functions for listing and importing python modules :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# utils.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plugins_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plugins_dirs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; List all python modules in specified plugins folders &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;plugins_dirs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pathsep&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;import_plugins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plugins_dirs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Import modules into specified environment (symbol table) &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;plugins_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plugins_dirs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;__import__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now use &lt;tt class="docutils literal"&gt;import_plugins()&lt;/tt&gt; wherever you need to use them !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# yourapp.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;import_plugins&lt;/span&gt;

&lt;span class="n"&gt;plugins_dirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;plugins/:module/plugins/&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plugins_dirs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pathsep&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;import_plugins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plugins_dirs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that in order to list all sub-classes of a specific one, you can use &lt;a class="reference external" href="http://code.activestate.com/recipes/576949/"&gt;this
recursive function&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That's all folks !&lt;/p&gt;
&lt;p&gt;It is very simple and very stupid, but useful :) You might now want to have
a look at serious stuff like &lt;a class="reference external" href="http://packages.python.org/Yapsy/"&gt;Yapsy&lt;/a&gt; or
&lt;a class="reference external" href="http://packages.python.org/distribute/pkg_resources.html"&gt;PkgResouces&lt;/a&gt;.&lt;/p&gt;
</content><category term="Dev"></category><category term="python"></category></entry><entry><title>Le pi√®ge des QThread</title><link href="https://blog.mathieu-leplatre.info/le-piege-des-qthread-fr.html" rel="alternate"></link><published>2011-09-01T11:09:00+02:00</published><updated>2011-09-01T11:09:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-09-01:/le-piege-des-qthread-fr.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Article original publi√© chez&lt;/em&gt; &lt;a class="reference external" href="http://www.makina-corpus.org/blog/le-pi%C3%A8ge-des-qthread"&gt;Makina Corpus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Il y a de nombreux billets de blogs, posts sur des forums, tutoriaux,
pages Wiki et autres, mais au final, √† part le fameux &lt;a class="reference external" href="http://labs.qt.nokia.com/2010/06/17/youre-doing-it-wrong/"&gt;&amp;quot;You're doing it wrong&amp;quot;&lt;/a&gt;,
qui peut para√Ætre obscure au premier abord, je n'ai pas trouv√© de r√©sum√©
de l'attrape-nigaud que ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Article original publi√© chez&lt;/em&gt; &lt;a class="reference external" href="http://www.makina-corpus.org/blog/le-pi%C3%A8ge-des-qthread"&gt;Makina Corpus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Il y a de nombreux billets de blogs, posts sur des forums, tutoriaux,
pages Wiki et autres, mais au final, √† part le fameux &lt;a class="reference external" href="http://labs.qt.nokia.com/2010/06/17/youre-doing-it-wrong/"&gt;&amp;quot;You're doing it wrong&amp;quot;&lt;/a&gt;,
qui peut para√Ætre obscure au premier abord, je n'ai pas trouv√© de r√©sum√©
de l'attrape-nigaud que je vais illustrer ici.&lt;/p&gt;
&lt;div class="section" id="le-piege"&gt;
&lt;h2&gt;Le pi√®ge&lt;/h2&gt;
&lt;p&gt;Naturellement, quand on veut faire une thread, on a envie d'h√©riter de l'objet
&lt;a class="reference external" href="http://doc.qt.nokia.com/latest/qthread.html"&gt;QThread&lt;/a&gt;. C'est ce qu'on fait avec le module &lt;tt class="docutils literal"&gt;threading&lt;/tt&gt; de python (en Java aussi il me semble).&lt;/p&gt;
&lt;p&gt;Voici ce qu'on √©crit naturellement : &lt;tt class="docutils literal"&gt;Objet&lt;/tt&gt;, la classe qui file l'ordre et &lt;tt class="docutils literal"&gt;Worker&lt;/tt&gt;, une classe qui bosse dur en arri√®re plan. On connecte les signaux et on d√©marre !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4.QtCore&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4.QtGui&lt;/span&gt;  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QApplication&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QObject&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;emitSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;aSignal()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QThread&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;aSlot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Slot is executed in thread : &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentThreadId&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Main application thread is : &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentThreadId&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;QObject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;aSignal()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aSlot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emitSignal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Done.&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ici, comme le slot &lt;tt class="docutils literal"&gt;aSlot()&lt;/tt&gt; est d√©fini dans la classe &lt;tt class="docutils literal"&gt;Worker&lt;/tt&gt;, qui h√©rite de &lt;tt class="docutils literal"&gt;QThread&lt;/tt&gt;, on
pense naturellement qu'il va √™tre ex√©cut√© en arri√®re-plan. Que nenni!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Main&lt;span class="w"&gt; &lt;/span&gt;application&lt;span class="w"&gt; &lt;/span&gt;thread&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;140068661352224&lt;/span&gt;
&lt;span class="c1"&gt;# (... wait 1 sec ...)&lt;/span&gt;
Slot&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;executed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;thread&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;140068661352224&lt;/span&gt;
Done.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="la-solution"&gt;
&lt;h2&gt;La solution&lt;/h2&gt;
&lt;p&gt;Un secret ? Les &lt;tt class="docutils literal"&gt;QThread&lt;/tt&gt; ne sont pas des threads. Elles enrobent l'execution d'une thread.&lt;/p&gt;
&lt;p&gt;L'appartenance (affinit√©) d'un objet √† une thread d√©termine le &lt;a class="reference external" href="http://doc.qt.nokia.com/latest/qt.html#ConnectionType-enum"&gt;type de connexion&lt;/a&gt; &lt;a class="reference external" href="http://doc.qt.nokia.com/latest/threads-qobject.html#signals-and-slots-across-threads"&gt;utilis√© par d√©faut&lt;/a&gt;, et par cons√©quent le comportement lors de l'execution des slots.&lt;/p&gt;
&lt;p&gt;Ce qu'il faut √©crire : &lt;tt class="docutils literal"&gt;Worker&lt;/tt&gt; n'est plus une &lt;tt class="docutils literal"&gt;QThread&lt;/tt&gt;, on force son affinit√© dans une thread avec &lt;tt class="docutils literal"&gt;moveToThread()&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QObject&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;emitSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;aSignal()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QObject&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;aSlot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Slot is executed in thread : &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentThreadId&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Main application thread is : &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentThreadId&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QThread&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;moveToThread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;QObject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;aSignal()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aSlot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emitSignal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Done.&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;D√©sormais, l'ex√©cution est bien asynchrone, comme on le souhaitait.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Main&lt;span class="w"&gt; &lt;/span&gt;application&lt;span class="w"&gt; &lt;/span&gt;thread&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;139961882056480&lt;/span&gt;
Done.
&lt;span class="c1"&gt;# (... wait 1 sec ...)&lt;/span&gt;
Slot&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;executed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;thread&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;139961512900352&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tout simplement ! Si j'avais lu mon article avant, je n'aurais pas perdu autant de temps √† lire toutes ces docs ambigu√´s sur le Net.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sources&lt;/strong&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://developer.qt.nokia.com/wiki/Threads_Events_QObjects"&gt;Explications compl√®tes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://doc.qt.nokia.com/4.7-snapshot/thread-basics.html"&gt;Thread Basics&lt;/a&gt; &lt;em&gt;(attention au pi√®ge)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="qt"></category><category term="python"></category><category term="tips"></category></entry><entry><title>PostGIS data in C++ using GDAL and Qt</title><link href="https://blog.mathieu-leplatre.info/postgis-data-in-c-using-gdal-and-qt.html" rel="alternate"></link><published>2011-08-23T10:25:00+02:00</published><updated>2011-08-23T10:25:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-08-23:/postgis-data-in-c-using-gdal-and-qt.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Original post at&lt;/em&gt; &lt;a class="reference external" href="http://makina-corpus.org"&gt;Makina Corpus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I did not find any ready-to-use snippets on the Web on this matter, so if
you are lucky enough, you'll find this one.&lt;/p&gt;
&lt;p&gt;The objective is to read GIS geometries from a PostGIS database and manipulate
them in C++. I use Qt here, but it ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Original post at&lt;/em&gt; &lt;a class="reference external" href="http://makina-corpus.org"&gt;Makina Corpus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I did not find any ready-to-use snippets on the Web on this matter, so if
you are lucky enough, you'll find this one.&lt;/p&gt;
&lt;p&gt;The objective is to read GIS geometries from a PostGIS database and manipulate
them in C++. I use Qt here, but it is not really a prerequisite, it just
helps a lot. Well, actually, it saves lives.&lt;/p&gt;
&lt;div class="section" id="database-connection"&gt;
&lt;h2&gt;Database Connection&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;m_db&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QSqlDatabase&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;addDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;QPSQL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;m_db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setHostName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;host&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;m_db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setDatabaseName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dbname&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;m_db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setUserName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;m_db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pass&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Do not close the database at the end of each query.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;m_db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;m_db&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QSqlDatabase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// reinitialize for real&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Shut it down like this in your class' destructor or you may have errors like
&lt;em&gt;QSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="records-reading"&gt;
&lt;h2&gt;Records Reading&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;QSqlQueryModel&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QSqlQueryModel&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SELECT id, ST_AsBinary(the_geom) AS the_geom &amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FROM table&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numRows&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;rowCount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;numRows&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Read fields&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;qlonglong&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;toLongLong&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;QByteArray&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wkb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;the_geom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;toByteArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Process !&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;processRecord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wkb&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;QByteArray uses &lt;a class="reference external" href="http://doc.qt.nokia.com/latest/implicit-sharing.html"&gt;implicit sharing&lt;/a&gt;
and can be passed as argument without being copied.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="geometries-parsing"&gt;
&lt;h2&gt;Geometries Parsing&lt;/h2&gt;
&lt;p&gt;In this part, we rely on &lt;a class="reference external" href="http://www.gdal.org"&gt;GDAL (Geospatial Data Abstraction Library)&lt;/a&gt;
&lt;a class="reference external" href="http://www.gdal.org/ogr/osr_tutorial.html"&gt;OGRSpatialReference&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It provides an API to access geometries coordinates etc.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;ogrsf_frmts.h&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt; // GDAL&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;processRecord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qlonglong&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QByteArray&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wkb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;OGRSpatialReference&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;osr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;OGRGeometry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Parse WKB&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;OGRErr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OGRGeometryFactory&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;createFromWkb&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;wkb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constData&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;osr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OGRERR_NONE&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// process error, like emit signal&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Analyse geometry by type and process them as you wish&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;OGRwkbGeometryType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wkbFlatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;getGeometryType&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;wkbLineString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;OGRLineString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;poRing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OGRLineString&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// Access line string nodes for example :&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numNode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;poRing&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;getNumPoints&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;OGRPoint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;poRing&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;getPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;qDebug&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getX&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getY&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;wkbMultiLineString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;OGRGeometryCollection&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;poCol&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OGRGeometryCollection&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numCol&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;poCol&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;getNumGeometries&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;numCol&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="c1"&gt;// Access line length for example :&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;qDebug&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;poCol&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;getGeometryRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;get_Length&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// process error, like emit signal&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Clean-up&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;OGRGeometryFactory&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;destroyGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this snippet, I only process linestrings, but all &lt;a class="reference external" href="http://www.gdal.org/ogr/ogr__core_8h.html#800236a0d460ef66e687b7b65610f12a"&gt;geometry types are available&lt;/a&gt;.
Consider writing a recursive function for geometry collections and so forth...&lt;/p&gt;
&lt;p&gt;Hope this helped !&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="c++"></category><category term="qt"></category><category term="postgis"></category><category term="gdal"></category></entry><entry><title>Django, gestion des settings d'application simplifi√©e</title><link href="https://blog.mathieu-leplatre.info/django-gestion-des-settings-dapplication-simplifiee-fr.html" rel="alternate"></link><published>2011-07-29T18:30:00+02:00</published><updated>2011-07-29T18:30:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-07-29:/django-gestion-des-settings-dapplication-simplifiee-fr.html</id><summary type="html">&lt;p&gt;Je reprends ici la m√©thode pr√©sent√©e par &lt;a class="reference external" href="http://blog.akei.com/post/4575980188/une-autre-facon-de-gerer-ses-settings-dapplication"&gt;Nicolas&lt;/a&gt; et je la couple avec mon petit &lt;a class="reference external" href="https://github.com/makinacorpus/easydict"&gt;EasyDict&lt;/a&gt; pour all√©ger l'utilisation !
Comme ses snippets sont dr√¥les, je ne les change pas !&lt;/p&gt;
&lt;div class="section" id="parametres-par-default-de-l-application"&gt;
&lt;h2&gt;Param√®tres par d√©fault de l'application&lt;/h2&gt;
&lt;p&gt;On a juste un constructeur √† ajouter par rapport √† ce qu'avait pr√©sent√© NiKo (avec &lt;a class="reference external" href="http://pypi.python.org/pypi/easydict/"&gt;EasyDict ‚Ä¶&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Je reprends ici la m√©thode pr√©sent√©e par &lt;a class="reference external" href="http://blog.akei.com/post/4575980188/une-autre-facon-de-gerer-ses-settings-dapplication"&gt;Nicolas&lt;/a&gt; et je la couple avec mon petit &lt;a class="reference external" href="https://github.com/makinacorpus/easydict"&gt;EasyDict&lt;/a&gt; pour all√©ger l'utilisation !
Comme ses snippets sont dr√¥les, je ne les change pas !&lt;/p&gt;
&lt;div class="section" id="parametres-par-default-de-l-application"&gt;
&lt;h2&gt;Param√®tres par d√©fault de l'application&lt;/h2&gt;
&lt;p&gt;On a juste un constructeur √† ajouter par rapport √† ce qu'avait pr√©sent√© NiKo (avec &lt;a class="reference external" href="http://pypi.python.org/pypi/easydict/"&gt;EasyDict install√©&lt;/a&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# apps/my_app/__init__.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;easydict&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EasyDict&lt;/span&gt;

&lt;span class="n"&gt;app_settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EasyDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;FOO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;ENABLE_CHUCK_NORRIZ_MODE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MY_APP_CONFIG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="surcharge-dans-le-projet"&gt;
&lt;h2&gt;Surcharge dans le projet&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;MY_APP_CONFIG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;ENABLE_CHUCK_NORRIZ_MODE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="utilisation"&gt;
&lt;h2&gt;Utilisation !&lt;/h2&gt;
&lt;p&gt;EasyDict transforme les cl√©s du &lt;cite&gt;dict&lt;/cite&gt; en attributs, on acc√®de aux settings en toute simplicit√© !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# foo/bar.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;my_app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app_settings&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;app_settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FOO&lt;/span&gt; &lt;span class="c1"&gt;# 42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# apps/my_app/utils.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app_settings&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;app_settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ENABLE_CHUCK_NORRIZ_MODE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Chuck Norriz is watching you&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Dance dance, little lamb&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="django"></category><category term="easydict"></category></entry><entry><title>Carte des v√©los avec Leaflet</title><link href="https://blog.mathieu-leplatre.info/carte-des-velos-avec-leaflet-fr.html" rel="alternate"></link><published>2011-05-30T15:25:00+02:00</published><updated>2011-05-30T15:25:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-05-30:/carte-des-velos-avec-leaflet-fr.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Article original publi√© chez&lt;/em&gt; &lt;a class="reference external" href="http://makina-corpus.org"&gt;Makina Corpus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Les bookmarks, un peu comme les cahiers de recettes, c'est bien de les remplir mais encore faut-il trouver les bons au moment ad√©quate !
M√™me quand il s'agit d'outils, de biblioth√®ques et de services Web, il faut trouver l'occasion de les tester avant le grand ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Article original publi√© chez&lt;/em&gt; &lt;a class="reference external" href="http://makina-corpus.org"&gt;Makina Corpus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Les bookmarks, un peu comme les cahiers de recettes, c'est bien de les remplir mais encore faut-il trouver les bons au moment ad√©quate !
M√™me quand il s'agit d'outils, de biblioth√®ques et de services Web, il faut trouver l'occasion de les tester avant le grand soir !
Et si on veut en faire un article de blog, alors l√†, il faut en plus donner envie d'y go√ªter :)&lt;/p&gt;
&lt;p&gt;Ici, je prends plein d'ingr√©dients trouv√©s au bord des chemins :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://packages.python.org/pyquery/"&gt;pyquery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://leaflet.cloudmade.com"&gt;leaflet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://developer.yahoo.com/yql/"&gt;Yahoo Query Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://mustache.github.com/"&gt;mustache&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Je secoue bien fort ! (sans oublier de saupoudrer de &lt;a class="reference external" href="http://jquery.com"&gt;jquery&lt;/a&gt;) et j'obtiens une carte interactive des stations v√©los de Toulouse !&lt;/p&gt;
&lt;div class="section" id="la-liste-des-stations"&gt;
&lt;h2&gt;La liste des stations&lt;/h2&gt;
&lt;p&gt;Sur le site &lt;a class="reference external" href="http://velonow.info"&gt;http://velonow.info&lt;/a&gt;, je r√©cup√®re un fichier XML qui contient
la liste statique des stations de v√©lo et leurs identifiants.&lt;/p&gt;
&lt;p&gt;C'est l'occasion d'utiliser &lt;a class="reference external" href="http://packages.python.org/pyquery/"&gt;pyquery&lt;/a&gt; pour le transformer en GeoJSON. &lt;a class="reference external" href="http://www.gawel.org"&gt;Gawel&lt;/a&gt; nous l'avait pr√©sent√© aux djangocongs, il s'agit du portage de l'API de JQuery en python !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyquery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PyQuery&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;

&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://server.com/file.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;marker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="n"&gt;pt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;geojson&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lng&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Je trouve √ßa g√©nial d'avoir la m√™me syntaxe de manipulation du DOM en python et en javascript ! Et pour faire du webscrapping, c'est top !&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="affichage-de-la-carte"&gt;
&lt;h2&gt;Affichage de la carte&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://cloudmade.com"&gt;Cloudmade&lt;/a&gt; a cr√©√© &lt;a class="reference external" href="http://leaflet.cloudmade.com"&gt;leaflet&lt;/a&gt; qui rejoint &lt;a class="reference external" href="http://www.tile5.org"&gt;Tile5&lt;/a&gt; et &lt;a class="reference external" href="http://polymaps.org"&gt;Polymaps&lt;/a&gt; en tant que challenger d'Openlayers !&lt;/p&gt;
&lt;p&gt;C'est une biblioth√®que l√©g√®re, jolie, fluide, optimis√©e pour les mobiles,
et m√™me compatible Internet Explorer !&lt;/p&gt;
&lt;p&gt;Pour afficher une carte centr√©e sur la localisation du visiteur de la page, il suffit de faire √ßa :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;map&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cloudmadeUrl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/997/256/{z}/{x}/{y}.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;cloudmade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TileLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cloudmadeUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cloudmade&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locateAndSetView&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pour l'instant, Leaflet ne g√®re pas les couches au format GeoJSON, en
attendant &lt;a class="reference external" href="https://github.com/CloudMade/Leaflet/issues/13"&gt;la prochaine release&lt;/a&gt;,
nous allons ajouter les points des stations en 2 coups de cuill√®re √† pot :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;features&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coordinates&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;marker&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Marker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LatLng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marker&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="details-d-une-station-en-popup"&gt;
&lt;h2&gt;D√©tails d'une station en popup&lt;/h2&gt;
&lt;p&gt;Les d√©tails d'une station (nombre de v√©los, emplacements, libres, occup√©s) sont disponibles en fournissant un identifiant sur le site de &lt;a class="reference external" href="http://www.velo.toulouse.fr"&gt;velo toulouse&lt;/a&gt;.
Mais lorsqu'on appelle la page en Ajax, le corps de la r√©ponse XML est vide. Une protection contre la bidouillabilit√© s√ªrement.&lt;/p&gt;
&lt;p&gt;C'est l√† que &lt;a class="reference external" href="http://developer.yahoo.com/yql/"&gt;Yahoo Query Language&lt;/a&gt; nous aide ! On passe par Yahoo pour acc√®der aux ressources du Web avec &lt;a class="reference external" href="http://developer.yahoo.com/yql/console/"&gt;des requ√™tes similaires aux bases de donn√©es&lt;/a&gt; !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;yql&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;select * from xml where url = &amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;yqlurl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://query.yahooapis.com/v1/public/yql?q=&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yql&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yqlurl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// show data in pop up !&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Je fais une petite fonction pour transformer l'XML r√©cup√©r√© en objet :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;xml2obj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xmldata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xmldata&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;nodeName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;station&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;free&amp;gt;&lt;/span&gt;12&lt;span class="nt"&gt;&amp;lt;/free&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;available&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/available&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;total&amp;gt;&lt;/span&gt;16&lt;span class="nt"&gt;&amp;lt;/total&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/station&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;devient :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;free&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;available&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;16&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pour mettre en forme ces informations dans la pop-up, nous allons utiliser &lt;a class="reference external" href="http://mustache.github.com/"&gt;mustache&lt;/a&gt; !
Conceptuellement, il s'agit tout simplement d'un moteur de template avec &lt;a class="reference external" href="http://mustache.github.com/mustache.5.html"&gt;une syntaxe simplifi√©e&lt;/a&gt; ! Il y a une impl√©mentation
dans quasiment tous les languages, dont Javascript.&lt;/p&gt;
&lt;p&gt;Cela √©vite principalement de faire du code javascript pour la mise en forme des donn√©es, notamment pour
celles r√©cup√©r√©es en JSON via Ajax.&lt;/p&gt;
&lt;p&gt;On construit une cha√Æne avec les fameuses &lt;cite&gt;{{}}&lt;/cite&gt; et on fournit un objet pour substituer les valeurs :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;xml2obj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xmldata&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;station&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;h2&amp;gt;Station #{{ number }}&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;p&amp;gt;{{ address }}&amp;lt;/p&amp;gt;                    \&lt;/span&gt;
&lt;span class="s2"&gt;                {{# station }}                          \&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;ul&amp;gt;                                    \&lt;/span&gt;
&lt;span class="s2"&gt;                  &amp;lt;li&amp;gt;{{ available }} available&amp;lt;/li&amp;gt;    \&lt;/span&gt;
&lt;span class="s2"&gt;                  &amp;lt;li&amp;gt;{{ free }} free slots&amp;lt;/li&amp;gt;        \&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;/ul&amp;gt;                                   \&lt;/span&gt;
&lt;span class="s2"&gt;                {{/ station }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Mustache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Show marker popup !&lt;/span&gt;
&lt;span class="nx"&gt;marker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bindPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;openPopup&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et voil√† !&lt;/p&gt;
&lt;img alt="" src="/images/leaflet-velo.png" /&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="javascript"></category><category term="leaflet"></category><category term="mustache"></category><category term="pyquery"></category><category term="jquery"></category></entry><entry><title>URL reverse en Javascript avec django</title><link href="https://blog.mathieu-leplatre.info/url-reverse-en-javascript-avec-django-fr.html" rel="alternate"></link><published>2011-05-27T15:25:00+02:00</published><updated>2011-05-27T15:25:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-05-27:/url-reverse-en-javascript-avec-django-fr.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Article original publi√© chez&lt;/em&gt; &lt;a class="reference external" href="http://makina-corpus.org"&gt;Makina Corpus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Un aspect fondamental de la philosophie django consiste √† √©viter toute sorte de redondance : &lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/misc/design-philosophies/"&gt;Don't Repeat Yourself&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;La tentation est souvent trop belle, et respecter les fondamentaux s'av√®re parfois difficile ! C'est le cas de la r√©√©criture d'URL en Javascript.&lt;/p&gt;
&lt;p&gt;Imaginons l'URL suivante d√©finie dans ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Article original publi√© chez&lt;/em&gt; &lt;a class="reference external" href="http://makina-corpus.org"&gt;Makina Corpus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Un aspect fondamental de la philosophie django consiste √† √©viter toute sorte de redondance : &lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/misc/design-philosophies/"&gt;Don't Repeat Yourself&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;La tentation est souvent trop belle, et respecter les fondamentaux s'av√®re parfois difficile ! C'est le cas de la r√©√©criture d'URL en Javascript.&lt;/p&gt;
&lt;p&gt;Imaginons l'URL suivante d√©finie dans &lt;cite&gt;urls.py&lt;/cite&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^/plop/(?P&amp;lt;x&amp;gt;\d)/(?P&amp;lt;y&amp;gt;\d)$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plopview&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;plop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pour utiliser cette URL en Javascript avec des param√®tres variables, on peut imaginer plusieurs approches.&lt;/p&gt;
&lt;div class="section" id="j-aime-pas"&gt;
&lt;h2&gt;J'aime pas&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;generic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{% url &amp;#39;plop&amp;#39; 0 0 %}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;generic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0/0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pas DRY ! √† cause des &lt;cite&gt;/&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{% url &amp;#39;plop&amp;#39; 0 0 %}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../../&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pas DRY non plus !&lt;/p&gt;
&lt;p&gt;On peut aussi changer le pattern pour √©viter les &lt;cite&gt;/&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^/plop/(?P&amp;lt;x&amp;gt;[\d]|x)/(?P&amp;lt;y&amp;gt;[\d]|y)$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;plop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;generic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{% url &amp;#39;toto&amp;#39; &amp;#39;x&amp;#39; &amp;#39;y&amp;#39; %}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;generic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;C'est mieux, mais pas DRY ! √† cause des &lt;cite&gt;x&lt;/cite&gt;, &lt;cite&gt;y&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;On pourrait aussi imaginer une vue django qui ferait le &lt;cite&gt;reverse()&lt;/cite&gt;. Mais cela multiplierait les aller-retours serveur, ce qui n'est pas toujours recommand√©...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="la-bonne"&gt;
&lt;h2&gt;La bonne&lt;/h2&gt;
&lt;p&gt;Il existe une application pour √ßa ! &lt;a class="reference external" href="https://github.com/Dimitri-Gnidash/django-js-utils"&gt;django-js-utils&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elle se charge de g√©n√©rer un fichier Javascript (&lt;cite&gt;settings.URLS_JS_GENERATED_FILE&lt;/cite&gt;) gr√¢ce √† une commande de gestion&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python manage.js js_urls
&lt;/pre&gt;
&lt;p&gt;Ensuite on utilise explicitement le fichier g√©n√©r√©&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ MEDIA_URL }}/js/dutils.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ MEDIA_URL }}/js/dutils.conf.urls.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et on fait du vrai DRY !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;dutils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;plop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Gagn√© ! \o/&lt;/p&gt;
&lt;p&gt;Un inconv√©nient √† noter tout de m√™me : la liste de l'ensemble des URLs de l'application est accessible au public. Mais j'ai pas mieux ma pauvre dame !&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="django"></category><category term="javascript"></category></entry><entry><title>Django et Jenkins</title><link href="https://blog.mathieu-leplatre.info/django-et-jenkins-fr.html" rel="alternate"></link><published>2011-04-28T17:25:00+02:00</published><updated>2011-04-28T17:25:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-04-28:/django-et-jenkins-fr.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Article original publi√© chez&lt;/em&gt; &lt;a class="reference external" href="http://makina-corpus.org"&gt;Makina Corpus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lors des &lt;a class="reference external" href="http://rencontres.django-fr.org/2011/"&gt;Recontres Django 2011&lt;/a&gt;, &lt;a class="reference external" href="http://www.akei.com"&gt;Nicolas Perriault&lt;/a&gt; a pr√©sent√© les principes de l'&lt;a class="reference external" href="http://fr.wikipedia.org/wiki/Int%C3%A9gration_continue"&gt;int√©gration continue&lt;/a&gt; avec &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt; et &lt;a class="reference external" href="http://jenkins-ci.org/"&gt;Jenkins&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Le diaporama, &lt;a class="reference external" href="http://www.akei.com/presentations/2011-Djangocong/index.html"&gt;disponible en ligne&lt;/a&gt;, suffit amplement pour d√©marrer !&lt;/p&gt;
&lt;p&gt;Mais pour qu'un projet django soit test√© facilement, il doit se d√©ployer et se lancer facilement ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Article original publi√© chez&lt;/em&gt; &lt;a class="reference external" href="http://makina-corpus.org"&gt;Makina Corpus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lors des &lt;a class="reference external" href="http://rencontres.django-fr.org/2011/"&gt;Recontres Django 2011&lt;/a&gt;, &lt;a class="reference external" href="http://www.akei.com"&gt;Nicolas Perriault&lt;/a&gt; a pr√©sent√© les principes de l'&lt;a class="reference external" href="http://fr.wikipedia.org/wiki/Int%C3%A9gration_continue"&gt;int√©gration continue&lt;/a&gt; avec &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt; et &lt;a class="reference external" href="http://jenkins-ci.org/"&gt;Jenkins&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Le diaporama, &lt;a class="reference external" href="http://www.akei.com/presentations/2011-Djangocong/index.html"&gt;disponible en ligne&lt;/a&gt;, suffit amplement pour d√©marrer !&lt;/p&gt;
&lt;p&gt;Mais pour qu'un projet django soit test√© facilement, il doit se d√©ployer et se lancer facilement ! C'est certes l'occasion de peaufiner l'automatisation, mais c'est loin d'√™tre trivial quand il y a du SIG, du &lt;a class="reference external" href="http://celeryproject.org"&gt;celery&lt;/a&gt; ...
Je vais tenter de partager mes notes dans ce billet.&lt;/p&gt;
&lt;div class="section" id="le-minimum-requis"&gt;
&lt;h2&gt;Le minimum requis&lt;/h2&gt;
&lt;p&gt;Pour l'installation de Jenkins, rien de plus simple (&lt;em&gt;sur debian&lt;/em&gt;)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo aptitude install jenkins
&lt;/pre&gt;
&lt;p&gt;Mais il va falloir lui donner de quoi t√©l√©charger votre code sur &lt;cite&gt;git&lt;/cite&gt; et parfois compiler les librairies python n√©cessaires&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo aptitude install git-core
sudo aptitude install python-dev build-essential python-virtualenv
&lt;/pre&gt;
&lt;p&gt;Les plugins indispensables :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;covertura&lt;/li&gt;
&lt;li&gt;Violations&lt;/li&gt;
&lt;li&gt;GIT&lt;/li&gt;
&lt;li&gt;Green Balls&lt;/li&gt;
&lt;li&gt;Continuous Integration Game&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="organisation-du-projet-django"&gt;
&lt;h2&gt;Organisation du projet Django&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;D√©finition des d√©pendances globales dans &lt;cite&gt;requirements.txt&lt;/cite&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Django&amp;gt;=1.3
south
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;D√©finition des d√©pendances li√©es aux tests dans &lt;cite&gt;requirements-testing.txt&lt;/cite&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
django-jenkins
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Ajout d'un fichier &lt;cite&gt;pylint.rc&lt;/cite&gt; pour r√©gler les niveaux d'alerte &lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0008/"&gt;PEP-8&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[MESSAGES CONTROL]
disable=E1101,E1103,C0111,I0011,I0012,W0704,W0142,W0212,W0232,W0613,W0702,R0201
...
...
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Mod√®le de settings de tests dans &lt;cite&gt;project/test_settings.py&lt;/cite&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;default_settings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;TEMPLATE_DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DEBUG&lt;/span&gt;

&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django_jenkins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;PYLINT_RCFILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PROJECT_ROOT_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;..&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;conf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pylint.rc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration-du-job-jenkins"&gt;
&lt;h2&gt;Configuration du job Jenkins&lt;/h2&gt;
&lt;p&gt;Les informations de la pr√©sentation de Nicolas suffisent pour d√©marrer.&lt;/p&gt;
&lt;p&gt;J'ai not√© cependant qu'il fallait lancer &lt;cite&gt;manage.py&lt;/cite&gt; depuis un r√©pertoire parent au projet pour que l'exploration du code source fonctionne.&lt;/p&gt;
&lt;p&gt;Pour profiter de la magie des ingr√©dients pr√©c√©dents, nous aurons donc juste √† ajouter un bloc script shell, qui installe les d√©pendances list√©es, pose les settings de test et migre la base (avec &lt;a class="reference external" href="http://south.aeracode.org"&gt;South&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash -ex&lt;/span&gt;
virtualenv&lt;span class="w"&gt; &lt;/span&gt;--quiet&lt;span class="w"&gt; &lt;/span&gt;ve
&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;./ve/bin/activate
pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-E&lt;span class="w"&gt; &lt;/span&gt;./ve&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$WORKSPACE&lt;/span&gt;/requirements.txt
pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-E&lt;span class="w"&gt; &lt;/span&gt;./ve&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$WORKSPACE&lt;/span&gt;/requirements-testing.txt
cp&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$WORKSPACE&lt;/span&gt;/project/test_settings.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$WORKSPACE&lt;/span&gt;/project/local_settings.py
python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$WORKSPACE&lt;/span&gt;/project/manage.py&lt;span class="w"&gt; &lt;/span&gt;syncdb&lt;span class="w"&gt; &lt;/span&gt;--noinput
python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$WORKSPACE&lt;/span&gt;/project/manage.py&lt;span class="w"&gt; &lt;/span&gt;migrate
deactivate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;et celui-ci pour lancer les tests proprements dits :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash -ex&lt;/span&gt;
virtualenv&lt;span class="w"&gt; &lt;/span&gt;--quiet&lt;span class="w"&gt; &lt;/span&gt;ve
&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;./ve/bin/activate
python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$WORKSPACE&lt;/span&gt;/project/manage.py&lt;span class="w"&gt; &lt;/span&gt;jenkins&lt;span class="w"&gt; &lt;/span&gt;yourapps
deactivate
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pour-un-projet-sig"&gt;
&lt;h2&gt;Pour un projet SIG&lt;/h2&gt;
&lt;p&gt;Il faut installer certaines librairies SIG sur le serveur Jenkins.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;aptitude&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;libproj0&lt;span class="w"&gt; &lt;/span&gt;libgeos-c1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Si le besoin de cloisonner ces librairies pour chaque projet se fait ressentir, il faut utiliser des outils comme &lt;a class="reference external" href="http://www.minitage.org"&gt;minitage&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="spatialite-au-lieu-de-postgis-comme-base-de-tests"&gt;
&lt;h3&gt;Spatialite au lieu de PostGIS comme base de tests&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;aptitude&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;python-sqlite&lt;span class="w"&gt; &lt;/span&gt;libspatialite2&lt;span class="w"&gt; &lt;/span&gt;sqlite3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Script d'initialisation&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget&lt;span class="w"&gt; &lt;/span&gt;http://www.gaia-gis.it/spatialite/init_spatialite-2.3.zip&lt;span class="w"&gt; &lt;/span&gt;-O&lt;span class="w"&gt; &lt;/span&gt;/tmp/init_spatialite-2.3.zip
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/usr/local/lib/
sudo&lt;span class="w"&gt; &lt;/span&gt;unzip&lt;span class="w"&gt; &lt;/span&gt;/tmp/init_spatialite-2.3.zip
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;avec dans &lt;cite&gt;test_settings.py&lt;/cite&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.contrib.gis.db.backends.spatialite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;SPATIALITE_SQL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;usr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;local&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lib&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;init_spatialite-2.3.sql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Si pysqlite n'a pas √©t√© compil√© avec les extensions C (Erreur: &lt;em&gt;The pysqlite library does not support C extension loading.&lt;/em&gt;) il va falloir le recompiler !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;aptitude&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;libsqlite3-dev
wget&lt;span class="w"&gt; &lt;/span&gt;http://pysqlite.googlecode.com/files/pysqlite-2.6.3.tar.gz
tar&lt;span class="w"&gt; &lt;/span&gt;-zxvf&lt;span class="w"&gt; &lt;/span&gt;pysqlite-2.6.3.tar.gz
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pysqlite-2.6.3
sed&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;s/define&lt;span class="o"&gt;=&lt;/span&gt;SQLITE_OMIT_LOAD_EXTENSION/#define&lt;span class="o"&gt;=&lt;/span&gt;SQLITE_OMIT_LOAD_EXTENSION/g&lt;span class="w"&gt; &lt;/span&gt;setup.cfg

&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;./ve/bin/activate
python&lt;span class="w"&gt; &lt;/span&gt;setup.py&lt;span class="w"&gt; &lt;/span&gt;install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pour-un-projet-celery"&gt;
&lt;h2&gt;Pour un projet Celery&lt;/h2&gt;
&lt;div class="section" id="kombu-au-lieu-de-rabbitmq-comme-gestionnaire-de-messages"&gt;
&lt;h3&gt;Kombu au lieu de RabbitMQ comme gestionnaire de messages&lt;/h3&gt;
&lt;p&gt;&lt;cite&gt;requirements-testing.txt&lt;/cite&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
kombu
djkombu
&lt;/pre&gt;
&lt;p&gt;&lt;cite&gt;test_settings.py&lt;/cite&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;djkombu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;CARROT_BACKEND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;django&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pour d√©sactiver la parall√©lisation lors des tests&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CELERY_ALWAYS_EAGER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="django"></category><category term="jenkins"></category><category term="continuous integration"></category></entry><entry><title>landez : fabriquer facilement des fichiers MBTiles en python</title><link href="https://blog.mathieu-leplatre.info/landez-fabriquer-facilement-des-fichiers-mbtiles-en-python-fr.html" rel="alternate"></link><published>2011-04-21T12:04:00+02:00</published><updated>2011-04-21T12:04:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-04-21:/landez-fabriquer-facilement-des-fichiers-mbtiles-en-python-fr.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.makina-corpus.org/blog/integration-mbtiles-format-android"&gt;Une nouvelle fois&lt;/a&gt;,
Makina Corpus se rapproche du projet &lt;a class="reference external" href="http://mapbox.com/"&gt;MapBox&lt;/a&gt;, avec une contribution
sur la librairie &lt;a class="reference external" href="https://github.com/mapbox/mbutil/contributors"&gt;mbutil&lt;/a&gt;, qui permet de fabriquer des fichiers MBTiles.&lt;/p&gt;
&lt;p&gt;Nous l'utilisons dans &lt;a class="reference external" href="https://github.com/makinacorpus/landez"&gt;landez&lt;/a&gt;, un outil qui permet
de cr√©er des fichiers MBTiles √† partir de sites de tuiles externes ou de feuilles de styles Mapnik ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.makina-corpus.org/blog/integration-mbtiles-format-android"&gt;Une nouvelle fois&lt;/a&gt;,
Makina Corpus se rapproche du projet &lt;a class="reference external" href="http://mapbox.com/"&gt;MapBox&lt;/a&gt;, avec une contribution
sur la librairie &lt;a class="reference external" href="https://github.com/mapbox/mbutil/contributors"&gt;mbutil&lt;/a&gt;, qui permet de fabriquer des fichiers MBTiles.&lt;/p&gt;
&lt;p&gt;Nous l'utilisons dans &lt;a class="reference external" href="https://github.com/makinacorpus/landez"&gt;landez&lt;/a&gt;, un outil qui permet
de cr√©er des fichiers MBTiles √† partir de sites de tuiles externes ou de feuilles de styles Mapnik.&lt;/p&gt;
&lt;p&gt;Son utilisation est fort simple !&lt;/p&gt;
&lt;p&gt;Pour un service de tuiles externe :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;landez&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MBTilesBuilder&lt;/span&gt;

&lt;span class="c1"&gt;# downloads from Cloudmade by default, be careful with terms of usage  !&lt;/span&gt;
&lt;span class="n"&gt;mb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MBTilesBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dest.mbtiles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_coverage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bbox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;90.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;180.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;180.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;90.0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;zoomlevels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;mb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Avec une feuille de style locale :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;landez&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MBTilesBuilder&lt;/span&gt;

&lt;span class="n"&gt;mb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MBTilesBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stylefile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yourstyle.xml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dest.mbtiles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_coverage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bbox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;90.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;180.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;180.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;90.0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;zoomlevels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;mb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Une branche experimentale a √©t√© initi√©e pour travailler sur le multiprocessing
afin de parall√©liser au maximum la fabrication des tuiles en amont. Si cela vous int√©resse, soyez les bienvenus !&lt;/p&gt;
</content><category term="Dev"></category><category term="python"></category><category term="mapbox"></category><category term="gis"></category><category term="landez"></category></entry><entry><title>Deploy Django behind a reverse proxy</title><link href="https://blog.mathieu-leplatre.info/deploy-django-behind-a-reverse-proxy.html" rel="alternate"></link><published>2011-04-19T00:00:00+02:00</published><updated>2011-04-19T00:00:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-04-19:/deploy-django-behind-a-reverse-proxy.html</id><summary type="html">&lt;p&gt;By default, Django will assume that your root URL is the root (&lt;cite&gt;/&lt;/cite&gt;) of your domain.&lt;/p&gt;
&lt;p&gt;Using a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Reverse_proxy"&gt;reverse proxy&lt;/a&gt;, we can run multiple django instances on the same server, using the same domain. (&lt;cite&gt;http://server.org/site1/&lt;/cite&gt;, &lt;cite&gt;http://server.org/site2/&lt;/cite&gt;, ...)&lt;/p&gt;
&lt;p&gt;Many redirects of your application will then be broken ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;By default, Django will assume that your root URL is the root (&lt;cite&gt;/&lt;/cite&gt;) of your domain.&lt;/p&gt;
&lt;p&gt;Using a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Reverse_proxy"&gt;reverse proxy&lt;/a&gt;, we can run multiple django instances on the same server, using the same domain. (&lt;cite&gt;http://server.org/site1/&lt;/cite&gt;, &lt;cite&gt;http://server.org/site2/&lt;/cite&gt;, ...)&lt;/p&gt;
&lt;p&gt;Many redirects of your application will then be broken (most notable is validation of login form). You can fix that by forcing the root URL in your settings&lt;/p&gt;
&lt;pre class="literal-block"&gt;
FORCE_SCRIPT_NAME = '/site1'
&lt;/pre&gt;
&lt;p&gt;If you use &lt;a class="reference external" href="https://github.com/dcramer/django-sentry"&gt;Sentry&lt;/a&gt;, you'll also have to set&lt;/p&gt;
&lt;pre class="literal-block"&gt;
SENTRY_URL_PREFIX = '/site1'
&lt;/pre&gt;
</content><category term="Dev"></category><category term="tips"></category><category term="deployment"></category><category term="django"></category></entry><entry><title>Ajouter un s√©lecteur de couches (layer switcher) √† polymaps</title><link href="https://blog.mathieu-leplatre.info/ajouter-un-selecteur-de-couches-layer-switcher-a-polymaps-fr.html" rel="alternate"></link><published>2011-03-09T12:03:00+01:00</published><updated>2011-03-09T12:03:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-03-09:/ajouter-un-selecteur-de-couches-layer-switcher-a-polymaps-fr.html</id><summary type="html">&lt;p&gt;Je fais partie de ceux qui sont persuad√©s que &lt;a class="reference external" href="http://polymaps.org/"&gt;polymaps&lt;/a&gt; est tout √† fait mature !
Certes, il ne fournit pas autant de fonctionnalit√©s et de connecteurs qu'OpenLayers,
mais il ne semble pas que ce soit son objectif ! Il est l√©ger et personnalisable √† souhait !&lt;/p&gt;
&lt;p&gt;Pour le prouver, nous allons cr√©er ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Je fais partie de ceux qui sont persuad√©s que &lt;a class="reference external" href="http://polymaps.org/"&gt;polymaps&lt;/a&gt; est tout √† fait mature !
Certes, il ne fournit pas autant de fonctionnalit√©s et de connecteurs qu'OpenLayers,
mais il ne semble pas que ce soit son objectif ! Il est l√©ger et personnalisable √† souhait !&lt;/p&gt;
&lt;p&gt;Pour le prouver, nous allons cr√©er ici un s√©lecteur de couches pour polymaps.&lt;/p&gt;
&lt;p&gt;Javascript n'est pas mon langage de pr√©dilection, encore moins pour faire
de la programmation orient√©e objets.&lt;/p&gt;
&lt;p&gt;Voici ce que j'ai r√©ussi √† comprendre de l'h√©ritage et la port√©e dans le mod√®le objet de polymaps :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;po&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;po&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classname&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// new class or inheritance&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="c1"&gt;// member variable&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;privatemethod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// [...]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classmethod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// [...]&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// allows to chain method calls&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="nx"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;polymaps&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pour faire ce s√©lecteur de couches, nous aurons besoin d'une classe disposant :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;de variables membres qui stockent la liste de couches disponibles (&lt;tt class="docutils literal"&gt;layers&lt;/tt&gt;) et la couche actuelle (&lt;tt class="docutils literal"&gt;current&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;d'une m√©thode de classe qui bascule d'une couche √† l'autre&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;switchto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// find layer by name&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// if already loaded, make it visible&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// else load it&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// hide current&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;d'une m√©thode qui cr√©e l'interface avec les radio buttons et qui les relie √† la m√©thode pr√©cedente&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// [...]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// For each layer, create a &amp;lt;input&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;input&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;radio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// [...]&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Link onChange event on radio&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onchange&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;switchto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// [...]&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// [...]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;elt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Maintenant il suffit de l'utiliser ! Voici un exemple simple avec deux couches :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Create a normal map&lt;/span&gt;
&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;po&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mcmap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;po&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;svg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;po&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;interact&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="c1"&gt;// Define the layers&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;layers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;layer1&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;po&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;po&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://server1/{Z}/{X}/{Y}.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;l1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;layer2&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;po&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;po&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://server2/{Z}/{X}/{Y}.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;l2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Add the default one&lt;/span&gt;
&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;layer1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;// Create the switcher&lt;/span&gt;
&lt;span class="nx"&gt;po&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;switcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Fond de carte&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;layerswitcher&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et voil√† ! Nous avons notre s√©lecteur de couches, avec un code html
tout simple (&lt;tt class="docutils literal"&gt;div&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;input&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;label&lt;/tt&gt;), facile √† styler en CSS,
contrairement au &lt;a class="reference external" href="http://pastebin.com/LQPBv6tZ"&gt;gros pav√© g√©n√©r√© par le *LayerSwitcher* d'OpenLayers&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="" src="/images/polymaps-switcher.png" /&gt;
&lt;p&gt;Pour acc√©der au code complet et l'am√©liorer : &amp;quot;&lt;a class="reference external" href="https://github.com/makinacorpus/polymaps-extensions"&gt;Fork me on GitHub&lt;/a&gt;&amp;quot; !&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Article original publi√© chez&lt;/em&gt; &lt;a class="reference external" href="http://www.makina-corpus.org/blog/ajouter-un-s%C3%A9lecteur-de-couches-layer-switcher-%C3%A0-polymaps"&gt;Makina Corpus&lt;/a&gt;&lt;/p&gt;
</content><category term="Dev"></category><category term="polymaps"></category><category term="tips"></category><category term="javascript"></category><category term="gis"></category></entry><entry><title>Afficher des pictogrammes avec polymaps</title><link href="https://blog.mathieu-leplatre.info/afficher-des-pictogrammes-avec-polymaps-fr.html" rel="alternate"></link><published>2011-02-28T17:02:00+01:00</published><updated>2011-02-28T17:02:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-02-28:/afficher-des-pictogrammes-avec-polymaps-fr.html</id><summary type="html">&lt;p&gt;En reprenant l'exemple de l'&lt;a class="reference external" href="http://www.makina-corpus.org/blog/afficher-les-donn%C3%A9es-de-paris-opendata-avec-polymaps"&gt;√©pisode pr√©c√©dent avec polymaps&lt;/a&gt;, nous allons maintenant afficher des pictogrammes sur les points.&lt;/p&gt;
&lt;p&gt;On conserve la couche GeoJSON en utilisant un &lt;a class="reference external" href="http://fr.wikipedia.org/wiki/Fonction_de_rappel"&gt;callback&lt;/a&gt; pour l'√©v√®nement &lt;tt class="docutils literal"&gt;load&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;po&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geoJson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;collecteurs.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;load&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dans la fonction &lt;tt class="docutils literal"&gt;load()&lt;/tt&gt;, nous allons remplacer les cercles dessin√©s ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;En reprenant l'exemple de l'&lt;a class="reference external" href="http://www.makina-corpus.org/blog/afficher-les-donn%C3%A9es-de-paris-opendata-avec-polymaps"&gt;√©pisode pr√©c√©dent avec polymaps&lt;/a&gt;, nous allons maintenant afficher des pictogrammes sur les points.&lt;/p&gt;
&lt;p&gt;On conserve la couche GeoJSON en utilisant un &lt;a class="reference external" href="http://fr.wikipedia.org/wiki/Fonction_de_rappel"&gt;callback&lt;/a&gt; pour l'√©v√®nement &lt;tt class="docutils literal"&gt;load&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;po&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geoJson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;collecteurs.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;load&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dans la fonction &lt;tt class="docutils literal"&gt;load()&lt;/tt&gt;, nous allons remplacer les cercles dessin√©s par d√©faut par des pictogrammes en manipulant les √©l√©ments de la page (&lt;a class="reference external" href="http://fr.wikipedia.org/wiki/Document_Object_Model"&gt;DOM&lt;/a&gt;).
Nous utilisons ici la variable &lt;tt class="docutils literal"&gt;n$&lt;/tt&gt;, qui provient du miniscript &lt;tt class="docutils literal"&gt;nns.js&lt;/tt&gt; livr√© dans l'archive &lt;em&gt;polymaps&lt;/em&gt; et qui facilite la manipulation du DOM (le v√©n√©rable &lt;a class="reference external" href="http://jquery.com/"&gt;jquery&lt;/a&gt; ferait aussi l'affaire)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ICONSIZE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Parcourir les features de la carte&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;features&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;n$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;features&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;features&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Ajouter et positionner le pictogramme&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// (√† partir de la position du cercle)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;svg:image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ICONSIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;height&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ICONSIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;transform&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;transform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; translate(-&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ICONSIZE&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;                                       &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ICONSIZE&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Enlever le cercle original&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// D√©finir le chemin du pictogramme √† utiliser&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// en fonction de l&amp;#39;attribut&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xlink:href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Etat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Actif&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="w"&gt;                               &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;actif.svg&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;inactif.svg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="" src="/images/polymaps-pictogrammes.jpg" /&gt;
&lt;p&gt;&lt;em&gt;¬© City of Paris, ODBL, CloudMade, OpenStreetMap contributors, CCBYSA&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Ici, nous avons utilis√© des pictogrammes SVG, mais le m√™me code fonctionne avec des /images PNG ou JPG...&lt;/p&gt;
</content><category term="Dev"></category><category term="javascript"></category><category term="polymaps"></category><category term="gis"></category></entry><entry><title>Afficher les donn√©es de Paris OpenData avec polymaps</title><link href="https://blog.mathieu-leplatre.info/afficher-les-donnees-de-paris-opendata-avec-polymaps-fr.html" rel="alternate"></link><published>2011-02-24T13:02:00+01:00</published><updated>2011-02-24T13:02:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-02-24:/afficher-les-donnees-de-paris-opendata-avec-polymaps-fr.html</id><summary type="html">&lt;p&gt;En ouvrant l'acc√®s √† un catalogue de donn√©es diverses (√âquipements, b√¢ti, arbres d'alignement, arr√™t√©s municipaux, ...)
l'initiative &lt;a class="reference external" href="http://opendata.paris.fr"&gt;ParisData&lt;/a&gt;, l'Open Data de la capitale, nous donne l'occasion de manipuler des donn√©es geor√©f√©renc√©es.
Notre objectif ici sera de les publier sur une page Web gr√¢ce √† un outil simple et l√©ger : &lt;a class="reference external" href="http://polymaps.org"&gt;polymaps&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="transformation"&gt;
&lt;h2&gt;Transformation ‚Ä¶&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;En ouvrant l'acc√®s √† un catalogue de donn√©es diverses (√âquipements, b√¢ti, arbres d'alignement, arr√™t√©s municipaux, ...)
l'initiative &lt;a class="reference external" href="http://opendata.paris.fr"&gt;ParisData&lt;/a&gt;, l'Open Data de la capitale, nous donne l'occasion de manipuler des donn√©es geor√©f√©renc√©es.
Notre objectif ici sera de les publier sur une page Web gr√¢ce √† un outil simple et l√©ger : &lt;a class="reference external" href="http://polymaps.org"&gt;polymaps&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="transformation"&gt;
&lt;h2&gt;Transformation&lt;/h2&gt;
&lt;p&gt;Le syst√®me de projection utilis√© pour certaines donn√©es du catalogue est la &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Lambert_conformal_conic_projection"&gt;Lambert Conformal Conic&lt;/a&gt; (NTF, EPSG 9802)&lt;/p&gt;
&lt;p&gt;Dans la mesure o√π nous voulons d√©ployer quelquechose de tr√®s simple, nous n'avons pas l'intention de sortir la grosse artillerie habituelle (Serveur WMS, Mapserver, QGIS MapServer, ...), nous allons plut√¥t utiliser un fichier GeoJSON, en longitudes/latitudes WGS84 (EPSG:4326).&lt;/p&gt;
&lt;p&gt;Pour cela, la biblioth√®que &lt;a class="reference external" href="http://www.gdal.org"&gt;GDAL&lt;/a&gt; nous offre tous les outils ad√©quates:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ouvrir le fichier shape (ESRI Shapefile) fourni par ParisData&lt;/li&gt;
&lt;li&gt;Reprojetter en EPSG:4326&lt;/li&gt;
&lt;li&gt;Choisir les donn√©es (attributaires) que nous allons conserver&lt;/li&gt;
&lt;li&gt;Exporter en GeoJSON&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pour notre exemple, nous avons choisi les emplacements des &lt;a class="reference external" href="http://opendata.paris.fr/opendata/jsp/site/Portal.jsp?document_id=57&amp;amp;portlet_id=106"&gt;points de collecte de verre&lt;/a&gt;.
Parmis les champs fournis, nous choisissons de ne conserver que leur √©tat (&lt;tt class="docutils literal"&gt;Lb_Etat_E&lt;/tt&gt;) et le nom de leur emplacement (&lt;tt class="docutils literal"&gt;Emplacemnt&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;Comme python est notre language pr√©f√©r√©, et que c'est toujours un plaisir de le montrer en action, voici la petite proc√©dure qui fait tout √ßa :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# python gdal&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;osgeo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ogr&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;osgeo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;osr&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# Ouvrir le r√©pertoire contenant les shape&lt;/span&gt;
&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ogr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INPUT_FOLDER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# La projection de sortie&lt;/span&gt;
&lt;span class="n"&gt;spatialRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;osr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SpatialReference&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;spatialRef&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImportFromEPSG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4326&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Le fichier de sortie&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ogr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetDriverByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GeoJSON&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateDataSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OUTPUT_FILE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Parcourir les couches&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Reprojection originale -&amp;gt; destination&lt;/span&gt;
    &lt;span class="n"&gt;originalSpatialRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetSpatialRef&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;coordTransform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;osr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CoordinateTransformation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;originalSpatialRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                  &lt;span class="n"&gt;spatialRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Choix des champs des donn√©es&lt;/span&gt;
    &lt;span class="n"&gt;properties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ogr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FeatureDefn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddFieldDefn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ogr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FieldDefn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Etat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddFieldDefn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ogr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FieldDefn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Emplacement&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# Cr√©er la nouvelle couche GeoJSON&lt;/span&gt;
    &lt;span class="n"&gt;newLayer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetName&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;spatialRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Parcourir les features&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;feature&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Cr√©er la nouvelle feature&lt;/span&gt;
        &lt;span class="n"&gt;newFeature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ogr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Remplir les champs choisis&lt;/span&gt;
        &lt;span class="n"&gt;newFeature&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Etat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lb_Etat_E&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;newFeature&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Emplacement&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Emplacemnt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;# Reprojetter la feature&lt;/span&gt;
        &lt;span class="n"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetGeometryRef&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coordTransform&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Sauvegarder&lt;/span&gt;
        &lt;span class="n"&gt;newFeature&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;newLayer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateFeature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newFeature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;newFeature&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Destroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nous obtenons en sortie un fichier GeoJSON avec les points en lat / long et les donn√©es 'Etat' et 'Emplacement'.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Feature&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Etat&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Actif&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Emplacement&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;37 CHATEAU D&amp;#39;EAU ANGLE BOUCHARDON&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;geometry&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Point&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;coordinates&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.358920&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;48.871154&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Feature&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Etat&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Actif&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Emplacement&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;13 place de la Nation&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;geometry&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Point&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;coordinates&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.398154&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;48.848723&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Le fichier p√®se 174Ko, mais lorsqu'Apache le servira il p√®sera 20Ko (gr√¢ce √† la compression gzip !)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="affichage"&gt;
&lt;h2&gt;Affichage&lt;/h2&gt;
&lt;p&gt;Nous choisissons d'afficher ces donn√©es dans une page avec &lt;a class="reference external" href="http://polymaps.org"&gt;polymaps&lt;/a&gt;. Il s'agit
d'un composant Javascript permettant de cr√©er des cartes interactives.&lt;/p&gt;
&lt;p&gt;Les crit√®res de comparaison avec OpenLayers (OL) sont:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;la l√©g√®ret√© (~30Ko, 10Ko en gzip!)&lt;/li&gt;
&lt;li&gt;la rapiditit√© d'ex√©cution&lt;/li&gt;
&lt;li&gt;l'utilisation de GeoJSON et SVG (flexibilit√© et styles)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cependant, la couverture fonctionnelle n'est absolument pas comparable. Mais pour afficher une carte avec des points, c'est largement suffisant !&lt;/p&gt;
&lt;p&gt;On commence par un fond de carte: &lt;a class="reference external" href="http://cloudmade.com/"&gt;Cloudmade&lt;/a&gt;, dont les tuiles sont dessin√©es √† partir d'&lt;a class="reference external" href="http://www.openstreetmap.org/"&gt;OpenStreetMap&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;po&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;po&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://{S}tile.cloudmade.com&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/1a1b06b230af4efdbb989ea99e9841af&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/998/256/{Z}/{X}/{Y}.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;b.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;c.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On ajoute ensuite nos donn√©es GeoJSON:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;po&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geoJson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;collecteurs.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Polymaps facilite la personnalisation du dessin en fonction des donn√©es. Ici, nous affichons en vert les collecteurs √† l'√©tat &amp;quot;Actif&amp;quot; et en rouge les autres.
De m√™me nous mettons leur &amp;quot;Emplacement&amp;quot; en tooltip (&lt;tt class="docutils literal"&gt;svg:title&lt;/tt&gt;, Firefox 4, Chrome, Opera 11).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;po&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geoJson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;collecteurs.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;load&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;po&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stylist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                                 &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Etat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Actif&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="w"&gt;                                        &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                                 &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Emplacement&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="" src="/images/parisdata-polymaps.jpg" /&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.makina-corpus.org/demos/mle/parisdata-polymaps/"&gt;Acc√©der √† la page de d√©monstration&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Finalement, l'√©tape la plus compliqu√©e √©tait de reprojetter les donn√©es.
On regrettera donc que l'initiative ParisData les ait publi√© sous cette forme exotique.&lt;/p&gt;
&lt;p&gt;Comme le soulignait &lt;a class="reference external" href="http://www.biologeek.com/2010/12/ce-nest-pas-la-taille-qui-compte/"&gt;David&lt;/a&gt; : &lt;em&gt;Publieurs de donn√©es, concentrez vous sur la qualit√©, pas la taille, les d√©veloppeurs vous remercieront !&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;√Ä noter √©galement que nous avons choisi une approche privil√©giant la l√©g√®ret√©. Or, plusieurs sources de donn√©es de ParisData sont volumineuses et ne pourraient pas √™tre affich√©es en GeoJSON sans mettre √† genoux le navigateur. Nous serions alors contraints de servir les donn√©es sous forme de tuiles...&lt;/p&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="python"></category><category term="polymaps"></category><category term="gis"></category></entry><entry><title>SQLAlchemy, a brave new World</title><link href="https://blog.mathieu-leplatre.info/sqlalchemy-a-brave-new-world.html" rel="alternate"></link><published>2011-02-22T15:02:00+01:00</published><updated>2011-02-22T15:02:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-02-22:/sqlalchemy-a-brave-new-world.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt; becomes an essential technology for any python developper interacting with relational databases.
As a Django developper, I have sat on my laurels for long, being completely satisfied with the &lt;a class="reference external" href="http://docs.djangoproject.com/en/dev/topics/db/queries/"&gt;Django ORM&lt;/a&gt;. It was time to explore its challenger.&lt;/p&gt;
&lt;p&gt;First, before it sounds like I crush my favorite framework : when ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt; becomes an essential technology for any python developper interacting with relational databases.
As a Django developper, I have sat on my laurels for long, being completely satisfied with the &lt;a class="reference external" href="http://docs.djangoproject.com/en/dev/topics/db/queries/"&gt;Django ORM&lt;/a&gt;. It was time to explore its challenger.&lt;/p&gt;
&lt;p&gt;First, before it sounds like I crush my favorite framework : when Django ORM was developped, there was no SQLAlchemy, or almost no good python ORM at all.&lt;/p&gt;
&lt;p&gt;Here are some of the things you might want to know first:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django ORM documentation is clean and well organized&lt;/li&gt;
&lt;li&gt;Dango ORM was not really meant to be used outside django apps&lt;/li&gt;
&lt;li&gt;Django ORM has limitations when it comes to &lt;a class="reference external" href="http://sralab.com/2009/01/14/limitations-of-the-django-orm-10-in-model-inheritance/"&gt;Model&lt;/a&gt; &lt;a class="reference external" href="http://linfiniti.com/2010/03/django-foreign-key-inheritance-solved/"&gt;Inheritance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Django ORM does not manage models migrations without extra stuff like &lt;a class="reference external" href="http://south.aeracode.org/"&gt;South&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Django ORM support for multiple databases was introduced &lt;a class="reference external" href="http://docs.djangoproject.com/en/dev/topics/db/multi-db/"&gt;in version 1.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Django ORM does not always manage connection pooling (e.g. &lt;a class="reference external" href="http://code.djangoproject.com/ticket/7732"&gt;with Oracle&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SQLAlchemy is light and framework independant&lt;/li&gt;
&lt;li&gt;SQLAlchemy is stripped to a minimum set of (clean and well-implemented) features&lt;/li&gt;
&lt;li&gt;SQLAlchemy is very flexible and supports mapping of objects using declarations or metadata&lt;/li&gt;
&lt;li&gt;SQLAlchemy documentation is bloated (API reference is mixed-in with long explanation and use cases)&lt;/li&gt;
&lt;li&gt;SQLAlchemy requires a better knowledge of advanced python mechanisms and architecture&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to explore SQLAlchemy (SA) I created &lt;a class="reference external" href="http://pypi.python.org/pypi/pyfspot"&gt;pyfspot&lt;/a&gt; (&lt;a class="reference external" href="https://github.com/leplatrem/pyfspot"&gt;sources are on github&lt;/a&gt;): a very small application to manage the database of the F-Spot photo manager.
It is not supposed to save lives, but that will at least be:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a pretext for me to dive into the API&lt;/li&gt;
&lt;li&gt;a small and useful tool&lt;/li&gt;
&lt;li&gt;an example of SA in action for any developper interested&lt;/li&gt;
&lt;li&gt;a base for a full &lt;a class="reference external" href="http://f-spot.org/"&gt;F-Spot&lt;/a&gt; management application (&lt;tt class="docutils literal"&gt;&amp;lt;/dreamer&amp;gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I discovered a few concrete things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django inspectdb equivalent ?&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="http://code.google.com/p/sqlautocode/"&gt;sqlautocode&lt;/a&gt; (unfortunately &lt;a class="reference external" href="http://code.google.com/p/sqlautocode/issues/detail?id=32"&gt;I could not use it&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Django fixtures equivalent ?&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="http://code.google.com/p/fixture/"&gt;fixture&lt;/a&gt; (&lt;a class="reference external" href="http://farmdev.com/projects/fixture/using-loadable-fixture.html#an-example-of-loading-data-using-sqlalchemy"&gt;demo&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Django &lt;cite&gt;model.DoesNotExist&lt;/cite&gt; ?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# get() does not throw exception&lt;/span&gt;
&lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# filter().one() does ...&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Photo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;sqlalchemy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoResultFound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# d&amp;#39;oh!&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Invert condition like Django exclude() ?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Photo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;Photo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;base_uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Escape LIKE condition ?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Photo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;base_uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;like&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="si"&gt;%%&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Intersections of many-to-many ?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# A tag&lt;/span&gt;
&lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# A set of photos&lt;/span&gt;
&lt;span class="n"&gt;photoset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Photo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;Photo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;base_uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# intersect() won&amp;#39;t work&lt;/span&gt;
&lt;span class="n"&gt;photoset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intersect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;photos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;InstrumentedList&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# Use any()&lt;/span&gt;
&lt;span class="n"&gt;photoset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Photo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well, those were my first steps. As expected, it did not feel so well to relearn how to walk. But at least I am now ready to get my bearings in SQLAlchemy's world.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Original post at&lt;/em&gt; &lt;a class="reference external" href="http://www.makina-corpus.org/blog/sqlalchemy-brave-new-world"&gt;Makina Corpus&lt;/a&gt;&lt;/p&gt;
</content><category term="Dev"></category><category term="python"></category><category term="django"></category><category term="sqlalchemy"></category></entry><entry><title>Javascript Beautifier in command-line (and in Geany editor)</title><link href="https://blog.mathieu-leplatre.info/javascript-beautifier-in-command-line-and-in-geany-editor.html" rel="alternate"></link><published>2011-02-01T10:20:00+01:00</published><updated>2011-02-01T10:20:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-02-01:/javascript-beautifier-in-command-line-and-in-geany-editor.html</id><summary type="html">&lt;p&gt;Install a Javascript engine (like Mozilla Rhino)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo aptitude install rhino
&lt;/pre&gt;
&lt;p&gt;Get the beautifier script (put it somewhere like &lt;cite&gt;~/.bin&lt;/cite&gt;)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
wget http://jsbeautifier.org/beautify.js
&lt;/pre&gt;
&lt;p&gt;Add the following at the end of &lt;cite&gt;beautify.js&lt;/cite&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
print( js_beautify( readFile( arguments[0] )));
&lt;/pre&gt;
&lt;p&gt;Create a shell script that will call it (like &lt;cite&gt;~/.bin ‚Ä¶&lt;/cite&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Install a Javascript engine (like Mozilla Rhino)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo aptitude install rhino
&lt;/pre&gt;
&lt;p&gt;Get the beautifier script (put it somewhere like &lt;cite&gt;~/.bin&lt;/cite&gt;)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
wget http://jsbeautifier.org/beautify.js
&lt;/pre&gt;
&lt;p&gt;Add the following at the end of &lt;cite&gt;beautify.js&lt;/cite&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
print( js_beautify( readFile( arguments[0] )));
&lt;/pre&gt;
&lt;p&gt;Create a shell script that will call it (like &lt;cite&gt;~/.bin/beautifyjs&lt;/cite&gt;)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/bin/sh
java -cp /usr/share/java/js.jar org.mozilla.javascript.tools.shell.Main ~/.bin/beautify.js $*
&lt;/pre&gt;
&lt;p&gt;Make sure to set it executable&lt;/p&gt;
&lt;pre class="literal-block"&gt;
chmod +x ~/.bin/beautifyjs
&lt;/pre&gt;
&lt;div class="section" id="use-it-from-command-line"&gt;
&lt;h2&gt;Use it from command-line&lt;/h2&gt;
&lt;p&gt;At least to check that it works !&lt;/p&gt;
&lt;pre class="literal-block"&gt;
~/.bin/beautifyjs /your/file.js
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="or-in-geany-editor"&gt;
&lt;h2&gt;Or in Geany Editor&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Open a Javascript file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Open menu &lt;em&gt;Build&lt;/em&gt; &amp;gt; &lt;em&gt;Define Build Commands&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Create a new entry (like &lt;cite&gt;beautify&lt;/cite&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;In command, enter the following&lt;/p&gt;
&lt;pre class="literal-block"&gt;
~/.bin/beautifyjs %f &amp;gt; /tmp/tmpfile.js &amp;amp;&amp;amp; geany /tmp/tmpfile.js
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;In working directory, enter &lt;cite&gt;%d&lt;/cite&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="tips"></category><category term="javascript"></category></entry><entry><title>Python UTF-8 print fails when redirecting stdout</title><link href="https://blog.mathieu-leplatre.info/python-utf-8-print-fails-when-redirecting-stdout.html" rel="alternate"></link><published>2011-01-26T11:25:00+01:00</published><updated>2011-01-26T11:25:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2011-01-26:/python-utf-8-print-fails-when-redirecting-stdout.html</id><summary type="html">&lt;p&gt;Consider the following piece of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;’é’°÷Ä’§’°’∂’°’∑’•’∂&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running this in a terminal works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;test.py
’é’°÷Ä’§’°’∂’°’∑’•’∂
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Redirecting standard output to a file &lt;strong&gt;fails&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;test.py&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;file
Traceback&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;most&lt;span class="w"&gt; &lt;/span&gt;recent&lt;span class="w"&gt; &lt;/span&gt;call&lt;span class="w"&gt; &lt;/span&gt;last&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;span class="w"&gt;  &lt;/span&gt;File&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test.py&amp;quot;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;line&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;module&amp;gt;
&lt;span class="w"&gt;    &lt;/span&gt;print&lt;span class="w"&gt; &lt;/span&gt;u&lt;span class="s2"&gt;&amp;quot;’é’°÷Ä’§’°’∂’°’∑’•’∂&amp;quot;&lt;/span&gt;
UnicodeEncodeError:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;codec ‚Ä¶&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Consider the following piece of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;’é’°÷Ä’§’°’∂’°’∑’•’∂&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running this in a terminal works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;test.py
’é’°÷Ä’§’°’∂’°’∑’•’∂
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Redirecting standard output to a file &lt;strong&gt;fails&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;test.py&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;file
Traceback&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;most&lt;span class="w"&gt; &lt;/span&gt;recent&lt;span class="w"&gt; &lt;/span&gt;call&lt;span class="w"&gt; &lt;/span&gt;last&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;span class="w"&gt;  &lt;/span&gt;File&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test.py&amp;quot;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;line&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;module&amp;gt;
&lt;span class="w"&gt;    &lt;/span&gt;print&lt;span class="w"&gt; &lt;/span&gt;u&lt;span class="s2"&gt;&amp;quot;’é’°÷Ä’§’°’∂’°’∑’•’∂&amp;quot;&lt;/span&gt;
UnicodeEncodeError:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;codec&lt;span class="w"&gt; &lt;/span&gt;can&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t&lt;span class="w"&gt; &lt;/span&gt;encode&lt;span class="w"&gt; &lt;/span&gt;characters&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;position&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;-9:&lt;span class="w"&gt; &lt;/span&gt;ordinal&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;range&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="http://wiki.python.org/moin/PrintFails"&gt;Explanations are available on Python official wiki&lt;/a&gt;: default encoding has to be forced.&lt;/p&gt;
&lt;p&gt;With an environment variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;PYTHONIOENCODING&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf_8&amp;#39;&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PYTHONIOENCODING
$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;test.py&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;file
$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With source modification:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;codecs&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;locale&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;codecs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getwriter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;locale&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpreferredencoding&lt;/span&gt;&lt;span class="p"&gt;())(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="Dev"></category><category term="python"></category><category term="encoding"></category><category term="shell"></category></entry><entry><title>Grep with context lines above and below</title><link href="https://blog.mathieu-leplatre.info/grep-with-context-lines-above-and-below.html" rel="alternate"></link><published>2010-09-30T10:25:00+02:00</published><updated>2010-09-30T10:25:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2010-09-30:/grep-with-context-lines-above-and-below.html</id><content type="html">&lt;p&gt;I was about to write a script to implement exactly what already exists natively in GNU &lt;cite&gt;grep&lt;/cite&gt;, a blasphemy I got saved from by my workmates.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;--line-number&lt;span class="w"&gt; &lt;/span&gt;--colour&lt;span class="o"&gt;=&lt;/span&gt;AUTO&lt;span class="w"&gt; &lt;/span&gt;--before-context&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--after-context&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PATTERN&lt;span class="w"&gt; &lt;/span&gt;FILENAME
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="" src="/images/grep-lines.png" /&gt;
</content><category term="Dev"></category><category term="tips"></category><category term="shell"></category></entry><entry><title>Python lazy hasattr()</title><link href="https://blog.mathieu-leplatre.info/python-lazy-hasattr.html" rel="alternate"></link><published>2010-09-30T10:20:00+02:00</published><updated>2010-09-30T10:20:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2010-09-30:/python-lazy-hasattr.html</id><summary type="html">&lt;p&gt;Python &lt;cite&gt;hasattr()&lt;/cite&gt; evaluates the specified attribute, which may not be desired !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__get__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;evaluated&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClassA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Attr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;evaluated&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ClassA&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;evaluated&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;evaluated&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now note that ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python &lt;cite&gt;hasattr()&lt;/cite&gt; evaluates the specified attribute, which may not be desired !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__get__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;evaluated&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClassA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Attr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;evaluated&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ClassA&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;evaluated&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;evaluated&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now note that &lt;cite&gt;hasattr()&lt;/cite&gt; evaluates the lazy attribute !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;evaluated&lt;/span&gt;
&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;evaluated&lt;/span&gt;
&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let us fix that !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lazyhasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                   &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__class__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ClassA&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;lazyhasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;lazyhasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="Dev"></category><category term="tips"></category><category term="python"></category></entry><entry><title>Python check arguments types</title><link href="https://blog.mathieu-leplatre.info/python-check-arguments-types.html" rel="alternate"></link><published>2010-06-10T11:25:00+02:00</published><updated>2010-06-10T11:25:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2010-06-10:/python-check-arguments-types.html</id><summary type="html">&lt;p&gt;Decorators help us wrap some routines at function invocation. Here I show a small example that raises &lt;cite&gt;TypeError&lt;/cite&gt; exceptions when given args have unexpected type. Note that &lt;strong&gt;it is not pythonic to type check&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This recipe is quite old, as its first pieces appear in &lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0318/"&gt;PEP-0318&lt;/a&gt; in 2003. &lt;a class="reference external" href="http://pypi.python.org/pypi/typecheck"&gt;A module ‚Ä¶&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Decorators help us wrap some routines at function invocation. Here I show a small example that raises &lt;cite&gt;TypeError&lt;/cite&gt; exceptions when given args have unexpected type. Note that &lt;strong&gt;it is not pythonic to type check&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This recipe is quite old, as its first pieces appear in &lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0318/"&gt;PEP-0318&lt;/a&gt; in 2003. &lt;a class="reference external" href="http://pypi.python.org/pypi/typecheck"&gt;A module exists too&lt;/a&gt; but it looks neglected...&lt;/p&gt;
&lt;p&gt;The (heretic) decorator itself !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;accepts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argstypes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargstypes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argstypes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;() takes at most &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; non-keyword arguments (&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; given)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argstypes&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="n"&gt;argspairs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argstypes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;kwargstypes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Unexpected keyword argument &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; for &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;()&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;argspairs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargstypes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;argspairs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Parameter &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; is not &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let us decorate !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nd"&gt;@accepts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See it in action...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;takes&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;least&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;takes&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keyword&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Parameter&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unexpected&lt;/span&gt; &lt;span class="n"&gt;keyword&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;arg3&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or with classes...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="nd"&gt;@accepts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="nd"&gt;@accepts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Parameter&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;__main__.B object at 0x902466c&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The same can be applied to &lt;cite&gt;return&lt;/cite&gt; :)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rtype&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rtype&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;return value &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt; does not match &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;rtype&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nd"&gt;@accepts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="nd"&gt;@returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;..but kids, don't do this at home :-)&lt;/p&gt;
</content><category term="Dev"></category><category term="python"></category><category term="decorators"></category></entry><entry><title>Filesystem Watch with PyQt4</title><link href="https://blog.mathieu-leplatre.info/filesystem-watch-with-pyqt4.html" rel="alternate"></link><published>2009-08-14T13:37:00+02:00</published><updated>2009-08-14T13:37:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2009-08-14:/filesystem-watch-with-pyqt4.html</id><summary type="html">&lt;p&gt;I decided to write a generic program that can watch a folder or some files and run a command when changes occur.&lt;/p&gt;
&lt;p&gt;Most of the work is done by PyQt4's &lt;cite&gt;QFileSystemWatcher&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;qfsw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QFileSystemWatcher&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;qfsw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addPaths&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;path1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file2&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QObject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qfsw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;directoryChanged(QString)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QObject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect ‚Ä¶&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I decided to write a generic program that can watch a folder or some files and run a command when changes occur.&lt;/p&gt;
&lt;p&gt;Most of the work is done by PyQt4's &lt;cite&gt;QFileSystemWatcher&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;qfsw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QFileSystemWatcher&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;qfsw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addPaths&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;path1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file2&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QObject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qfsw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;directoryChanged(QString)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QObject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qfsw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fileChanged(QString)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the script&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# !/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Runs a command when a file system change occurs in specified list of paths.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# (c) Copyright 2008, Mathieu Leplatre,&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# This software may be used and distributed according to the terms&lt;/span&gt;
&lt;span class="c1"&gt;# of the GNU Public License, incorporated herein by reference.&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;optparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OptionParser&lt;/span&gt;

&lt;span class="c1"&gt;# Parse command-line options&lt;/span&gt;
&lt;span class="n"&gt;usage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;Usage: %prog [options] COMMAND PATHS&lt;/span&gt;
&lt;span class="s2"&gt;Run COMMAND when a file system change occurs in specified list of PATHS.&lt;/span&gt;

&lt;span class="s2"&gt;COMMAND can contain &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; to refer changed file or directory.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OptionParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%prog 1.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_help&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Command&lt;/span&gt;
&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# List of paths&lt;/span&gt;
&lt;span class="n"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;onFileSystemChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Callback when file or folder change&lt;/span&gt;
&lt;span class="sd"&gt;    @param path : Changed path&lt;/span&gt;
&lt;span class="sd"&gt;    @type  path : string&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;
    &lt;span class="c1"&gt;# Execute command replacing %s with path:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
    &lt;span class="c1"&gt;# Run as different process&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Run &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;...&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Set up file system watcher&lt;/span&gt;
    &lt;span class="n"&gt;qfsw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QFileSystemWatcher&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;qfsw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addPaths&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QObject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qfsw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;directoryChanged(QString)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;onFileSystemChanged&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QObject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qfsw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fileChanged(QString)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;onFileSystemChanged&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Allow program to be interrupted with Ctrl+C&lt;/span&gt;
    &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIG_DFL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Qt Main loop&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="Dev"></category><category term="qt"></category><category term="pyqt4"></category><category term="python"></category></entry><entry><title>Text extents with Python Cairo</title><link href="https://blog.mathieu-leplatre.info/text-extents-with-python-cairo.html" rel="alternate"></link><published>2009-08-10T10:20:00+02:00</published><updated>2009-08-10T10:20:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2009-08-10:/text-extents-with-python-cairo.html</id><summary type="html">&lt;p&gt;I needed this and could not find it. So I share it here (and even better if Google'd index it!)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;textwidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cairo&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;
    &lt;span class="n"&gt;surface&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cairo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SVGSurface&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;undefined.svg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1280&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cairo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;surface&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_font_face&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Arial&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cairo ‚Ä¶&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I needed this and could not find it. So I share it here (and even better if Google'd index it!)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;textwidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cairo&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;
    &lt;span class="n"&gt;surface&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cairo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SVGSurface&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;undefined.svg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1280&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cairo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;surface&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_font_face&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Arial&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cairo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FONT_SLANT_NORMAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cairo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FONT_WEIGHT_BOLD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_font_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;xbearing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ybearing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xadvance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;yadvance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_extents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="Dev"></category><category term="cairo"></category><category term="python"></category></entry><entry><title>Colored Output in Console with Python</title><link href="https://blog.mathieu-leplatre.info/colored-output-in-console-with-python.html" rel="alternate"></link><published>2008-12-31T13:37:00+01:00</published><updated>2008-12-31T13:37:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2008-12-31:/colored-output-in-console-with-python.html</id><summary type="html">&lt;p&gt;Playing around with ANSI in a color capable terminal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;BLACK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GREEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;YELLOW&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BLUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAGENTA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CYAN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WHITE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#following from Python cookbook, #475186&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_colours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;isatty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isatty&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt; &lt;span class="c1"&gt;# auto color only on ‚Ä¶&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Playing around with ANSI in a color capable terminal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;BLACK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GREEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;YELLOW&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BLUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAGENTA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CYAN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WHITE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#following from Python cookbook, #475186&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_colours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;isatty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isatty&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt; &lt;span class="c1"&gt;# auto color only on TTYs&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;curses&lt;/span&gt;
        &lt;span class="n"&gt;curses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setupterm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;curses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tigetnum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;colors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# guess false in case of error&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;has_colours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;has_colours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colour&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;WHITE&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;has_colours&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x1b&lt;/span&gt;&lt;span class="s2"&gt;[1;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;m&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;colour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x1b&lt;/span&gt;&lt;span class="s2"&gt;[0m&amp;quot;&lt;/span&gt;
                &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A simple demo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Test&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="n"&gt;printout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[debug]   &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GREEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;in green&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;printout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[warning] &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;YELLOW&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;in yellow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;printout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[error]   &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;in red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="" src="/images/ansi-color.png" /&gt;
</content><category term="Dev"></category><category term="terminal"></category><category term="python"></category></entry><entry><title>Automatic blog publishing using Python and XML-RPC</title><link href="https://blog.mathieu-leplatre.info/automatic-blog-publishing-using-python-and-xml-rpc.html" rel="alternate"></link><published>2008-12-01T13:37:00+01:00</published><updated>2008-12-01T13:37:00+01:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2008-12-01:/automatic-blog-publishing-using-python-and-xml-rpc.html</id><summary type="html">&lt;p&gt;The following piece of code collects links in a Pligg database (but could be any kind of source like RSS feed...) and automatically builds and publishes entries in a blog using XML-RPC.&lt;/p&gt;
&lt;p&gt;A small database class :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DatabaseAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3306&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;root123 ‚Ä¶&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;The following piece of code collects links in a Pligg database (but could be any kind of source like RSS feed...) and automatically builds and publishes entries in a blog using XML-RPC.&lt;/p&gt;
&lt;p&gt;A small database class :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DatabaseAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3306&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;root123&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mysql&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;MySQLdb&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MySQLdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sqlquery&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqlquery&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A Blog publishing class :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BlogAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urlapi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;xmlrpclib&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xmlrpclib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xmlrpclib&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xmlrpclib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServerProxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;urlapi&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Could not connect to &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;newPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blogid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;em&amp;gt;empty entry&amp;lt;/em&amp;gt;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
        &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;metaWeblog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;blogid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xmlrpclib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fault&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fault&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;fault&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;faultString&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Build the SQL query : all entries of current week&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weeks&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;agelimit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;
&lt;span class="n"&gt;stmt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;SELECT link_url, link_url_title&lt;/span&gt;
&lt;span class="s2"&gt;FROM pligg_links&lt;/span&gt;
&lt;span class="s2"&gt;WHERE link_status = &amp;#39;published&amp;#39; AND link_published_date &amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;ORDER BY link_published_date DESC&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;agelimit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%Y%m&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;000000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Put everything together :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DatabaseAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pass&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;entries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stmt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;ul&amp;gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;/ul&amp;gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BlogAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://yourblog/xmlrpc/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pass&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Links week #&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%W&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="Dev"></category><category term="python"></category><category term="xml-rpc"></category></entry><entry><title>Static build of Cairo and librsvg</title><link href="https://blog.mathieu-leplatre.info/static-build-of-cairo-and-librsvg.html" rel="alternate"></link><published>2008-07-01T11:25:00+02:00</published><updated>2008-07-01T11:25:00+02:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:blog.mathieu-leplatre.info,2008-07-01:/static-build-of-cairo-and-librsvg.html</id><summary type="html">&lt;img alt="" src="/images/unicode.png" /&gt;
&lt;div class="section" id="why"&gt;
&lt;h2&gt;Why ?&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Convert SVG files to PDF or PNG, with full Unicode support (right-to-left languages), transparency, gradients, PDF image compression, ...&lt;/li&gt;
&lt;li&gt;Cairo and librsvg are the best in town.&lt;/li&gt;
&lt;li&gt;Cairo and librsvg are very modern libraries which became famous only in the past 3 years. Thus, GNU/Linux distributions do not always ‚Ä¶&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;img alt="" src="/images/unicode.png" /&gt;
&lt;div class="section" id="why"&gt;
&lt;h2&gt;Why ?&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Convert SVG files to PDF or PNG, with full Unicode support (right-to-left languages), transparency, gradients, PDF image compression, ...&lt;/li&gt;
&lt;li&gt;Cairo and librsvg are the best in town.&lt;/li&gt;
&lt;li&gt;Cairo and librsvg are very modern libraries which became famous only in the past 3 years. Thus, GNU/Linux distributions do not always have recent versions and full capabilities.&lt;/li&gt;
&lt;li&gt;A &lt;cite&gt;static build&lt;/cite&gt; does all the bindings to libraries at compile time, which hence removes specific versions dependencies. &lt;em&gt;(this method has many drawbacks but can help sometimes)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="the-program-svgconvert-c"&gt;
&lt;h2&gt;The program : svgconvert.c&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;This program is a merge of Carl Worth's &lt;a class="reference external" href="http://cgit.freedesktop.org/~cworth/svg2pdf/"&gt;svg2pdf&lt;/a&gt; and &lt;a class="reference external" href="http://cgit.freedesktop.org/~cworth/svg2png/"&gt;svg2png&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;* Copyright ¬© 2005 Red Hat, Inc.&lt;/span&gt;
&lt;span class="cm"&gt;* Copyright ¬© 2006 Red Hat, Inc.&lt;/span&gt;
&lt;span class="cm"&gt;* Copyright ¬© 2007 Red Hat, Inc.&lt;/span&gt;
&lt;span class="cm"&gt;*&lt;/span&gt;
&lt;span class="cm"&gt;* Permission is hereby granted, free of charge, to any person&lt;/span&gt;
&lt;span class="cm"&gt;* obtaining a copy of this software and associated documentation&lt;/span&gt;
&lt;span class="cm"&gt;* files (the &amp;quot;Software&amp;quot;), to deal in the Software without&lt;/span&gt;
&lt;span class="cm"&gt;* restriction, including without limitation the rights to use, copy,&lt;/span&gt;
&lt;span class="cm"&gt;* modify, merge, publish, distribute, sublicense, and/or sell copies&lt;/span&gt;
&lt;span class="cm"&gt;* of the Software, and to permit persons to whom the Software is&lt;/span&gt;
&lt;span class="cm"&gt;* furnished to do so, subject to the following conditions:&lt;/span&gt;
&lt;span class="cm"&gt;*&lt;/span&gt;
&lt;span class="cm"&gt;* The above copyright notice and this permission notice shall be&lt;/span&gt;
&lt;span class="cm"&gt;* included in all copies or substantial portions of the Software.&lt;/span&gt;
&lt;span class="cm"&gt;*&lt;/span&gt;
&lt;span class="cm"&gt;* THE SOFTWARE IS PROVIDED &amp;quot;AS IS&amp;quot;, WITHOUT WARRANTY OF ANY KIND,&lt;/span&gt;
&lt;span class="cm"&gt;* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF&lt;/span&gt;
&lt;span class="cm"&gt;* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND&lt;/span&gt;
&lt;span class="cm"&gt;* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS&lt;/span&gt;
&lt;span class="cm"&gt;* BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN&lt;/span&gt;
&lt;span class="cm"&gt;* ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN&lt;/span&gt;
&lt;span class="cm"&gt;* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&lt;/span&gt;
&lt;span class="cm"&gt;* SOFTWARE.&lt;/span&gt;
&lt;span class="cm"&gt;*&lt;/span&gt;
&lt;span class="cm"&gt;* Authors: Kristian H√∏gsberg &amp;lt;krh@redhat.com&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt;* Carl Worth &amp;lt;cworth@redhat.com&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt;* Behdad Esfahbod &amp;lt;besfahbo@redhat.com&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt;* Mathieu Leplatre &amp;lt;contact@mathieu-leplatre.info&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;glib/gprintf.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;librsvg/rsvg.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;librsvg/rsvg-cairo.h&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;cairo-pdf.h&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define FAIL(msg) \&lt;/span&gt;
&lt;span class="cp"&gt;do { fprintf (stderr, &amp;quot;FAIL: %s\n&amp;quot;, msg); exit (-1); } while (0)&lt;/span&gt;

&lt;span class="cp"&gt;#define PIXELS_PER_POINT 1&lt;/span&gt;

&lt;span class="cp"&gt;#define PDF 0&lt;/span&gt;
&lt;span class="cp"&gt;#define PNG 1&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;GError&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;RsvgHandle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;RsvgDimensionData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cairo_surface_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;surface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cairo_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cairo_status_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;FAIL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;usage: svgconvert input_file.svg output_file&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PDF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g_str_has_suffix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g_ascii_strdown&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PNG&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;g_type_init&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;rsvg_set_default_dpi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;72.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rsvg_handle_new_from_file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;FAIL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;rsvg_handle_get_dimensions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PNG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;surface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cairo_image_surface_create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CAIRO_FORMAT_ARGB32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;surface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cairo_pdf_surface_create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cairo_create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;surface&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;rsvg_handle_render_cairo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cairo_status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;FAIL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cairo_status_to_string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PNG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;cairo_surface_write_to_png&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;surface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cairo_destroy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cairo_surface_destroy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;surface&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="build-with-shared-librairies"&gt;
&lt;h2&gt;Build with shared librairies&lt;/h2&gt;
&lt;p&gt;You would just do :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gcc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;pkg-config&lt;span class="w"&gt; &lt;/span&gt;--cflags&lt;span class="w"&gt; &lt;/span&gt;--libs&lt;span class="w"&gt; &lt;/span&gt;librsvg-2.0&lt;span class="w"&gt; &lt;/span&gt;cairo-pdf&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;svgconvert&lt;span class="w"&gt; &lt;/span&gt;svgconvert.c
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which creates a binary of 9.0K.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="build-with-static-librairies"&gt;
&lt;h2&gt;Build with static librairies&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;First install the development versions of the packages, to make sure you have all &lt;strong&gt;/usr/lib/*.a&lt;/strong&gt; mentioned below.&lt;/li&gt;
&lt;li&gt;Use this Makefile, which creates a binary of 5.9M. It was tested on Ubuntu 8.04 which comes with Gnome 2.22, librsvg 2.22 and Cairo 1.6.0.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;svgconvert

&lt;span class="nv"&gt;MYCFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;pkg-config&lt;span class="w"&gt; &lt;/span&gt;--cflags&lt;span class="w"&gt; &lt;/span&gt;librsvg-2.0&lt;span class="w"&gt; &lt;/span&gt;cairo-pdf&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nv"&gt;LDFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;pkg-config&lt;span class="w"&gt; &lt;/span&gt;--libs&lt;span class="w"&gt; &lt;/span&gt;librsvg-2.0&lt;span class="w"&gt; &lt;/span&gt;cairo-pdf&lt;span class="w"&gt; &lt;/span&gt;freetype2&lt;span class="w"&gt; &lt;/span&gt;fontconfig&lt;span class="w"&gt; &lt;/span&gt;pango&lt;span class="w"&gt; &lt;/span&gt;pangoft2&lt;span class="w"&gt; &lt;/span&gt;pangocairo&lt;span class="w"&gt;  &lt;/span&gt;cairo-ft&lt;span class="w"&gt; &lt;/span&gt;libthai&lt;span class="w"&gt; &lt;/span&gt;datrie&lt;span class="w"&gt; &lt;/span&gt;libgsf-1&lt;span class="w"&gt; &lt;/span&gt;gnome-vfs-2.0&lt;span class="w"&gt; &lt;/span&gt;libcroco-0.6&lt;span class="w"&gt; &lt;/span&gt;libpcre&lt;span class="w"&gt; &lt;/span&gt;pixman-1&lt;span class="w"&gt; &lt;/span&gt;libpng&lt;span class="w"&gt; &lt;/span&gt;libxml-2.0&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nv"&gt;MYLDFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;LDFLAGS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/usr/lib/libgio-2.0.a&lt;span class="w"&gt;  &lt;/span&gt;/usr/lib/libglib-2.0.a&lt;span class="w"&gt; &lt;/span&gt;/usr/lib/libselinux.a&lt;span class="w"&gt; &lt;/span&gt;/usr/lib/libexpat.a&lt;span class="w"&gt; &lt;/span&gt;/usr/lib/libfreetype.a&lt;span class="w"&gt; &lt;/span&gt;/usr/lib/libbz2.a&lt;span class="w"&gt; &lt;/span&gt;/usr/lib/libjpeg.a&lt;span class="w"&gt; &lt;/span&gt;/usr/lib/libtiff.a&lt;span class="w"&gt; &lt;/span&gt;/usr/lib/libbz2.a&lt;span class="w"&gt; &lt;/span&gt;/usr/lib/libz.a&lt;span class="w"&gt; &lt;/span&gt;/usr/lib/libm.a

all:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ALL&lt;span class="k"&gt;)&lt;/span&gt;

%:&lt;span class="w"&gt; &lt;/span&gt;%.c
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$^&lt;span class="w"&gt; &lt;/span&gt;-pthread&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;MYCFLAGS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-static&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;MYLDFLAGS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;

clean:
&lt;span class="w"&gt;    &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ALL&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*.o
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;To check if &lt;strong&gt;pkg-config&lt;/strong&gt; knows about a specific library :&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;pkg-config&lt;span class="w"&gt; &lt;/span&gt;--list-all&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;vfs
gnome-vfs-sharp-2.0&lt;span class="w"&gt;           &lt;/span&gt;GnomeVfs&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;GnomeVfs
gnome-vfs-2.0&lt;span class="w"&gt;                 &lt;/span&gt;gnome-vfs&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;The&lt;span class="w"&gt; &lt;/span&gt;GNOME&lt;span class="w"&gt; &lt;/span&gt;virtual&lt;span class="w"&gt; &lt;/span&gt;file-system&lt;span class="w"&gt; &lt;/span&gt;libraries
gnome-vfsmm-2.6&lt;span class="w"&gt;               &lt;/span&gt;gnome-vfsmm&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;C++&lt;span class="w"&gt; &lt;/span&gt;wrapper&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gnome-vfs
gnome-vfs-module-2.0&lt;span class="w"&gt;          &lt;/span&gt;gnome-vfs-module&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;The&lt;span class="w"&gt; &lt;/span&gt;GNOME&lt;span class="w"&gt; &lt;/span&gt;virtual&lt;span class="w"&gt; &lt;/span&gt;file-system&lt;span class="w"&gt; &lt;/span&gt;module&lt;span class="w"&gt; &lt;/span&gt;include&lt;span class="w"&gt; &lt;/span&gt;info
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;To check if a library has a specific symbol, use the &lt;strong&gt;nm&lt;/strong&gt; command :&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;nm&lt;span class="w"&gt; &lt;/span&gt;/usr/lib/libexpat.a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;XML_SetStart
000001c0&lt;span class="w"&gt; &lt;/span&gt;T&lt;span class="w"&gt; &lt;/span&gt;XML_SetStartCdataSectionHandler
&lt;span class="m"&gt;00000240&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;T&lt;span class="w"&gt; &lt;/span&gt;XML_SetStartDoctypeDeclHandler
&lt;span class="m"&gt;00000150&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;T&lt;span class="w"&gt; &lt;/span&gt;XML_SetStartElementHandler
000002a0&lt;span class="w"&gt; &lt;/span&gt;T&lt;span class="w"&gt; &lt;/span&gt;XML_SetStartNamespaceDeclHandler
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="download"&gt;
&lt;h2&gt;Download&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://mathieu-leplatre.info/media/svgconvert-src.tar.gz"&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://mathieu-leplatre.info/media/svgconvert-bin.tar.gz"&gt;Binary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://cairographics.org"&gt;http://cairographics.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://librsvg.sourceforge.net"&gt;http://librsvg.sourceforge.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Thanks for the precious help of &lt;a class="reference external" href="http://www.cworth.org"&gt;Carl Worth&lt;/a&gt; on &lt;cite&gt;#cairo&lt;/cite&gt; at irc.freenode.net, Zugzwang and nvteighen on &lt;a class="reference external" href="http://ubuntuforums.org"&gt;http://ubuntuforums.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Dev"></category><category term="cairo"></category><category term="svg"></category><category term="C"></category></entry></feed>